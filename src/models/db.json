{
  "title": "JavaScript Interview Questions & Answers",
  "description": "Click ‚≠ê if you like the project and follow @SudheerJonna for more updates. Coding questions available here. Check DataStructures and Algorithms for DSA related questions and ECMAScript for all ES features.",
  "sponsors": [
    {
      "name": "GreatFrontEnd",
      "description": "üí° Nail JavaScript interviews with questions and solutions from ex-interviewers! Try GreatFrontEnd ‚Üí üí°"
    },
    {
      "name": "FrontEndLead",
      "description": "üöÄ Ace Javascript interview questions with solutions from FAANG+ companies! Try FrontendLead ‚Üí üöÄ"
    },
    {
      "name": "ZTM",
      "description": "1. Take this JavaScript Projects course to go from a JS beginner to confidently building your own projects\n2. Take this coding interview bootcamp if you're serious about getting hired and don't have a CS degree\n3. Take this Advanced JavaScript Course to learn advanced JS concepts and become a top JS developer"
    }
  ],
  "questions": [
    {
      "id": 1,
      "question": "What are the possible ways to create objects in JavaScript",
      "answer": "There are many ways to create objects in javascript as mentioned below:\n\n**Object literal syntax:**\n\nThe object literal syntax (or object initializer), is a comma-separated set of name-value pairs wrapped in curly braces.\n\n```javascript\nvar object = {\n  name: \"Sudheer\",\n  age: 34,\n};\n```\n\nObject literal property values can be of any data type, including array, function, and nested object.\n\nNote: This is one of the easiest ways to create an object and it's most commonly used for creating simple, ad-hoc objects.\n\n**Object constructor:**\n\nThe simplest way to create an empty object is using the Object constructor. Currently this approach is not recommended.\n\n```javascript\nvar object = new Object();\n```\n\nThe Object() is a built-in constructor function so \"new\" keyword is not required for creating plain objects. The above code snippet can be re-written as:\n\n```javascript\nvar object = Object();\n```\n\nHowever, Object() can be used to either create a plain object or convert a given value into its corresponding object wrapper, whereas new Object() is specifically used to explicitly create a new object instance.\n\n**Object's create method:**\n\nThe create method of Object is used to create a new object by passing the specified prototype object and properties as arguments, i.e., this pattern is helpful to create new objects based on existing objects. In other words, this is useful for setting up prototypal inheritance. The second argument is optional and it is used to create properties on a newly created object.\n\nThe following code creates a new empty object whose prototype is null.\n\n```javascript\nvar object = Object.create(null);\n```\n\nThe following example creates an object along with additional new properties.\n\n```javascript\nlet vehicle = {\n  wheels: \"4\",\n  fuelType: \"Gasoline\",\n  color: \"Green\",\n};\nlet carProps = {\n  type: {\n    value: \"Volkswagen\",\n  },\n  model: {\n    value: \"Golf\",\n  },\n};\n\nvar car = Object.create(vehicle, carProps);\nconsole.log(car);\n```\n\n**Function constructor:**\n\nIn this approach, create any function and apply the new operator to create object instances. This was the main way to do constructor-based OOP before ES6 classes.\n\n```javascript\nfunction Person(name) {\n  this.name = name;\n  this.age = 21;\n}\nvar object = new Person(\"Sudheer\");\n```\n\n**Function constructor with prototype:**\n\nThis is similar to function constructor but it uses prototype for their properties and methods. Using prototype means you're sharing methods/properties across instances, which saves memory and improve performance.\n\n```javascript\nfunction Person() {}\nPerson.prototype.name = \"Sudheer\";\nvar object = new Person();\n```\n\nThis is equivalent to creating an instance with Object.create method with a function prototype and then calling that function with an instance and parameters as arguments.\n\n```javascript\nfunction func(x, y, z) {\n this.x = x;\n this.y = y;\n this.z = z;\n}\n\nvar instance = new func(1, 2, 3);\n// (OR)\n\nfunction func(x, y, z) {\n   this.x = x;\n   this.y = y;\n   this.z = z;\n}\n// Create a new instance using function prototype.\nvar newInstance = Object.create(func.prototype)\n\n// Call the function\nvar result = func.call(newInstance, 1, 2, 3),\n\n// If the result is a non-null object then use it otherwise just use the new instance.\nconsole.log(result && typeof result === 'object' ? result : newInstance);\n```\n\n**Object's assign method:**\n\nThe Object.assign method is used to copy all the properties from one or more source objects and stores them into a target object. This is mainly used for cloning and merging\n\nThe following code creates a new staff object by copying properties of his working company and the car he owns.\n\n```javascript\nconst orgObject = { company: \"XYZ Corp\" };\nconst carObject = { name: \"Toyota\" };\nconst staff = Object.assign({}, orgObject, carObject);\n```\n\n**ES6 Class syntax:**\n\nES6 introduces class feature to create objects. This is syntactic sugar over the prototype-based system.\n\n```javascript\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nvar object = new Person(\"Sudheer\");\n```\n\n**Singleton pattern:**\n\nA Singleton is an object which can only be instantiated one time. Repeated calls to its constructor return the same instance. This way one can ensure that they don't accidentally create multiple instances.\n\nSingleton with Closure (Classic JS Pattern)\n\n```javascript\nconst Singleton = (function () {\nlet instance;\n\nfunction createInstance() {\n  return { name: \"Sudheer\" };\n}\n\nreturn {\n  getInstance: function () {\n    if (!instance) {\n      instance = createInstance();\n    }\n    return instance;\n  }\n};\n})();\n\n// Usage\nconst obj1 = Singleton.getInstance();\nconst obj2 = Singleton.getInstance();\n\nconsole.log(obj1 === obj2); // true\n```\n\nIn modern JavaScript applications, singletons are commonly implemented using ES6 modules for their built-in caching behavior, or closures for encapsulated state management."
    },
    {
      "id": 2,
      "question": "What is a prototype chain",
      "answer": "The prototype chain is a core concept in JavaScript's inheritance model. It allows objects to inherit properties and methods from other objects. When you try to access a property or method on an object, JavaScript first looks for it on that object itself. If it's not found, the engine looks up the object's internal [[Prototype]] reference (accessible via Object.getPrototypeOf(obj) or the deprecated __proto__ property) and continues searching up the chain until it finds the property or reaches the end (usually null).\n\nFor objects created via constructor functions, the prototype chain starts with the instance, then refers to the constructor's .prototype object, and continues from there. For example:\n\n```javascript\nfunction Person() {}\nconst person1 = new Person();\n\nconsole.log(Object.getPrototypeOf(person1) === Person.prototype); // true\n```\n\nThis mechanism allows for property and method sharing among objects, enabling code reuse and a form of inheritance.\n\n**Summary:**\n\n- The prototype chain enables inheritance in JavaScript.\n- If a property isn't found on an object, JavaScript looks up its prototype chain.\n- The prototype of an object instance can be accessed with Object.getPrototypeOf(obj) or __proto__.\n- The prototype of a constructor function is available via Constructor.prototype.\n- The chain ends when the prototype is null."
    },
    {
      "id": 3,
      "question": "What is the Difference Between call, apply, and bind",
      "answer": "In JavaScript, call, apply, and bind are methods that allow you to control the context (this value) in which a function is executed. While their purposes are similar, they differ in how they handle arguments and when the function is invoked.\n\n**call**\n\nDescription: The call() method invokes a function immediately, allowing you to specify the value of this and pass arguments individually (comma-separated).\n\nSyntax:\n```javascript\nfunc.call(thisArg, arg1, arg2, ...)\n```\n\nExample:\n```javascript\nvar employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\ninvite.call(employee1, \"Hello\", \"How are you?\"); // Hello John Rodson, How are you?\ninvite.call(employee2, \"Hello\", \"How are you?\"); // Hello Jimmy Baily, How are you?\n```\n\n**apply**\n\nDescription: The apply() method is similar to call(), but it takes the function arguments as an array (or array-like object) instead of individual arguments.\n\nSyntax:\n```javascript\nfunc.apply(thisArg, [argsArray])\n```\n\nExample:\n```javascript\nvar employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\ninvite.apply(employee1, [\"Hello\", \"How are you?\"]); // Hello John Rodson, How are you?\ninvite.apply(employee2, [\"Hello\", \"How are you?\"]); // Hello Jimmy Baily, How are you?\n```\n\n**bind**\n\nDescription: The bind() method creates a new function with a specific this value and, optionally, preset initial arguments. Unlike call and apply, bind does not immediately invoke the function; instead, it returns a new function that you can call later.\n\nSyntax:\n```javascript\nvar boundFunc = func.bind(thisArg[, arg1[, arg2[, ...]]])\n```\n\nExample:\n```javascript\nvar employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\nvar inviteEmployee1 = invite.bind(employee1);\nvar inviteEmployee2 = invite.bind(employee2);\n\ninviteEmployee1(\"Hello\", \"How are you?\"); // Hello John Rodson, How are you?\ninviteEmployee2(\"Hello\", \"How are you?\"); // Hello Jimmy Baily, How are you?\n```\n\n**Summary:**\n\n| Method | Invokes Function Immediately? | How Arguments Are Passed | Returns |\n|--------|------------------------------|-------------------------|----------|\n| call | Yes | Comma-separated list | Function's result |\n| apply | Yes | Array or array-like object | Function's result |\n| bind | No | (Optional) preset, then rest | New function |\n\n**Key Points:**\n- call and apply are almost interchangeable; both invoke the function immediately, but differ in how arguments are passed.\n- Tip: \"Call is for Comma-separated, Apply is for Array.\"\n- bind does not execute the function immediately. Instead, it creates a new function with the specified this value and optional arguments, which can be called later.\n- Use call or apply when you want to immediately invoke a function with a specific this context. Use bind when you want to create a new function with a specific this context to be invoked later."
    },
    {
      "id": 4,
      "question": "What is JSON and its common operations",
      "answer": "JSON (JavaScript Object Notation) is a lightweight, text-based data format that uses JavaScript object syntax for structuring data. It was popularized by Douglas Crockford and is widely used for transmitting data between a server and a client in web applications. JSON files typically have a .json extension and use the MIME type application/json.\n\n**Common Operations with JSON:**\n\n**1. Parsing:** Transforming a JSON-formatted string into a native JavaScript object.\n```javascript\nconst obj = JSON.parse(jsonString);\n```\n\nExample:\n```javascript\nconst jsonString = '{\"name\":\"John\",\"age\":30}';\nconst obj = JSON.parse(jsonString);  // { name: \"John\", age: 30 }\n```\n\n**2. Stringification:** Converting a JavaScript object into a JSON-formatted string, commonly used for data transmission or storage.\n```javascript\nconst jsonString = JSON.stringify(object);\n```\n\nExample:\n```javascript\nconst obj = { name: \"Jane\", age: 25 };\nconst jsonString = JSON.stringify(obj);  // '{\"name\":\"Jane\",\"age\":25}'\n```"
    },
    {
      "id": 5,
      "question": "What is the purpose of the array slice method",
      "answer": "The slice() method in JavaScript is used to extract a section of an array, returning a new array containing the selected elements. It does not modify the original array. The method takes two arguments:\n\n- **start:** The index at which extraction begins (inclusive).\n- **end (optional):** The index before which to end extraction (exclusive). If omitted, extraction continues to the end of the array.\n\nYou can also use negative indices, which count from the end of the array.\n\n**Examples:**\n```javascript\nlet arrayIntegers = [1, 2, 3, 4, 5];\n\nlet arrayIntegers1 = arrayIntegers.slice(0, 2);    // [1, 2]\nlet arrayIntegers2 = arrayIntegers.slice(2, 3);    // [3]\nlet arrayIntegers3 = arrayIntegers.slice(4);       // [5]\nlet arrayIntegers4 = arrayIntegers.slice(-3, -1);  // [3, 4]\n```\n\n**Note:**\nThe slice() method does not mutate (change) the original array; instead, it returns a new array containing the extracted elements."
    },
    {
      "id": 6,
      "question": "What is the purpose of the array splice method",
      "answer": "The splice() method in JavaScript is used to add, remove, or replace elements within an array. Unlike slice(), which creates a shallow copy and does not alter the original array, splice() modifies the original array in place and returns an array containing the removed elements.\n\n**Syntax:**\n```javascript\narray.splice(start, deleteCount, item1, item2, ...)\n```\n\n- **start:** The index at which to start changing the array.\n- **deleteCount:** (Optional) The number of elements to remove from the array. If omitted, all elements from the start index to the end of the array will be removed.\n- **item1, item2, ...:** (Optional) Elements to add to the array, starting at the start position.\n\n**Examples:**\n```javascript\nlet arrayIntegersOriginal1 = [1, 2, 3, 4, 5];\nlet arrayIntegersOriginal2 = [1, 2, 3, 4, 5];\nlet arrayIntegersOriginal3 = [1, 2, 3, 4, 5];\n\n// Remove the first two elements\nlet arrayIntegers1 = arrayIntegersOriginal1.splice(0, 2); \n// arrayIntegers1: [1, 2]\n// arrayIntegersOriginal1 (after): [3, 4, 5]\n\n// Remove all elements from index 3 onwards\nlet arrayIntegers2 = arrayIntegersOriginal2.splice(3);     \n// arrayIntegers2: [4, 5]\n// arrayIntegersOriginal2 (after): [1, 2, 3]\n\n// Remove 1 element at index 3, then insert \"a\", \"b\", \"c\" at that position\nlet arrayIntegers3 = arrayIntegersOriginal3.splice(3, 1, \"a\", \"b\", \"c\"); \n// arrayIntegers3: [4]\n// arrayIntegersOriginal3 (after): [1, 2, 3, \"a\", \"b\", \"c\", 5]\n```\n\n**Note:**\n- The splice() method modifies the original array.\n- It returns an array containing the elements that were removed (if any).\n- You can use it both to remove and insert elements in a single operation."
    },
    {
      "id": 7,
      "question": "What is the difference between slice and splice",
      "answer": "Here are the key differences between slice() and splice() methods in JavaScript arrays:\n\n| Feature | slice() | splice() |\n|---------|---------|----------|\n| **Array Modification** | Does not modify the original array (immutable) | Modifies the original array (mutable) |\n| **Return Value** | Returns a shallow copy (subset) of selected elements | Returns an array of the removed elements |\n| **Purpose** | Used to extract elements from an array | Used to add, remove, or replace elements in an array |\n| **Syntax** | `array.slice(start, end)` | `array.splice(start, deleteCount, ...items)` |\n\n**Summary:**\n\n- Use **slice()** when you want to copy or extract elements without altering the original array.\n- Use **splice()** when you need to add, remove, or replace elements and want to change the original array."
    },
    {
      "id": 8,
      "question": "How do you compare Object and Map",
      "answer": "Objects and Maps both allow you to associate keys with values, retrieve those values, delete keys, and check if a key exists. Historically, Objects have been used as Maps, but there are several key differences that make Map a better choice in certain scenarios:\n\n| Feature | Object | Map |\n|---------|---------|-----|\n| **Key Types** | Only strings and symbols are valid keys | Any value can be used as a key (objects, functions, primitives) |\n| **Key Order** | Keys are unordered (in practice, insertion order is mostly preserved for string keys, but not guaranteed) | Keys are ordered by insertion; iteration follows insertion order |\n| **Size Property** | No built-in way to get the number of keys; must use `Object.keys(obj).length` | Use the `.size` property for the number of entries |\n| **Iterability** | Not directly iterable; must use `Object.keys`, `Object.values`, or `Object.entries` | Directly iterable with `for...of`, `.keys()`, `.values()`, `.entries()` |\n| **Prototype** | Has a prototype chain; may have default properties that can collide with custom keys (can be avoided with `Object.create(null)`) | Does not have a prototype, so there are no default keys |\n| **Performance** | May be less efficient for frequent additions/removals | Optimized for frequent additions and deletions |\n| **Serialization** | Can be easily serialized to JSON | Cannot be directly serialized to JSON |"
    },
    {
      "id": 9,
      "question": "What is the difference between == and === operators",
      "answer": "JavaScript provides two types of equality operators:\n\n- **Loose equality (==, !=):** Performs type conversion if the types differ, comparing values after converting them to a common type.\n- **Strict equality (===, !==):** Compares both value and type, without any type conversion.\n\n**Strict Equality (===)**\n\n- Two strings are strictly equal if they have exactly the same sequence of characters and length.\n- Two numbers are strictly equal if they have the same numeric value.\n- Special cases:\n  - `NaN === NaN` is `false`\n  - `+0 === -0` is `true`\n- Two booleans are strictly equal if both are true or both are false.\n- Two objects are strictly equal if they refer to the same object in memory.\n- `null` and `undefined` are not strictly equal.\n\n**Loose Equality (==)**\n\n- Converts operands to the same type before making the comparison.\n- `null == undefined` is `true`.\n- `\"1\" == 1` is `true` because the string is converted to a number.\n- `0 == false` is `true` because false is converted to 0.\n\n**Examples:**\n```javascript\n0 == false            // true      (loose equality, type coercion)\n0 === false           // false     (strict equality, different types)\n1 == \"1\"              // true      (string converted to number)\n1 === \"1\"             // false     (different types)\nnull == undefined     // true      (special case)\nnull === undefined    // false     (different types)\n'0' == false          // true      ('0' is converted to 0)\n'0' === false         // false     (different types)\nNaN == NaN            // false     (NaN is never equal to itself)\nNaN === NaN           // false\n[] == []              // false     (different array objects)\n[] === []             // false\n{} == {}              // false     (different object references)\n{} === {}             // false\n```"
    },
    {
      "id": 10,
      "question": "What are lambda expressions or arrow functions",
      "answer": "Arrow functions (also known as \"lambda expressions\") provide a concise syntax for writing function expressions in JavaScript. Introduced in ES6, arrow functions are often shorter and more readable, especially for simple operations or callbacks.\n\n**Key Features:**\n\n- Arrow functions do not have their own `this`, `arguments`, `super`, or `new.target` bindings. They inherit these from their surrounding (lexical) context.\n- They are best suited for non-method functions, such as callbacks or simple computations.\n- Arrow functions cannot be used as constructors and do not have a `prototype` property.\n- They also cannot be used with `new`, `yield`, or as generator functions.\n\n**Syntax Examples:**\n```javascript\nconst arrowFunc1 = (a, b) => a + b;    // Multiple parameters, returns a + b\nconst arrowFunc2 = a => a * 10;        // Single parameter (parentheses optional), returns a * 10\nconst arrowFunc3 = () => {};           // No parameters, returns undefined\nconst arrowFunc4 = (a, b) => {\n  // Multiple statements require curly braces and explicit return\n  const sum = a + b;\n  return sum * 2;\n};\n```"
    },
    {
      "id": 11,
      "question": "What is a first class function",
      "answer": "In JavaScript, first-class functions (first-class citizens) mean that functions are treated like any other variable. That means:\n\n- You can assign a function to a variable.\n- You can pass a function as an argument to another function.\n- You can return a function from another function.\n\nThis capability enables powerful patterns like callbacks, higher-order functions, event handling, and functional programming in JavaScript.\n\nFor example, the handler function below is assigned to a variable and then passed as an argument to the addEventListener method.\n\n```javascript\nconst handler = () => console.log(\"This is a click handler function\");\ndocument.addEventListener(\"click\", handler);\n```"
    },
    {
      "id": 12,
      "question": "What is a first order function",
      "answer": "A first-order function is a function that doesn't accept another function as an argument and doesn't return a function as its return value. i.e, It's a regular function that works with primitive or non-function values.\n\n```javascript\nconst firstOrder = () => console.log(\"I am a first order function!\");\n```"
    },
    {
      "id": 13,
      "question": "What is a higher order function",
      "answer": "A higher-order function is a function that either accepts another function as an argument, returns a function as its result, or both. This concept is a core part of JavaScript's functional programming capabilities and is widely used for creating modular, reusable, and expressive code.\n\nThe syntactic structure of higher order function will be explained with an example as follows:\n\n```javascript\n// First-order function (does not accept or return another function)\nconst firstOrderFunc = () => \n  console.log(\"Hello, I am a first-order function\");\n\n// Higher-order function (accepts a function as an argument)\nconst higherOrder = (callback) => callback();\n\n// Passing the first-order function to the higher-order function\nhigherOrder(firstOrderFunc);\n```\n\nIn this example:\n\n- `firstOrderFunc` is a regular (first-order) function.\n- `higherOrder` is a higher-order function because it takes another function as an argument.\n- `firstOrderFunc` is also called a callback function because it is passed to and executed by another function."
    },
    {
      "id": 14,
      "question": "What is a unary function",
      "answer": "A unary function (also known as a monadic function) is a function that accepts exactly one argument. The term \"unary\" simply refers to the function's arity‚Äîthe number of arguments it takes.\n\nLet us take an example of unary function:\n\n```javascript\nconst unaryFunction = (a) => console.log(a + 10); // This will add 10 to the input and log the result\nunaryFunction(5); // Output: 15\n```\n\nIn this example:\n\n- `unaryFunction` takes a single parameter `a`, making it a unary function.\n- It performs a simple operation: adding 10 to the input and printing the result."
    },
    {
      "id": 15,
      "question": "What is the currying function",
      "answer": "Currying is the process of transforming a function with multiple arguments into a sequence of nested functions, each accepting only one argument at a time.\n\nThis concept is named after mathematician Haskell Curry, and is commonly used in functional programming to enhance modularity and reuse.\n\n**Before Currying (Normal n-ary Function):**\n```javascript\nconst multiArgFunction = (a, b, c) => a + b + c;\n\nconsole.log(multiArgFunction(1, 2, 3)); // Output: 6\n```\nThis is a standard function that takes three arguments at once.\n\n**After Currying (Unary Function Chain):**\n```javascript\nconst curryUnaryFunction = (a) => (b) => (c) => a + b + c;\n\nconsole.log(curryUnaryFunction(1));       // Returns: function (b) => ...\nconsole.log(curryUnaryFunction(1)(2));    // Returns: function (c) => ...\nconsole.log(curryUnaryFunction(1)(2)(3)); // Output: 6\n```\nEach function in the chain accepts one argument and returns the next function, until all arguments are provided and the final result is computed.\n\n**Benefits of Currying:**\n\n- **Improves code reusability** ‚Üí You can partially apply functions with known arguments.\n- **Enhances functional composition** ‚Üí Easier to compose small, pure functions.\n- **Encourages clean, modular code** ‚Üí You can split logic into smaller single-responsibility functions."
    },
    {
      "id": 16,
      "question": "What is a pure function",
      "answer": "A pure function is a function whose output depends only on its input arguments and produces no side effects. This means that given the same inputs, a pure function will always return the same output, and it does not modify any external state or data.\n\nLet's take an example to see the difference between pure and impure functions:\n\n**Example: Pure vs. Impure Functions**\n```javascript\n// Impure Function\nlet numberArray = [];\nconst impureAddNumber = (number) => numberArray.push(number);\n\n// Pure Function\nconst pureAddNumber = (number) => (inputArray) =>\n  inputArray.concat([number]);\n\n// Usage\nconsole.log(impureAddNumber(6)); // returns 1\nconsole.log(numberArray);        // returns [6]\n\nconsole.log(pureAddNumber(7)(numberArray)); // returns [6, 7]\nconsole.log(numberArray);                   // remains [6]\n```\n\n- `impureAddNumber` changes the external variable `numberArray` and returns the new length of the array, making it impure.\n- `pureAddNumber` creates a new array with the added number and does not modify the original array, making it pure.\n\n**Benefits of Pure Functions:**\n\n- **Easier testing:** Since output depends only on input, pure functions are simple to test.\n- **Predictability:** No hidden side effects make behavior easier to reason about.\n- **Immutability:** Pure functions align with ES6 best practices, such as preferring const over let, supporting safer and more maintainable code.\n- **No side effects:** Reduces bugs related to shared state or mutation."
    },
    {
      "id": 17,
      "question": "What is the purpose of the let keyword",
      "answer": "The let keyword in JavaScript is used to declare a block-scoped local variable. This means that variables declared with let are only accessible within the block, statement, or expression where they are defined. This is a significant improvement over the older var keyword, which is function-scoped (or globally-scoped if declared outside a function), and does not respect block-level scoping.\n\n**Key Features of let:**\n\n- **Block Scope:** The variable exists only within the nearest enclosing block (e.g., inside an {} pair).\n- **No Hoisting Issues:** While let declarations are hoisted, they are not initialized until the code defining them is executed. Accessing them before declaration results in a ReferenceError (temporal dead zone).\n- **No Redeclaration:** The same variable cannot be declared twice in the same scope with let.\n\n**Example:**\n```javascript\nlet counter = 30;\nif (counter === 30) {\n  let counter = 31;\n  console.log(counter); // Output: 31 (block-scoped variable inside if-block)\n}\nconsole.log(counter); // Output: 30 (outer variable, unaffected by inner block)\n```\n\nIn this example, the counter inside the if block is a separate variable from the one outside. The let keyword ensures that both have their own distinct scope.\n\nIn summary, you need to use let when you want variables to be limited to the block in which they are defined, preventing accidental overwrites and bugs related to variable scope."
    },
    {
      "id": 18,
      "question": "What is the difference between let and var",
      "answer": "You can list out the differences in a tabular format:\n\n| Feature | var | let |\n|---------|-----|-----|\n| **Availability** | Available from the beginning of JavaScript | Introduced as part of ES6 |\n| **Scope** | Function scope | Block scope |\n| **Hoisting** | Variable declaration will be hoisted, initialized as undefined | Hoisted but not initialized |\n| **Redeclaration** | Possible to re-declare the variable in the same scope | Not possible to re-declare the variable |\n\nLet's take an example to see the difference:\n\n```javascript\nfunction userDetails(username) {\n  if (username) {\n    console.log(salary); // undefined due to hoisting\n    console.log(age); // ReferenceError: Cannot access 'age' before initialization\n    let age = 30;\n    var salary = 10000;\n  }\n  console.log(salary); //10000 (accessible due to function scope)\n  console.log(age); //error: age is not defined(due to block scope)\n}\nuserDetails(\"John\");\n```"
    },
    {
      "id": 19,
      "question": "What is the reason to choose the name let as a keyword",
      "answer": "The keyword let was chosen because it originates from mathematical notation, where \"let\" is used to introduce new variables (for example, \"let x = 5\"). This term was adopted by several early programming languages such as Scheme and BASIC, establishing a tradition in computer science. JavaScript follows this convention by using let to declare variables with block scope, providing a modern alternative to var. The choice helps make the language more familiar to programmers coming from other languages and aligns with the mathematical practice of variable assignment."
    },
    {
      "id": 20,
      "question": "How do you redeclare variables in a switch block without an error",
      "answer": "When you try to redeclare variables using let or const in multiple case clauses of a switch statement, you will get a SyntaxError. This happens because, in JavaScript, all case clauses within a switch statement share the same block scope. For example:\n\n```javascript\nlet counter = 1;\nswitch (x) {\n  case 0:\n    let name;\n    break;\n  case 1:\n    let name; // SyntaxError: Identifier 'name' has already been declared\n    break;\n}\n```\n\nTo avoid this error, you can create a new block scope within each case clause by wrapping the code in curly braces {}. This way, each let or const declaration is scoped only to that block, and redeclaration errors are avoided:\n\n```javascript\nlet counter = 1;\nswitch (x) {\n  case 0: {\n    let name;\n    // code for case 0\n    break;\n  }\n  case 1: {\n    let name; // No SyntaxError\n    // code for case 1\n    break;\n  }\n}\n```\n\nThat means, to safely redeclare variables in different cases of a switch statement, wrap each case's code in its own block using curly braces. This ensures each variable declaration is scoped to its specific case block."
    },
    {
      "id": 21,
      "question": "What is the Temporal Dead Zone",
      "answer": "The Temporal Dead Zone (TDZ) refers to the period between the start of a block and the point where a variable declared with let or const is initialized. During this time, the variable exists in scope but cannot be accessed, and attempting to do so results in a ReferenceError.\n\nThis behavior is part of JavaScript's ES6 (ECMAScript 2015) specification and applies only to variables declared with let and const, not var. Variables declared with var are hoisted and initialized with undefined, so accessing them before the declaration does not throw an error, though it can lead to unexpected results.\n\n**Example:**\n```javascript\nfunction someMethod() {\n    console.log(counter1); // Output: undefined (due to var hoisting)\n    console.log(counter2); // Throws ReferenceError (TDZ for let)\n\n    var counter1 = 1;\n    let counter2 = 2;\n}\n```"
    },
    {
      "id": 22,
      "question": "What is an IIFE (Immediately Invoked Function Expression)",
      "answer": "IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. The signature of it would be as below:\n\n```javascript\n(function () {\n  // logic here\n})();\n```\n\nThe primary reason to use an IIFE is to obtain data privacy because any variables declared within the IIFE cannot be accessed by the outside world. i.e, If you try to access variables from the IIFE then it throws an error as below:\n\n```javascript\n(function () {\n  var message = \"IIFE\";\n  console.log(message);\n})();\nconsole.log(message); //Error: message is not defined\n```"
    },
    {
      "id": 23,
      "question": "How do you decode or encode a URL in JavaScript?",
      "answer": "encodeURI() function is used to encode an URL. This function requires a URL string as a parameter and return that encoded string. decodeURI() function is used to decode an URL. This function requires an encoded URL string as parameter and return that decoded string.\n\nNote: If you want to encode characters such as / ? : @ & = + $ # then you need to use encodeURIComponent().\n\n```javascript\nlet uri = \"employeeDetails?name=john&occupation=manager\";\nlet encoded_uri = encodeURI(uri);\nlet decoded_uri = decodeURI(encoded_uri);\n```"
    },
    {
      "id": 24,
      "question": "What is memoization",
      "answer": "Memoization is a functional programming technique which attempts to increase a function's performance by caching its previously computed results. Each time a memoized function is called, its parameters are used to index the cache. If the data is present, then it can be returned, without executing the entire function. Otherwise the function is executed and then the result is added to the cache. Let's take an example of adding function with memoization:\n\n```javascript\nconst memoizeAddition = () => {\n  let cache = {};\n  return (value) => {\n    if (value in cache) {\n      console.log(\"Fetching from cache\");\n      return cache[value]; // Here, cache.value cannot be used as property name starts with the number which is not a valid JavaScript  identifier. Hence, can only be accessed using the square bracket notation.\n    } else {\n      console.log(\"Calculating result\");\n      let result = value + 20;\n      cache[value] = result;\n      return result;\n    }\n  };\n};\n// returned function from memoizeAddition\nconst addition = memoizeAddition();\nconsole.log(addition(20)); //output: 40 calculated\nconsole.log(addition(20)); //output: 40 cached\n```"
    },
    {
      "id": 25,
      "question": "What is Hoisting",
      "answer": "Hoisting is a JavaScript mechanism where variables, function declarations and classes are moved to the top of their scope before code execution. Remember that JavaScript only hoists declarations, not initialisation. Let's take a simple example of variable hoisting:\n\n```javascript\nconsole.log(message); //output : undefined\nvar message = \"The variable Has been hoisted\";\n```\n\nThe above code looks like as below to the interpreter:\n\n```javascript\nvar message;\nconsole.log(message);\nmessage = \"The variable Has been hoisted\";\n```\n\nIn the same fashion, function declarations are hoisted too:\n\n```javascript\nmessage(\"Good morning\"); //Good morning\n\nfunction message(name) {\n  console.log(name);\n}\n```\n\nThis hoisting makes functions to be safely used in code before they are declared."
    },
    {
      "id": 26,
      "question": "What are classes in ES6",
      "answer": "In ES6, Javascript classes are primarily syntactic sugar over JavaScript's existing prototype-based inheritance. For example, the prototype based inheritance written in function expression as below:\n\n```javascript\nfunction Bike(model, color) {\n  this.model = model;\n  this.color = color;\n}\n\nBike.prototype.getDetails = function () {\n  return this.model + \" bike has\" + this.color + \" color\";\n};\n```\n\nWhereas ES6 classes can be defined as an alternative:\n\n```javascript\nclass Bike {\n  constructor(color, model) {\n    this.color = color;\n    this.model = model;\n  }\n\n  getDetails() {\n    return this.model + \" bike has\" + this.color + \" color\";\n  }\n}\n```"
    },
    {
      "id": 27,
      "question": "What are closures",
      "answer": "A closure is the combination of a function bundled (enclosed) together with its lexical environment within which that function was declared. In other words, it is an inner function that has access to the outer or enclosing function's variables, functions, and other data even after the outer function has finished its execution.\\n\\n**The closure has three scope chains:**\\n\\n1. **Own scope** - variables defined between its curly brackets\\n2. **Outer function's variables** - variables from the enclosing function\\n3. **Global variables** - variables in the global scope\\n\\n**Example:**\\n```javascript\\nfunction Welcome(name) {\\n  var greetingInfo = function (message) {\\n    console.log(message + \\\" \\\" + name);\\n  };\\n  return greetingInfo;\\n}\\n\\nvar myFunction = Welcome(\\\"John\\\");\\nmyFunction(\\\"Welcome \\\"); // Output: Welcome John\\nmyFunction(\\\"Hello Mr.\\\"); // Output: Hello Mr. John\\n```\\n\\nAs per the above code, the inner function (`greetingInfo`) has access to the variables in the outer function scope (`Welcome`) even after the outer function has returned.\\n\\n**Key Points:**\\n- Closures \\\"remember\\\" the environment in which they were created\\n- They provide data privacy and encapsulation\\n- Commonly used in module patterns, callbacks, and event handlers\\n- Essential for understanding JavaScript's functional programming capabilities"
    },
    {
      "id": 28,
      "question": "What are modules",
      "answer": "Modules refer to small units of independent, reusable code and also act as the foundation of many JavaScript design patterns. Most JavaScript modules export an object literal, a function, or a constructor.\n\n**Types of Modules:**\n\n**1. CommonJS (Node.js):**\n```javascript\n// math.js\nconst add = (a, b) => a + b;\nconst subtract = (a, b) => a - b;\n\nmodule.exports = { add, subtract };\n\n// main.js\nconst { add, subtract } = require('./math');\nconsole.log(add(5, 3)); // 8\n```\n\n**2. ES6 Modules (ESM):**\n```javascript\n// math.js\nexport const add = (a, b) => a + b;\nexport const subtract = (a, b) => a - b;\n\n// main.js\nimport { add, subtract } from './math.js';\nconsole.log(add(5, 3)); // 8\n```\n\n**3. AMD (Asynchronous Module Definition):**\n```javascript\n// Using RequireJS\ndefine(['dependency'], function(dependency) {\n  return {\n    doSomething: function() {\n      return dependency.helper();\n    }\n  };\n});\n```\n\n**Benefits:**\n- **Maintainability** - easier to maintain and update code\n- **Reusability** - code can be reused across different parts of an application\n- **Namespacing** - prevents global namespace pollution"
    },
    {
      "id": 29,
      "question": "Why do you need modules",
      "answer": "Below are the list of benefits of using modules in the JavaScript ecosystem:\n\n**1. Maintainability**\n- Code is organized into logical, self-contained units\n- Easier to debug, test, and update specific functionality\n- Changes to one module don't affect others if interfaces remain consistent\n- Smaller, focused files are easier to understand and work with\n\n**2. Reusability**\n- Write once, use many times across different parts of an application\n- Modules can be shared between different projects\n- Reduces code duplication and development time\n- Promotes DRY (Don't Repeat Yourself) principle\n\n**3. Namespacing**\n- Prevents global namespace pollution\n- Avoids naming conflicts between different parts of an application\n- Encapsulates functionality within module scope\n- Makes dependencies explicit and manageable\n\n**Additional Benefits:**\n- **Dependency Management** - Clear declaration of what each module needs\n- **Testing** - Individual modules can be unit tested in isolation\n- **Lazy Loading** - Modules can be loaded on-demand for better performance\n- **Team Collaboration** - Different developers can work on separate modules simultaneously"
    },
    {
      "id": 30,
      "question": "What is scope in JavaScript",
      "answer": "Scope is the accessibility of variables, functions, and objects in some particular part of your code during runtime. In other words, scope determines the visibility of variables and other resources in areas of your code.\n\n**Types of Scope:**\n\n**1. Global Scope**\n```javascript\nvar globalVar = \"I'm global\";\n\nfunction test() {\n  console.log(globalVar); // Accessible\n}\n```\n\n**2. Function Scope**\n```javascript\nfunction myFunction() {\n  var functionScoped = \"I'm function scoped\";\n  console.log(functionScoped); // Accessible\n}\n// console.log(functionScoped); // ReferenceError\n```\n\n**3. Block Scope (ES6+)**\n```javascript\nif (true) {\n  let blockScoped = \"I'm block scoped\";\n  const alsoBlockScoped = \"Me too\";\n  console.log(blockScoped); // Accessible\n}\n// console.log(blockScoped); // ReferenceError\n```\n\n**4. Module Scope**\n```javascript\n// Variables declared at the top level of a module\n// are scoped to that module\nlet moduleScoped = \"I'm module scoped\";\n```\n\n**Scope Chain:**\nJavaScript uses lexical scoping, meaning inner functions have access to variables in their outer scope:\n\n```javascript\nfunction outer() {\n  let outerVar = \"outer\";\n  \n  function inner() {\n    let innerVar = \"inner\";\n    console.log(outerVar); // Accessible via scope chain\n    console.log(innerVar); // Accessible in current scope\n  }\n  \n  inner();\n}\n```"
    },
    {
      "id": 31,
      "question": "What is a service worker",
      "answer": "A Service Worker is a script that runs in the background, separate from a web page, opening the door to features that don't need a web page or user interaction. Service workers essentially act as proxy servers that sit between web applications, the browser, and the network (when available).\n\n**Key Features:**\n- **Network Proxy** - Intercept and handle network requests\n- **Background Processing** - Run even when the web page is closed\n- **Push Notifications** - Receive and display notifications\n- **Background Sync** - Sync data when connectivity is restored\n- **Caching** - Cache resources for offline functionality\n\n**Lifecycle:**\n```javascript\n// Registration\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('/sw.js')\n    .then(registration => {\n      console.log('SW registered:', registration);\n    })\n    .catch(error => {\n      console.log('SW registration failed:', error);\n    });\n}\n\n// Service Worker Script (sw.js)\nself.addEventListener('install', event => {\n  console.log('Service worker installing...');\n  // Cache resources\n  event.waitUntil(\n    caches.open('v1').then(cache => {\n      return cache.addAll([\n        '/',\n        '/styles.css',\n        '/script.js'\n      ]);\n    })\n  );\n});\n\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request).then(response => {\n      return response || fetch(event.request);\n    })\n  );\n});\n```\n\n**Use Cases:**\n- Progressive Web Apps (PWAs)\n- Offline functionality\n- Background data synchronization\n- Push notifications\n- Performance optimization through caching"
    },
    {
      "id": 32,
      "question": "How do you manipulate DOM using a service worker",
      "answer": "Service workers **cannot directly manipulate the DOM** because they run in a separate thread from the main JavaScript thread. However, they can communicate with the main thread (which has DOM access) using the `postMessage` API.\n\n**Communication Pattern:**\n\n**1. Service Worker to Main Thread:**\n```javascript\n// In service worker (sw.js)\nself.addEventListener('fetch', event => {\n  if (event.request.url.includes('/api/data')) {\n    // Send message to main thread\n    self.clients.matchAll().then(clients => {\n      clients.forEach(client => {\n        client.postMessage({\n          type: 'DATA_UPDATED',\n          data: 'New data available'\n        });\n      });\n    });\n  }\n});\n\n// In main thread\nnavigator.serviceWorker.addEventListener('message', event => {\n  if (event.data.type === 'DATA_UPDATED') {\n    // Now we can manipulate DOM\n    document.getElementById('status').textContent = event.data.data;\n  }\n});\n```\n\n**2. Main Thread to Service Worker:**\n```javascript\n// In main thread\nfunction updateServiceWorker(data) {\n  navigator.serviceWorker.controller.postMessage({\n    type: 'UPDATE_CACHE',\n    data: data\n  });\n}\n\n// In service worker\nself.addEventListener('message', event => {\n  if (event.data.type === 'UPDATE_CACHE') {\n    // Handle cache update\n    caches.open('dynamic-cache').then(cache => {\n      cache.put('/api/data', new Response(JSON.stringify(event.data.data)));\n    });\n  }\n});\n```\n\n**Alternative Approaches:**\n- Use **BroadcastChannel API** for cross-tab communication\n- Store data in **IndexedDB** and have main thread poll for changes\n- Use **Push API** to trigger events that main thread can handle"
    },
    {
      "id": 33,
      "question": "How do you reuse information across service worker restarts",
      "answer": "Service workers can be terminated by the browser at any time and restarted when needed. To persist information across restarts, you need to use persistent storage mechanisms.\n\n**Storage Options:**\n\n**1. IndexedDB (Recommended):**\n```javascript\n// Store data\nself.addEventListener('message', event => {\n  if (event.data.type === 'STORE_DATA') {\n    const request = indexedDB.open('ServiceWorkerDB', 1);\n    \n    request.onsuccess = event => {\n      const db = event.target.result;\n      const transaction = db.transaction(['data'], 'readwrite');\n      const store = transaction.objectStore('data');\n      store.put(event.data.payload, 'userPreferences');\n    };\n  }\n});\n\n// Retrieve data on restart\nself.addEventListener('activate', event => {\n  event.waitUntil(\n    new Promise((resolve) => {\n      const request = indexedDB.open('ServiceWorkerDB', 1);\n      \n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(['data'], 'readonly');\n        const store = transaction.objectStore('data');\n        const getRequest = store.get('userPreferences');\n        \n        getRequest.onsuccess = () => {\n          self.userData = getRequest.result;\n          resolve();\n        };\n      };\n    })\n  );\n});\n```\n\n**2. Cache API:**\n```javascript\n// Store configuration in cache\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open('config-cache').then(cache => {\n      return cache.put('/config', new Response(JSON.stringify({\n        version: '1.0',\n        settings: {...}\n      })));\n    })\n  );\n});\n\n// Retrieve on restart\nself.addEventListener('activate', event => {\n  event.waitUntil(\n    caches.match('/config').then(response => {\n      if (response) {\n        return response.json().then(config => {\n          self.appConfig = config;\n        });\n      }\n    })\n  );\n});\n```\n\n**3. postMessage to retrieve from main thread:**\n```javascript\nself.addEventListener('activate', event => {\n  // Request data from main thread\n  self.clients.matchAll().then(clients => {\n    clients.forEach(client => {\n      client.postMessage({ type: 'REQUEST_APP_STATE' });\n    });\n  });\n});\n```"
    },
    {
      "id": 34,
      "question": "What is IndexedDB",
      "answer": "IndexedDB is a low-level API for client-side storage of significant amounts of structured data, including files/blobs. This API uses indexes to enable high-performance searches of this data. It's a NoSQL database built into the browser.\\n\\n**Key Features:**\\n- **Transactional** - All operations happen within transactions\\n- **Asynchronous** - Non-blocking operations using callbacks/promises\\n- **Large Storage** - Can store much more data than localStorage\\n- **Structured Data** - Can store JavaScript objects, arrays, etc.\\n- **Indexed** - Fast searches using indexes\\n\\n**Basic Usage:**\\n```javascript\\n// Open database\\nconst request = indexedDB.open('MyDatabase', 1);\\n\\nrequest.onerror = event => {\\n  console.error('Database error:', event.target.error);\\n};\\n\\nrequest.onsuccess = event => {\\n  const db = event.target.result;\\n  console.log('Database opened successfully');\\n};\\n\\nrequest.onupgradeneeded = event => {\\n  const db = event.target.result;\\n  \\n  // Create object store\\n  const objectStore = db.createObjectStore('users', { keyPath: 'id' });\\n  \\n  // Create indexes\\n  objectStore.createIndex('name', 'name', { unique: false });\\n  objectStore.createIndex('email', 'email', { unique: true });\\n};\\n\\n// Add data\\nfunction addUser(user) {\\n  const transaction = db.transaction(['users'], 'readwrite');\\n  const objectStore = transaction.objectStore('users');\\n  const request = objectStore.add(user);\\n  \\n  request.onsuccess = () => {\\n    console.log('User added successfully');\\n  };\\n}\\n\\n// Get data\\nfunction getUser(id) {\\n  const transaction = db.transaction(['users'], 'readonly');\\n  const objectStore = transaction.objectStore('users');\\n  const request = objectStore.get(id);\\n  \\n  request.onsuccess = event => {\\n    const user = event.target.result;\\n    console.log('User found:', user);\\n  };\\n}\\n```"
    },
    {
      "id": 35,
      "question": "What is web storage",
      "answer": "Web storage provides mechanisms by which browsers can store key/value pairs locally within a user's browser, much more intuitively than using cookies. It consists of two main types: localStorage and sessionStorage.\\n\\n**Types of Web Storage:**\\n\\n**1. localStorage:**\\n- **Persistent** - Data survives browser restart\\n- **Domain-specific** - Data is only available to the domain that created it\\n- **Size limit** - Typically 5-10MB per domain\\n- **Synchronous API** - Blocking operations\\n\\n```javascript\\n// Store data\\nlocalStorage.setItem('username', 'john_doe');\\nlocalStorage.setItem('preferences', JSON.stringify({theme: 'dark'}));\\n\\n// Retrieve data\\nconst username = localStorage.getItem('username');\\nconst preferences = JSON.parse(localStorage.getItem('preferences'));\\n\\n// Remove data\\nlocalStorage.removeItem('username');\\n\\n// Clear all data\\nlocalStorage.clear();\\n\\n// Get number of items\\nconsole.log(localStorage.length);\\n\\n// Get key by index\\nfor (let i = 0; i < localStorage.length; i++) {\\n  const key = localStorage.key(i);\\n  const value = localStorage.getItem(key);\\n  console.log(key, value);\\n}\\n```\\n\\n**2. sessionStorage:**\\n- **Temporary** - Data is cleared when tab is closed\\n- **Tab-specific** - Each tab has its own sessionStorage\\n- **Same API as localStorage**\\n\\n```javascript\\n// Same API as localStorage\\nsessionStorage.setItem('tempData', 'value');\\nconst tempData = sessionStorage.getItem('tempData');\\nsessionStorage.removeItem('tempData');\\n```\\n\\n**Storage Events:**\\n```javascript\\n// Listen for storage changes (only fires on other tabs/windows)\\nwindow.addEventListener('storage', event => {\\n  console.log('Storage changed:', {\\n    key: event.key,\\n    oldValue: event.oldValue,\\n    newValue: event.newValue,\\n    url: event.url\\n  });\\n});\\n```"
    },
    {
      "id": 36,
      "question": "How do you store the data in web storage",
      "answer": "Data in web storage is stored as key-value pairs where both keys and values must be strings. For complex data types, you need to serialize them to strings using JSON.stringify().\\n\\n**Basic Storage Operations:**\\n\\n**1. Storing Simple Data:**\\n```javascript\\n// Store strings\\nlocalStorage.setItem('name', 'John Doe');\\nlocalStorage.setItem('age', '25'); // Numbers must be strings\\nlocalStorage.setItem('isActive', 'true'); // Booleans must be strings\\n\\n// Alternative syntax\\nlocalStorage.name = 'John Doe';\\nlocalStorage['age'] = '25';\\n```\\n\\n**2. Storing Objects and Arrays:**\\n```javascript\\n// Store objects\\nconst user = {\\n  id: 1,\\n  name: 'John Doe',\\n  email: 'john@example.com',\\n  preferences: {\\n    theme: 'dark',\\n    language: 'en'\\n  }\\n};\\n\\nlocalStorage.setItem('user', JSON.stringify(user));\\n\\n// Store arrays\\nconst items = ['apple', 'banana', 'orange'];\\nlocalStorage.setItem('fruits', JSON.stringify(items));\\n\\n// Store complex nested data\\nconst appState = {\\n  currentUser: user,\\n  settings: {\\n    notifications: true,\\n    autoSave: false\\n  },\\n  recentItems: items\\n};\\n\\nlocalStorage.setItem('appState', JSON.stringify(appState));\\n```\\n\\n**3. Retrieving and Parsing Data:**\\n```javascript\\n// Retrieve and parse objects\\nconst storedUser = JSON.parse(localStorage.getItem('user'));\\nconst storedFruits = JSON.parse(localStorage.getItem('fruits'));\\n\\n// Handle null values\\nconst data = localStorage.getItem('nonexistent'); // returns null\\n```\\n\\n**4. Helper Functions:**\\n```javascript\\n// Storage utility class\\nclass StorageManager {\\n  static set(key, value) {\\n    try {\\n      localStorage.setItem(key, JSON.stringify(value));\\n      return true;\\n    } catch (error) {\\n      console.error('Storage error:', error);\\n      return false;\\n    }\\n  }\\n  \\n  static get(key, defaultValue = null) {\\n    try {\\n      const item = localStorage.getItem(key);\\n      return item ? JSON.parse(item) : defaultValue;\\n    } catch (error) {\\n      console.error('Parse error:', error);\\n      return defaultValue;\\n    }\\n  }\\n  \\n  static remove(key) {\\n    localStorage.removeItem(key);\\n  }\\n  \\n  static clear() {\\n    localStorage.clear();\\n  }\\n}\\n```"
    },
    {
      "id": 37,
      "question": "How do you access web storage",
      "answer": "Web storage can be accessed through the global `localStorage` and `sessionStorage` objects available in the browser's window object. Both provide the same API methods for storing and retrieving data.\\n\\n**Access Methods:**\\n\\n**1. Direct Property Access:**\\n```javascript\\n// Set values\\nlocalStorage.username = 'john_doe';\\nsessionStorage.tempData = 'temporary';\\n\\n// Get values\\nconst username = localStorage.username;\\nconst tempData = sessionStorage.tempData;\\n\\n// Delete values\\ndelete localStorage.username;\\ndelete sessionStorage.tempData;\\n```\\n\\n**2. Bracket Notation:**\\n```javascript\\n// Set values\\nlocalStorage['user-id'] = '12345';\\nsessionStorage['session-token'] = 'abc123';\\n\\n// Get values\\nconst userId = localStorage['user-id'];\\nconst sessionToken = sessionStorage['session-token'];\\n\\n// Delete values\\ndelete localStorage['user-id'];\\n```\\n\\n**3. Storage API Methods (Recommended):**\\n```javascript\\n// setItem(key, value)\\nlocalStorage.setItem('theme', 'dark');\\nsessionStorage.setItem('currentPage', 'dashboard');\\n\\n// getItem(key) - returns null if key doesn't exist\\nconst theme = localStorage.getItem('theme');\\nconst currentPage = sessionStorage.getItem('currentPage');\\n\\n// removeItem(key)\\nlocalStorage.removeItem('theme');\\nsessionStorage.removeItem('currentPage');\\n\\n// clear() - removes all items\\nlocalStorage.clear();\\nsessionStorage.clear();\\n\\n// key(index) - get key name by index\\nfor (let i = 0; i < localStorage.length; i++) {\\n  const key = localStorage.key(i);\\n  const value = localStorage.getItem(key);\\n  console.log(key, value);\\n}\\n\\n// length property\\nconsole.log('localStorage has', localStorage.length, 'items');\\n```\\n\\n**4. Feature Detection:**\\n```javascript\\n// Check if web storage is supported\\nfunction isStorageSupported(type) {\\n  try {\\n    const storage = window[type];\\n    const test = '__storage_test__';\\n    storage.setItem(test, test);\\n    storage.removeItem(test);\\n    return true;\\n  } catch (error) {\\n    return false;\\n  }\\n}\\n\\nif (isStorageSupported('localStorage')) {\\n  // Use localStorage\\n  localStorage.setItem('data', 'value');\\n} else {\\n  // Fallback to cookies or other storage method\\n  console.log('localStorage not supported');\\n}\\n```\\n\\n**5. Cross-Browser Compatibility:**\\n```javascript\\n// Storage wrapper for older browsers\\nconst Storage = {\\n  set: function(key, value) {\\n    if (typeof(Storage) !== 'undefined') {\\n      localStorage.setItem(key, value);\\n    } else {\\n      // Fallback for older browsers\\n      document.cookie = key + '=' + value;\\n    }\\n  },\\n  \\n  get: function(key) {\\n    if (typeof(Storage) !== 'undefined') {\\n      return localStorage.getItem(key);\\n    } else {\\n      // Parse from cookies\\n      const cookies = document.cookie.split(';');\\n      for (let cookie of cookies) {\\n        const [name, value] = cookie.trim().split('=');\\n        if (name === key) return value;\\n      }\\n      return null;\\n    }\\n  }\\n};\\n```"
    },
    {
      "id": 38,
      "question": "What are the methods available on session storage",
      "answer": "SessionStorage provides the same methods as localStorage, following the Web Storage API specification. Here are all the available methods and properties:\\n\\n**Core Methods:**\\n\\n**1. setItem(key, value)**\\n```javascript\\n// Store data (both key and value must be strings)\\nsessionStorage.setItem('username', 'john_doe');\\nsessionStorage.setItem('userPrefs', JSON.stringify({theme: 'dark'}));\\n```\\n\\n**2. getItem(key)**\\n```javascript\\n// Retrieve data (returns null if key doesn't exist)\\nconst username = sessionStorage.getItem('username');\\nconst userPrefs = JSON.parse(sessionStorage.getItem('userPrefs'));\\n\\n// Handle null values\\nconst data = sessionStorage.getItem('nonexistent'); // returns null\\n```\\n\\n**3. removeItem(key)**\\n```javascript\\n// Remove specific item\\nsessionStorage.removeItem('username');\\n\\n// Safe removal (won't throw error if key doesn't exist)\\nsessionStorage.removeItem('nonexistent'); // No error\\n```\\n\\n**4. clear()**\\n```javascript\\n// Remove all items from sessionStorage\\nsessionStorage.clear();\\n```\\n\\n**5. key(index)**\\n```javascript\\n// Get key name by index\\nfor (let i = 0; i < sessionStorage.length; i++) {\\n  const keyName = sessionStorage.key(i);\\n  const value = sessionStorage.getItem(keyName);\\n  console.log(`${keyName}: ${value}`);\\n}\\n\\n// Get specific key by index\\nconst firstKey = sessionStorage.key(0);\\nconst lastKey = sessionStorage.key(sessionStorage.length - 1);\\n```\\n\\n**Properties:**\\n\\n**1. length**\\n```javascript\\n// Get number of items stored\\nconsole.log(sessionStorage.length); // e.g., 5\\n\\n// Check if storage is empty\\nif (sessionStorage.length === 0) {\\n  console.log('Session storage is empty');\\n}\\n```\\n\\n**Utility Examples:**\\n```javascript\\n// Get all keys\\nfunction getAllKeys() {\\n  const keys = [];\\n  for (let i = 0; i < sessionStorage.length; i++) {\\n    keys.push(sessionStorage.key(i));\\n  }\\n  return keys;\\n}\\n\\n// Get all items\\nfunction getAllItems() {\\n  const items = {};\\n  for (let i = 0; i < sessionStorage.length; i++) {\\n    const key = sessionStorage.key(i);\\n    items[key] = sessionStorage.getItem(key);\\n  }\\n  return items;\\n}\\n\\n// Check if key exists\\nfunction hasKey(key) {\\n  return sessionStorage.getItem(key) !== null;\\n}\\n\\n// Safe JSON operations\\nfunction setJSON(key, object) {\\n  try {\\n    sessionStorage.setItem(key, JSON.stringify(object));\\n    return true;\\n  } catch (error) {\\n    console.error('Error storing JSON:', error);\\n    return false;\\n  }\\n}\\n\\nfunction getJSON(key, defaultValue = null) {\\n  try {\\n    const item = sessionStorage.getItem(key);\\n    return item ? JSON.parse(item) : defaultValue;\\n  } catch (error) {\\n    console.error('Error parsing JSON:', error);\\n    return defaultValue;\\n  }\\n}\\n```"
    },
    {
      "id": 39,
      "question": "What is a Cookie",
      "answer": "A cookie is a small piece of data that a server sends to a user's web browser. The browser stores it and sends it back with later requests to the same server. Cookies are mainly used for session management, personalization, and tracking.\\n\\n**Cookie Characteristics:**\\n- **Size Limit**: Maximum 4KB per cookie\\n- **Domain Specific**: Only sent to the domain that created them\\n- **Automatic**: Sent with every HTTP request to the domain\\n- **Expirable**: Can have expiration dates\\n- **Secure**: Can be restricted to HTTPS only\\n\\n**Cookie Attributes:**\\n\\n| Attribute | Description | Example |\\n|-----------|-------------|---------|\\n| **Name=Value** | The cookie data | `username=john_doe` |\\n| **Expires** | Expiration date | `expires=Wed, 21 Oct 2025 07:28:00 GMT` |\\n| **Max-Age** | Seconds until expiry | `max-age=3600` (1 hour) |\\n| **Domain** | Which domains can access | `domain=.example.com` |\\n| **Path** | Which paths can access | `path=/admin` |\\n| **Secure** | HTTPS only | `secure` |\\n| **HttpOnly** | No JavaScript access | `httponly` |\\n| **SameSite** | Cross-site request policy | `samesite=strict` |\\n\\n**Creating Cookies with JavaScript:**\\n\\n```javascript\\n// Basic cookie\\ndocument.cookie = 'username=john_doe';\\n\\n// Cookie with expiration (1 day)\\nconst expires = new Date();\\nexpires.setTime(expires.getTime() + (24 * 60 * 60 * 1000));\\ndocument.cookie = `sessionId=abc123; expires=${expires.toUTCString()}`;\\n\\n// Cookie with multiple attributes\\ndocument.cookie = 'theme=dark; max-age=86400; path=/; secure; samesite=strict';\\n\\n// Cookie utility functions\\nfunction setCookie(name, value, days) {\\n  const expires = new Date();\\n  expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));\\n  document.cookie = `${name}=${value}; expires=${expires.toUTCString()}; path=/`;\\n}\\n\\nfunction getCookie(name) {\\n  const nameEQ = name + '=';\\n  const ca = document.cookie.split(';');\\n  for (let i = 0; i < ca.length; i++) {\\n    let c = ca[i];\\n    while (c.charAt(0) === ' ') c = c.substring(1, c.length);\\n    if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);\\n  }\\n  return null;\\n}\\n\\nfunction deleteCookie(name) {\\n  document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;\\n}\\n```\\n\\n**Common Use Cases:**\\n- **Session Management**: Login status, shopping carts\\n- **Personalization**: User preferences, themes\\n- **Tracking**: Analytics, advertising\\n- **Security**: CSRF tokens, authentication"
    },
    {
      "id": 40,
      "question": "Why do you need a Cookie",
      "answer": "Cookies are essential for web applications because HTTP is a stateless protocol, meaning each request is independent and the server doesn't remember previous interactions. Cookies provide a way to maintain state and context across multiple requests.\\n\\n**Primary Reasons for Using Cookies:**\\n\\n**1. Session Management**\\n```javascript\\n// Login session tracking\\nfunction loginUser(username, sessionToken) {\\n  // Set session cookie that expires when browser closes\\n  document.cookie = `sessionToken=${sessionToken}; path=/; secure; httponly`;\\n  document.cookie = `username=${username}; path=/; max-age=86400`; // 24 hours\\n}\\n\\n// Shopping cart that survives browser restart\\nfunction addToCart(itemId) {\\n  const cart = getCookie('cart') ? JSON.parse(getCookie('cart')) : [];\\n  cart.push(itemId);\\n  localStorage.setItem('cart', JSON.stringify(cart));\\n}\\n```\\n\\n**2. Personalization and User Preferences**\\n```javascript\\n// Theme preference\\nfunction setTheme(theme) {\\n  document.cookie = `theme=${theme}; max-age=31536000; path=/`; // 1 year\\n  applyTheme(theme);\\n}\\n\\n// Language preference\\nfunction setLanguage(lang) {\\n  document.cookie = `lang=${lang}; max-age=31536000; path=/`;\\n  location.reload(); // Reload to apply language\\n}\\n\\n// User settings\\nfunction saveUserSettings(settings) {\\n  document.cookie = `settings=${JSON.stringify(settings)}; max-age=2592000; path=/`; // 30 days\\n}\\n```\\n\\n**3. Analytics and Tracking**\\n```javascript\\n// User tracking for analytics\\nfunction trackUser() {\\n  let userId = getCookie('userId');\\n  if (!userId) {\\n    userId = generateUniqueId();\\n    setCookie('userId', userId, 365); // 1 year\\n  }\\n  \\n  // Track page visit\\n  sendAnalytics('pageview', { userId, page: window.location.pathname });\\n}\\n\\n// A/B testing\\nfunction assignTestGroup() {\\n  let testGroup = getCookie('testGroup');\\n  if (!testGroup) {\\n    testGroup = Math.random() < 0.5 ? 'A' : 'B';\\n    setCookie('testGroup', testGroup, 30); // 30 days\\n  }\\n  return testGroup;\\n}\\n```\\n\\n**4. Security and Authentication**\\n```javascript\\n// CSRF protection\\nfunction setCSRFToken(token) {\\n  document.cookie = `csrfToken=${token}; path=/; secure; samesite=strict`;\\n}\\n\\n// Remember me functionality\\nfunction rememberUser(username, rememberToken) {\\n  if (rememberMe) {\\n    setCookie('rememberToken', rememberToken, 30); // 30 days\\n    setCookie('username', username, 30);\\n  }\\n}\\n```\\n\\n**5. Performance Optimization**\\n```javascript\\n// Cache user preferences to avoid server requests\\nfunction getCachedUserPreferences() {\\n  const cached = getCookie('userPrefs');\\n  if (cached) {\\n    return JSON.parse(cached);\\n  }\\n  \\n  // Fetch from server if not cached\\n  return fetchUserPreferencesFromServer().then(prefs => {\\n    setCookie('userPrefs', JSON.stringify(prefs), 1); // Cache for 1 day\\n    return prefs;\\n  });\\n}\\n```\\n\\n**Key Benefits:**\\n- **Stateful Experience**: Maintain user context across page reloads\\n- **Automatic Transmission**: Sent with every request automatically\\n- **Cross-Tab Sharing**: Available across all tabs of the same domain\\n- **Server-Side Access**: Can be read by server-side code\\n- **Persistent Storage**: Can survive browser restarts (unlike sessionStorage)\\n- **Security Features**: Support for secure, httpOnly, and sameSite attributes"
    },
    {
      "id": 41,
      "question": "How do you delete a cookie",
      "answer": "To delete a cookie in JavaScript, you need to set its expiration date to a past date. Since cookies cannot be directly deleted, this approach makes the browser automatically remove the expired cookie.\\n\\n**Basic Cookie Deletion:**\\n\\n```javascript\\n// Method 1: Set expiration to past date\\nfunction deleteCookie(name) {\\n  document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;\\n}\\n\\n// Method 2: Use max-age with negative value\\nfunction deleteCookieAlt(name) {\\n  document.cookie = `${name}=; max-age=-1; path=/;`;\\n}\\n\\n// Usage\\ndeleteCookie('username');\\ndeleteCookie('sessionToken');\\n```\\n\\n**Advanced Cookie Deletion (matching all attributes):**\\n\\n```javascript\\n// Delete cookie with specific path and domain\\nfunction deleteCookieAdvanced(name, path = '/', domain = '') {\\n  let cookieString = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=${path};`;\\n  \\n  if (domain) {\\n    cookieString += ` domain=${domain};`;\\n  }\\n  \\n  document.cookie = cookieString;\\n}\\n\\n// Examples\\ndeleteCookieAdvanced('sessionId', '/', '.example.com');\\ndeleteCookieAdvanced('adminToken', '/admin/', 'app.example.com');\\n```\\n\\n**Complete Cookie Management Utility:**\\n\\n```javascript\\nclass CookieManager {\\n  // Set cookie\\n  static set(name, value, options = {}) {\\n    const {\\n      expires = null,\\n      maxAge = null,\\n      path = '/',\\n      domain = '',\\n      secure = false,\\n      httpOnly = false,\\n      sameSite = 'lax'\\n    } = options;\\n    \\n    let cookieString = `${name}=${encodeURIComponent(value)}`;\\n    \\n    if (expires) {\\n      cookieString += `; expires=${expires}`;\\n    }\\n    \\n    if (maxAge) {\\n      cookieString += `; max-age=${maxAge}`;\\n    }\\n    \\n    cookieString += `; path=${path}`;\\n    \\n    if (domain) {\\n      cookieString += `; domain=${domain}`;\\n    }\\n    \\n    if (secure) {\\n      cookieString += '; secure';\\n    }\\n    \\n    if (httpOnly) {\\n      cookieString += '; httponly';\\n    }\\n    \\n    cookieString += `; samesite=${sameSite}`;\\n    \\n    document.cookie = cookieString;\\n  }\\n  \\n  // Get cookie\\n  static get(name) {\\n    const nameEQ = name + '=';\\n    const ca = document.cookie.split(';');\\n    \\n    for (let i = 0; i < ca.length; i++) {\\n      let c = ca[i];\\n      while (c.charAt(0) === ' ') c = c.substring(1, c.length);\\n      if (c.indexOf(nameEQ) === 0) {\\n        return decodeURIComponent(c.substring(nameEQ.length, c.length));\\n      }\\n    }\\n    return null;\\n  }\\n  \\n  // Delete cookie\\n  static delete(name, path = '/', domain = '') {\\n    let cookieString = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=${path};`;\\n    \\n    if (domain) {\\n      cookieString += ` domain=${domain};`;\\n    }\\n    \\n    document.cookie = cookieString;\\n  }\\n  \\n  // Delete all cookies\\n  static deleteAll() {\\n    const cookies = document.cookie.split(';');\\n    \\n    for (let cookie of cookies) {\\n      const eqPos = cookie.indexOf('=');\\n      const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();\\n      this.delete(name);\\n    }\\n  }\\n  \\n  // Check if cookie exists\\n  static exists(name) {\\n    return this.get(name) !== null;\\n  }\\n  \\n  // Get all cookies\\n  static getAll() {\\n    const cookies = {};\\n    const ca = document.cookie.split(';');\\n    \\n    for (let cookie of ca) {\\n      const [name, value] = cookie.trim().split('=');\\n      if (name && value) {\\n        cookies[name] = decodeURIComponent(value);\\n      }\\n    }\\n    \\n    return cookies;\\n  }\\n}\\n\\n// Usage examples\\nCookieManager.set('username', 'john_doe', { maxAge: 86400 });\\nCookieManager.delete('username');\\nCookieManager.deleteAll();\\n```\\n\\n**Important Notes:**\\n- **Path and Domain Matching**: To delete a cookie, you must specify the same path and domain used when creating it\\n- **Secure Cookies**: Cannot be deleted from non-HTTPS pages if they were created as secure\\n- **HttpOnly Cookies**: Cannot be deleted via JavaScript (server-side only)"
    },
    {
      "id": 42,
      "question": "What are the differences between cookie, local storage and session storage",
      "answer": "Here's a comprehensive comparison of the three main client-side storage mechanisms:\\n\\n**Storage Comparison Table:**\\n\\n| Feature | **Cookies** | **localStorage** | **sessionStorage** |\\n|---------|-------------|------------------|-------------------|\\n| **Storage Limit** | 4KB per cookie | 5-10MB per domain | 5-10MB per domain |\\n| **Persistence** | Until expiration | Until manually cleared | Until tab closes |\\n| **Scope** | Domain + path | Domain + protocol | Domain + protocol + tab |\\n| **Server Access** | Sent with every HTTP request | Client-side only | Client-side only |\\n| **API** | document.cookie string | Storage API methods | Storage API methods |\\n| **Browser Support** | Universal | Modern browsers | Modern browsers |\\n| **Security** | secure, httpOnly, sameSite | None built-in | None built-in |\\n\\n**Detailed Differences:**\\n\\n**1. Data Persistence:**\\n```javascript\\n// Cookies - configurable expiration\\ndocument.cookie = 'data=value; max-age=3600'; // 1 hour\\ndocument.cookie = 'persistent=value; max-age=31536000'; // 1 year\\n\\n// localStorage - persists until manually cleared\\nlocalStorage.setItem('data', 'value'); // Survives browser restart\\n\\n// sessionStorage - cleared when tab closes\\nsessionStorage.setItem('data', 'value'); // Lost on tab close\\n```\\n\\n**2. Automatic Server Communication:**\\n```javascript\\n// Cookies - automatically sent with requests\\nfetch('/api/data'); // Cookies sent automatically\\n\\n// localStorage/sessionStorage - manual inclusion required\\nfetch('/api/data', {\\n  headers: {\\n    'Authorization': localStorage.getItem('token')\\n  }\\n});\\n```\\n\\n**3. Storage Capacity:**\\n```javascript\\n// Cookies - very limited (4KB total per domain)\\nconst largeData = 'x'.repeat(5000); // This would exceed cookie limit\\n\\n// localStorage/sessionStorage - much larger capacity\\nconst largeData = JSON.stringify(Array(1000).fill({\\n  id: Math.random(),\\n  data: 'large dataset'\\n})); // This works fine\\nlocalStorage.setItem('bigData', largeData);\\n```\\n\\n**4. API Differences:**\\n```javascript\\n// Cookies - string manipulation\\nfunction setCookie(name, value, days) {\\n  const expires = new Date();\\n  expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));\\n  document.cookie = `${name}=${value}; expires=${expires.toUTCString()}; path=/`;\\n}\\n\\nfunction getCookie(name) {\\n  const nameEQ = name + '=';\\n  const ca = document.cookie.split(';');\\n  for (let i = 0; i < ca.length; i++) {\\n    let c = ca[i];\\n    while (c.charAt(0) === ' ') c = c.substring(1, c.length);\\n    if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);\\n  }\\n  return null;\\n}\\n\\n// localStorage/sessionStorage - simple key-value API\\nlocalStorage.setItem('key', 'value');\\nconst value = localStorage.getItem('key');\\nlocalStorage.removeItem('key');\\nlocalStorage.clear();\\n```\\n\\n**5. Security Features:**\\n```javascript\\n// Cookies - built-in security attributes\\ndocument.cookie = 'secure-data=value; secure; httponly; samesite=strict';\\n\\n// localStorage/sessionStorage - no built-in security\\n// Must implement encryption manually\\nfunction encryptData(data, key) {\\n  // Custom encryption implementation\\n  return btoa(data); // Simple base64 (not secure, just example)\\n}\\n\\nlocalStorage.setItem('sensitive', encryptData('secret', 'key'));\\n```\\n\\n**Use Case Recommendations:**\\n\\n**Use Cookies for:**\\n- Authentication tokens (server needs access)\\n- Session management\\n- User preferences that affect server rendering\\n- Small data that needs server access\\n\\n**Use localStorage for:**\\n- User preferences (theme, language)\\n- Application state\\n- Cached data\\n- Offline functionality\\n- Large datasets that don't need server access\\n\\n**Use sessionStorage for:**\\n- Temporary form data\\n- Single-session user state\\n- Tab-specific data\\n- Wizard/multi-step form progress\\n- Temporary caching"
    },
    {
      "id": 43,
      "question": "What is the main difference between localStorage and sessionStorage",
      "answer": "The main difference between localStorage and sessionStorage is their **scope and persistence**:\\n\\n**Key Differences:**\\n\\n**1. Persistence Duration:**\\n```javascript\\n// localStorage - persists until manually cleared\\nlocalStorage.setItem('user', 'john');\\n// Data survives: browser restart, computer restart, tab closing\\n// Only removed by: user clearing browser data, code calling clear(), or storage quota exceeded\\n\\n// sessionStorage - cleared when tab/window closes\\nsessionStorage.setItem('tempData', 'temporary');\\n// Data survives: page refresh, navigation within same tab\\n// Removed when: tab closes, window closes, browser crash\\n```\\n\\n**2. Scope and Sharing:**\\n```javascript\\n// localStorage - shared across all tabs/windows of same origin\\n// Tab 1\\nlocalStorage.setItem('sharedData', 'available everywhere');\\n\\n// Tab 2 (same domain)\\nconsole.log(localStorage.getItem('sharedData')); // 'available everywhere'\\n\\n// sessionStorage - isolated per tab/window\\n// Tab 1\\nsessionStorage.setItem('tabSpecific', 'only in this tab');\\n\\n// Tab 2 (same domain)\\nconsole.log(sessionStorage.getItem('tabSpecific')); // null\\n```\\n\\n**3. Practical Examples:**\\n\\n**localStorage Use Cases:**\\n```javascript\\n// User preferences that should persist\\nfunction saveTheme(theme) {\\n  localStorage.setItem('theme', theme);\\n}\\n\\n// Shopping cart that survives browser restart\\nfunction addToCart(item) {\\n  const cart = JSON.parse(localStorage.getItem('cart') || '[]');\\n  cart.push(item);\\n  localStorage.setItem('cart', JSON.stringify(cart));\\n}\\n\\n// User authentication token\\nfunction saveAuthToken(token) {\\n  localStorage.setItem('authToken', token);\\n}\\n\\n// Application settings\\nfunction saveSettings(settings) {\\n  localStorage.setItem('appSettings', JSON.stringify(settings));\\n}\\n```\\n\\n**sessionStorage Use Cases:**\\n```javascript\\n// Form data backup (in case of accidental refresh)\\nfunction backupFormData() {\\n  const formData = {\\n    name: document.getElementById('name').value,\\n    email: document.getElementById('email').value\\n  };\\n  sessionStorage.setItem('formBackup', JSON.stringify(formData));\\n}\\n\\n// Multi-step wizard progress\\nfunction saveWizardStep(step, data) {\\n  sessionStorage.setItem(`wizardStep${step}`, JSON.stringify(data));\\n}\\n\\n// Temporary session state\\nfunction setCurrentView(view) {\\n  sessionStorage.setItem('currentView', view);\\n}\\n\\n// Tab-specific user actions\\nfunction trackTabActivity(action) {\\n  const activities = JSON.parse(sessionStorage.getItem('tabActivities') || '[]');\\n  activities.push({ action, timestamp: Date.now() });\\n  sessionStorage.setItem('tabActivities', JSON.stringify(activities));\\n}\\n```\\n\\n**4. Cross-Tab Communication:**\\n```javascript\\n// localStorage can be used for cross-tab communication\\nwindow.addEventListener('storage', function(e) {\\n  if (e.key === 'userLoggedOut') {\\n    // Log out user in all tabs\\n    window.location.href = '/login';\\n  }\\n});\\n\\n// Trigger logout in all tabs\\nfunction logoutAllTabs() {\\n  localStorage.setItem('userLoggedOut', Date.now());\\n  localStorage.removeItem('userLoggedOut'); // Clean up\\n}\\n\\n// sessionStorage cannot be used for cross-tab communication\\n// Each tab has its own isolated sessionStorage\\n```\\n\\n**5. Memory and Performance:**\\n```javascript\\n// localStorage - data stays in memory and disk\\n// Good for: long-term storage, user preferences\\n// Watch out for: storage quota limits\\n\\n// sessionStorage - typically faster access\\n// Good for: temporary data, session-specific state\\n// Automatically cleaned up when tab closes\\n```\\n\\n**Decision Matrix:**\\n\\n| Use Case | localStorage | sessionStorage |\\n|----------|--------------|----------------|\\n| User preferences | ‚úÖ | ‚ùå |\\n| Authentication tokens | ‚úÖ | ‚ùå |\\n| Shopping cart | ‚úÖ | ‚ùå |\\n| Form backup | ‚ùå | ‚úÖ |\\n| Wizard steps | ‚ùå | ‚úÖ |\\n| Tab-specific state | ‚ùå | ‚úÖ |\\n| Cross-tab sharing | ‚úÖ | ‚ùå |\\n| Temporary caching | ‚ùå | ‚úÖ |\\n| Long-term storage | ‚úÖ | ‚ùå |"
    },
    {
      "id": 49,
      "question": "What is eval",
      "answer": "The `eval()` function evaluates JavaScript code represented as a string. The string can be a JavaScript expression, statement, or sequence of statements.\n\n**Example:**\n```javascript\nconsole.log(eval(\"1 + 2\")); // 3\n```\n\n**Key Points:**\n- Use with caution: `eval()` can execute arbitrary code and is a security risk.\n- Avoid using `eval()` when possible; prefer safer alternatives.\n- Variables and functions declared inside `eval()` are created in the current scope."
    },
    {
      "id": 50,
      "question": "What is the difference between window and document",
      "answer": "Here are the main differences between `window` and `document` in the browser:\n\n| Feature | window | document |\n|---------|--------|----------|\n| Description | Root-level object for the browser window/tab | Represents the web page (DOM) |\n| Access | Implicitly available | Accessed via `window.document` or `document` |\n| Methods | `alert()`, `confirm()`, `setTimeout()`, etc. | `getElementById()`, `createElement()`, etc. |\n| Properties | `document`, `location`, `history`, etc. | `body`, `forms`, `images`, etc. |\n\n**Summary:**\n- `window` is the global object for the browser environment.\n- `document` is a property of `window` and represents the DOM."
    },
    {
      "id": 51,
      "question": "How do you access history in JavaScript",
      "answer": "The `window.history` object contains the browser's session history. You can navigate back and forward using its methods.\n\n**Example:**\n```javascript\nfunction goBack() {\n  window.history.back();\n}\nfunction goForward() {\n  window.history.forward();\n}\n```\n\n**Key Points:**\n- `window.history.length` gives the number of entries in the history stack.\n- You can also use `history.go(n)` to move forward or backward by `n` steps.\n- The `window` prefix is optional."
    },
    {
      "id": 52,
      "question": "How do you detect caps lock key turned on or not",
      "answer": "You can use the `getModifierState()` method of keyboard or mouse events to detect if CapsLock is active.\n\n**Example:**\n```html\n<input type=\"password\" onmousedown=\"enterInput(event)\" />\n<p id=\"feedback\"></p>\n<script>\n  function enterInput(e) {\n    var flag = e.getModifierState(\"CapsLock\");\n    if (flag) {\n      document.getElementById(\"feedback\").innerHTML = \"CapsLock activated\";\n    } else {\n      document.getElementById(\"feedback\").innerHTML = \"CapsLock not activated\";\n    }\n  }\n<\/script>\n```\n\n**Key Points:**\n- Works with `keydown`, `keyup`, `mousedown`, and similar events.\n- Useful for providing user feedback in password fields."
    },
    {
      "id": 53,
      "question": "What is isNaN",
      "answer": "The `isNaN()` function determines whether a value is NaN (Not-a-Number). It returns `true` if the value is NaN or cannot be converted to a number, otherwise `false`.\n\n**Examples:**\n```javascript\nisNaN(\"Hello\"); // true\nisNaN(\"100\"); // false\nisNaN(NaN); // true\nisNaN(123); // false\n```\n\n**Key Points:**\n- `isNaN()` first tries to convert the value to a number.\n- Use `Number.isNaN()` for a stricter check (does not coerce values)."
    },
    {
      "id": 54,
      "question": "What are the differences between undeclared and undefined variables",
      "answer": "Here are the main differences between undeclared and undefined variables in JavaScript:\n\n| Feature | Undeclared | Undefined |\n|---------|------------|-----------|\n| Declaration | Not declared in the program | Declared but not assigned a value |\n| Access | ReferenceError if accessed | Returns `undefined` if accessed |\n| Example | `b; // ReferenceError` | `var a; a; // undefined` |\n\n**Example:**\n```javascript\nvar a;\na; // yields undefined\nb; // Throws ReferenceError: b is not defined\n```\n\n**Key Points:**\n- Undeclared variables cause runtime errors when accessed.\n- Undefined variables exist but have no value assigned."
    },
    {
      "id": 55,
      "question": "What are global variables",
      "answer": "Global variables are those that are available throughout the entire code, regardless of scope. In JavaScript, omitting the `var`, `let`, or `const` keyword when assigning a variable makes it global (not recommended).\n\n**Example:**\n```javascript\nmsg = \"Hello\"; // Becomes a global variable\nconsole.log(window.msg); // \"Hello\"\n```\n\n**Key Points:**\n- Global variables can be accessed from any function or block.\n- Overuse can lead to naming conflicts and bugs.\n- Best practice: always declare variables with `let`, `const`, or `var`."
    },
    {
      "id": 56,
      "question": "What are the problems with global variables",
      "answer": "The main problems with global variables are:\n- **Naming conflicts:** Local and global variables may have the same name, causing unexpected behavior.\n- **Difficult debugging:** Harder to track changes and bugs when many parts of code can modify globals.\n- **Testing issues:** Code relying on globals is harder to test in isolation.\n- **Namespace pollution:** Too many globals can clutter the global scope and cause maintenance issues.\n\n**Best Practice:**\n- Minimize use of global variables.\n- Use modules, closures, or IIFEs to encapsulate variables."
    },
    {
      "id": 57,
      "question": "What is NaN property",
      "answer": "The `NaN` property is a global property representing \"Not-a-Number\". It indicates that a value is not a legal number.\n\n**Examples:**\n```javascript\nMath.sqrt(-1); // NaN\nparseInt(\"Hello\"); // NaN\nconsole.log(typeof NaN); // \"number\"\n```\n\n**Key Points:**\n- `NaN` is of type `number`.\n- Any arithmetic operation with `NaN` results in `NaN`.\n- Use `isNaN()` or `Number.isNaN()` to check for NaN values."
    },
    {
      "id": 58,
      "question": "What is the purpose of isFinite function",
      "answer": "The `isFinite()` function determines whether a value is a finite, legal number. It returns `false` if the value is `Infinity`, `-Infinity`, or `NaN`, otherwise `true`.\n\n**Examples:**\n```javascript\nisFinite(Infinity); // false\nisFinite(NaN); // false\nisFinite(-Infinity); // false\nisFinite(100); // true\n```\n\n**Key Points:**\n- `isFinite()` converts the argument to a number before checking.\n- Use `Number.isFinite()` for a stricter check (no type coercion)."
    },
    {
      "id": 59,
      "question": "What is an event flow",
      "answer": "Event flow is the order in which event is received on the web page. When you click on an element that is nested in various other elements, before your click actually reaches its destination, or target element, it must trigger the click event for each of its parent elements first, starting at the top with the global window object.\n\nThere are two ways of event flow:\n1. **Top to Bottom (Event Capturing)**\n2. **Bottom to Top (Event Bubbling)**"
    },
    {
      "id": 60,
      "question": "What is event bubbling",
      "answer": "Event bubbling is a type of event propagation where the event first triggers on the innermost target element, and then successively triggers on the ancestors (parents) of the target element in the same nesting hierarchy till it reaches the outermost DOM element.\n\n```html\n<div id=\"parent\">\n  <button id=\"child\">Click me!</button>\n</div>\n```\n\n```javascript\ndocument.getElementById(\"parent\").addEventListener(\"click\", () => {\n  console.log(\"Parent clicked\");\n});\n\ndocument.getElementById(\"child\").addEventListener(\"click\", () => {\n  console.log(\"Child clicked\");\n});\n```\n\nIf you click the button, you'll see:\n1. \"Child clicked\"\n2. \"Parent clicked\""
    },
    {
      "id": 61,
      "question": "What is event capturing",
      "answer": "Event capturing is a type of event propagation where the event is first captured by the outermost element, and then successively triggers on the descendants (children) of the target element in the same nesting hierarchy till it reaches the innermost DOM element.\n\n```javascript\ndocument.getElementById(\"parent\").addEventListener(\"click\", () => {\n  console.log(\"Parent clicked\");\n}, true); // true enables capturing\n\ndocument.getElementById(\"child\").addEventListener(\"click\", () => {\n  console.log(\"Child clicked\");\n}, true);\n```\n\nIf you click the button, you'll see:\n1. \"Parent clicked\"\n2. \"Child clicked\""
    },
    {
      "id": 62,
      "question": "How do you submit a form using JavaScript",
      "answer": "You can submit a form using JavaScript in several ways:\n\n**1. Using the submit() method:**\n```javascript\ndocument.forms[\"myform\"].submit();\n```\n\n**2. Using form reference:**\n```javascript\ndocument.getElementById(\"myform\").submit();\n```\n\n**3. Using form validation before submit:**\n```javascript\nfunction submitForm() {\n  var form = document.getElementById(\"myform\");\n  if (validateForm()) {\n    form.submit();\n  }\n}\n```\n\n**Note:** The submit() method does not trigger the form's submit event, so any validation that depends on the submit event will not run."
    },
    {
      "id": 63,
      "question": "How do you find operating system details",
      "answer": "You can find operating system details using the `navigator.platform` property or the more modern `navigator.userAgentData` API:\n\n**Using navigator.platform (legacy):**\n```javascript\nconsole.log(navigator.platform); // \"Win32\", \"MacIntel\", \"Linux x86_64\", etc.\n```\n\n**Using User-Agent Client Hints API (modern):**\n```javascript\nif (navigator.userAgentData) {\n  navigator.userAgentData.getHighEntropyValues(['platform', 'platformVersion'])\n    .then(ua => {\n      console.log(ua.platform); // \"Windows\", \"macOS\", \"Linux\", etc.\n      console.log(ua.platformVersion); // Version details\n    });\n}\n```\n\n**Using user agent string (not recommended):**\n```javascript\nconst userAgent = navigator.userAgent;\nif (userAgent.includes('Windows')) {\n  console.log('Windows OS');\n} else if (userAgent.includes('Mac')) {\n  console.log('Mac OS');\n} else if (userAgent.includes('Linux')) {\n  console.log('Linux OS');\n}\n```"
    },
    {
      "id": 64,
      "question": "What is the difference between document load and DOMContentLoaded events",
      "answer": "The `DOMContentLoaded` and `load` events represent different stages in the page loading process:\n\n**DOMContentLoaded:**\n- Fires when the HTML document has been completely loaded and parsed\n- Does NOT wait for stylesheets, images, and subframes to finish loading\n- Fires earlier in the loading process\n\n```javascript\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('DOM is ready!');\n});\n```\n\n**load:**\n- Fires when the entire page has finished loading\n- Waits for ALL resources (images, stylesheets, scripts, etc.) to load\n- Fires later in the loading process\n\n```javascript\nwindow.addEventListener('load', () => {\n  console.log('Everything is loaded!');\n});\n```\n\n**Timeline:**\n1. HTML parsing begins\n2. `DOMContentLoaded` fires (DOM ready)\n3. External resources continue loading\n4. `load` fires (everything ready)"
    },
    {
      "id": 65,
      "question": "What is the difference between native, host and user objects",
      "answer": "In JavaScript, objects can be categorized into three types:\n\n**Native Objects:**\n- Objects that are part of the JavaScript language specification (ECMAScript)\n- Available in any JavaScript environment\n- Examples: Object, Array, Function, String, Number, Boolean, Date, RegExp, Error, etc.\n\n```javascript\nvar arr = new Array(); // Native object\nvar obj = new Object(); // Native object\nvar date = new Date(); // Native object\n```\n\n**Host Objects:**\n- Objects provided by the host environment (browser, Node.js, etc.)\n- Not part of the JavaScript specification\n- Browser examples: window, document, location, history, XMLHttpRequest, etc.\n- Node.js examples: global, process, Buffer, etc.\n\n```javascript\nconsole.log(window); // Host object (browser)\nconsole.log(document); // Host object (browser)\n```\n\n**User Objects:**\n- Objects created by the developer/user\n- Custom objects defined in your code\n\n```javascript\nvar person = { name: 'John', age: 30 }; // User object\nfunction Car() { this.brand = 'Toyota'; } // User object constructor\n```"
    },
    {
      "id": 66,
      "question": "What are the tools or techniques used for debugging JavaScript code",
      "answer": "There are several tools and techniques for debugging JavaScript code:\n\n**Browser Developer Tools:**\n- Chrome DevTools, Firefox Developer Tools, Safari Web Inspector\n- Features: Console, Sources/Debugger, Network, Performance tabs\n\n**Debugging Techniques:**\n\n**1. Console methods:**\n```javascript\nconsole.log('Debug info');\nconsole.error('Error message');\nconsole.warn('Warning message');\nconsole.table(arrayOrObject);\nconsole.trace(); // Stack trace\n```\n\n**2. Debugger statement:**\n```javascript\nfunction myFunction() {\n  debugger; // Execution will pause here\n  // ... rest of code\n}\n```\n\n**3. Breakpoints:**\n- Set breakpoints in browser DevTools\n- Conditional breakpoints\n- Logpoints (log without stopping)\n\n**4. Error handling:**\n```javascript\ntry {\n  // risky code\n} catch (error) {\n  console.error('Error:', error);\n}\n```\n\n**External Tools:**\n- Visual Studio Code debugger\n- WebStorm debugger\n- Browser extensions\n- Linting tools (ESLint)\n- Performance profiling tools"
    },
    {
      "id": 67,
      "question": "What are the pros and cons of promises over callbacks",
      "answer": "**Promises vs Callbacks comparison:**\n\n**Pros of Promises:**\n\n**1. Avoid Callback Hell:**\n```javascript\n// Callback hell\ngetData(function(a) {\n  getMoreData(a, function(b) {\n    getMoreData(b, function(c) {\n      // nested callbacks...\n    });\n  });\n});\n\n// Promise chaining\ngetData()\n  .then(a => getMoreData(a))\n  .then(b => getMoreData(b))\n  .then(c => {\n    // clean chain\n  });\n```\n\n**2. Better Error Handling:**\n```javascript\n// Promises - single catch for all errors\ngetData()\n  .then(processData)\n  .then(saveData)\n  .catch(handleError); // Catches any error in the chain\n```\n\n**3. Better Composition:**\n- `Promise.all()`, `Promise.race()`, `Promise.allSettled()`\n- Easier to combine multiple async operations\n\n**4. Immutable:**\n- Once resolved/rejected, state cannot change\n- Can be passed around safely\n\n**Cons of Promises:**\n\n**1. Slightly More Complex:**\n- Additional learning curve\n- More overhead for simple cases\n\n**2. Not Cancellable:**\n- Cannot cancel a promise once started\n- Callbacks can be more easily abandoned\n\n**3. Browser Support:**\n- Older browsers need polyfills\n- Callbacks work everywhere\n\n**Overall:** Promises provide cleaner, more maintainable code for complex async operations, while callbacks might be simpler for basic use cases."
    },
    {
      "id": 68,
      "question": "What is the difference between an attribute and a property",
      "answer": "**Attributes** and **Properties** are related but distinct concepts in the DOM:\n\n**Attributes:**\n- Defined in HTML markup\n- Always strings\n- Represent the initial state\n- Accessed via `getAttribute()`, `setAttribute()`, `hasAttribute()`, `removeAttribute()`\n\n**Properties:**\n- JavaScript object properties of DOM elements\n- Can be any JavaScript type\n- Represent the current state\n- Accessed via dot notation or bracket notation\n\n**Examples:**\n\n```html\n<input id=\"myInput\" type=\"text\" value=\"Hello\" />\n```\n\n```javascript\nconst input = document.getElementById('myInput');\n\n// Attributes (strings, initial values)\nconsole.log(input.getAttribute('value')); // \"Hello\"\nconsole.log(input.getAttribute('type'));  // \"text\"\n\n// Properties (current values, various types)\nconsole.log(input.value); // \"Hello\" (but changes as user types)\nconsole.log(input.type);  // \"text\"\n\n// After user types \"World\":\nconsole.log(input.getAttribute('value')); // Still \"Hello\" (initial)\nconsole.log(input.value); // \"World\" (current)\n\n// Boolean example\ninput.disabled = true;\nconsole.log(input.disabled); // true (boolean property)\nconsole.log(input.getAttribute('disabled')); // \"\" (string attribute)\n```\n\n**Key Differences:**\n- Attributes reflect HTML, properties reflect current DOM state\n- Properties are \"live\", attributes are often static\n- Some properties have no corresponding attributes\n- Type conversion: attributes are always strings, properties can be any type"
    },
    {
      "id": 69,
      "question": "What is same-origin policy",
      "answer": "The same-origin policy is a critical security mechanism implemented by web browsers that restricts how a document or script loaded from one origin can interact with resources from another origin.\n\n**What defines an \"origin\"?**\nTwo URLs have the same origin if they have:\n1. Same protocol (http/https)\n2. Same domain/hostname\n3. Same port\n\n**Examples:**\n```\nURL: https://example.com:443/page1\nOrigin: https://example.com:443\n\n‚úÖ Same origin: https://example.com:443/page2\n‚ùå Different origin: http://example.com:443 (different protocol)\n‚ùå Different origin: https://sub.example.com:443 (different domain)\n‚ùå Different origin: https://example.com:8080 (different port)\n```\n\n**What's restricted:**\n- AJAX requests to different origins\n- Access to DOM elements from different origins\n- Reading cookies, localStorage from different origins\n- Access to iframe content from different origins\n\n**Workarounds:**\n1. **CORS (Cross-Origin Resource Sharing):**\n```javascript\n// Server sets headers to allow cross-origin requests\nAccess-Control-Allow-Origin: https://example.com\n```\n\n2. **JSONP (JSON with Padding):**\n```javascript\n// Uses script tags to bypass same-origin policy\n<script src=\"https://api.example.com/data?callback=handleData\"></script>\n```\n\n3. **Proxy server:** Route requests through same-origin proxy\n\n4. **postMessage API:** For iframe communication\n```javascript\nwindow.postMessage('Hello', 'https://example.com');\n```\n\n**Purpose:** Prevents malicious scripts from accessing sensitive data from other websites."
    },
    {
      "id": 70,
      "question": "What is the purpose of void 0",
      "answer": "`void 0` is a way to obtain the `undefined` value in JavaScript. The `void` operator evaluates any expression and returns `undefined`.\n\n**Why use `void 0` instead of `undefined`?**\n\n**Historical Context:**\nIn older JavaScript versions (before ES5), `undefined` was not a reserved keyword and could be overwritten:\n\n```javascript\n// This was possible in old JavaScript!\nundefined = \"not undefined anymore\";\nconsole.log(undefined); // \"not undefined anymore\"\n\n// But void 0 always returns true undefined\nconsole.log(void 0); // undefined (always reliable)\n```\n\n**Modern Usage:**\n```javascript\n// These are equivalent:\nvar a;\nconsole.log(a === undefined); // true\nconsole.log(a === void 0);    // true\n\n// Common patterns:\nif (typeof myVar === 'undefined') { /* ... */ }\nif (myVar === void 0) { /* ... */ }\n\n// In ternary operators:\nvar result = value !== void 0 ? value : defaultValue;\n```\n\n**Benefits:**\n- **Shorter:** `void 0` is shorter than `undefined`\n- **Reliable:** Always returns true undefined\n- **Minification:** Better for code minification\n- **Performance:** Slightly faster (no variable lookup)\n\n**Modern JavaScript:**\nSince ES5, `undefined` is read-only in the global scope, so `void 0` is less critical but still used for:\n- Legacy code compatibility\n- Minification benefits\n- Habit from older JavaScript development"
    },
    {
      "id": 71,
      "question": "What is the use of setTimeout",
      "answer": "`setTimeout` is a JavaScript function that executes a function or code snippet after a specified delay (in milliseconds).\n\n**Syntax:**\n```javascript\nsetTimeout(function, delay, param1, param2, ...)\nsetTimeout(code, delay)\n```\n\n**Basic Examples:**\n```javascript\n// Execute after 2 seconds\nsetTimeout(() => {\n  console.log('Hello after 2 seconds!');\n}, 2000);\n\n// With parameters\nsetTimeout((name, age) => {\n  console.log(`${name} is ${age} years old`);\n}, 1000, 'John', 25);\n\n// Store timeout ID for cancellation\nconst timeoutId = setTimeout(() => {\n  console.log('This might not run');\n}, 5000);\n\n// Cancel the timeout\nclearTimeout(timeoutId);\n```\n\n**Common Use Cases:**\n\n**1. Delaying execution:**\n```javascript\nfunction showMessage() {\n  setTimeout(() => {\n    alert('Welcome!');\n  }, 1000);\n}\n```\n\n**2. Debouncing:**\n```javascript\nlet debounceTimer;\nfunction debounce(func, delay) {\n  clearTimeout(debounceTimer);\n  debounceTimer = setTimeout(func, delay);\n}\n\n// Usage: debounce search as user types\ninput.addEventListener('input', () => {\n  debounce(() => {\n    performSearch(input.value);\n  }, 300);\n});\n```\n\n**3. Animation delays:**\n```javascript\nfunction animateSequence() {\n  element.classList.add('fade-in');\n  \n  setTimeout(() => {\n    element.classList.add('slide-up');\n  }, 500);\n  \n  setTimeout(() => {\n    element.classList.add('complete');\n  }, 1000);\n}\n```\n\n**Important Notes:**\n- Minimum delay is typically 4ms in browsers\n- Not guaranteed to execute at exact time (depends on call stack)\n- Returns a timeout ID that can be used with `clearTimeout()`\n- Runs asynchronously (non-blocking)"
    },
    {
      "id": 72,
      "question": "What is the use of setInterval",
      "answer": "`setInterval` is a JavaScript function that repeatedly executes a function or code snippet at specified intervals (in milliseconds).\n\n**Syntax:**\n```javascript\nsetInterval(function, delay, param1, param2, ...)\nsetInterval(code, delay)\n```\n\n**Basic Examples:**\n```javascript\n// Execute every 2 seconds\nconst intervalId = setInterval(() => {\n  console.log('This runs every 2 seconds');\n}, 2000);\n\n// With parameters\nsetInterval((message) => {\n  console.log(message);\n}, 1000, 'Tick!');\n\n// Stop the interval\nclearInterval(intervalId);\n```\n\n**Common Use Cases:**\n\n**1. Digital Clock:**\n```javascript\nfunction updateClock() {\n  const now = new Date();\n  document.getElementById('clock').textContent = now.toLocaleTimeString();\n}\n\n// Update every second\nsetInterval(updateClock, 1000);\n```\n\n**2. Auto-save functionality:**\n```javascript\nfunction autoSave() {\n  const data = getFormData();\n  saveToLocalStorage(data);\n  console.log('Auto-saved at:', new Date().toLocaleTimeString());\n}\n\n// Auto-save every 30 seconds\nconst autoSaveInterval = setInterval(autoSave, 30000);\n```\n\n**3. Progress updates:**\n```javascript\nlet progress = 0;\nconst progressInterval = setInterval(() => {\n  progress += 10;\n  updateProgressBar(progress);\n  \n  if (progress >= 100) {\n    clearInterval(progressInterval);\n    console.log('Progress complete!');\n  }\n}, 500);\n```\n\n**4. Polling for updates:**\n```javascript\nfunction checkForUpdates() {\n  fetch('/api/status')\n    .then(response => response.json())\n    .then(data => {\n      if (data.hasUpdate) {\n        showNotification('New update available!');\n      }\n    });\n}\n\n// Check every 5 minutes\nsetInterval(checkForUpdates, 5 * 60 * 1000);\n```\n\n**Important Notes:**\n- Returns an interval ID that can be used with `clearInterval()`\n- Continues until explicitly stopped or page unloads\n- Can cause performance issues if interval is too frequent\n- May drift over time due to execution delays\n\n**Best Practices:**\n- Always store the interval ID for cleanup\n- Clear intervals when no longer needed\n- Be mindful of performance with frequent intervals\n- Consider `requestAnimationFrame` for smooth animations instead"
    },
    {
      "id": 73,
      "question": "Why is JavaScript treated as Dynamic language",
      "answer": "JavaScript is considered a **dynamic language** because many operations that are typically performed at compile-time in static languages are performed at runtime in JavaScript.\n\n**Key Dynamic Features:**\n\n**1. Dynamic Typing:**\n```javascript\nlet variable = 42;        // number\nvariable = \"Hello\";       // now string\nvariable = true;          // now boolean\nvariable = { key: \"value\" }; // now object\n\n// No type declarations needed\nfunction add(a, b) {\n  return a + b; // Works with numbers, strings, etc.\n}\n```\n\n**2. Dynamic Property Addition/Removal:**\n```javascript\nconst obj = {};\n\n// Add properties dynamically\nobj.name = \"John\";\nobj[\"age\"] = 30;\nobj.greet = function() { return \"Hello!\"; };\n\n// Remove properties\ndelete obj.age;\n\nconsole.log(obj); // { name: \"John\", greet: [Function] }\n```\n\n**3. Dynamic Method Definition:**\n```javascript\nconst person = {\n  name: \"Alice\"\n};\n\n// Add methods at runtime\nperson.sayHello = function() {\n  return `Hello, I'm ${this.name}`;\n};\n\n// Modify existing methods\nif (someCondition) {\n  person.sayHello = function() {\n    return `Hi there, I'm ${this.name}!`;\n  };\n}\n```\n\n**4. Dynamic Code Execution:**\n```javascript\n// Execute code from strings\nconst code = \"console.log('Dynamic execution!')\";\neval(code); // Not recommended, but possible\n\n// Dynamic function creation\nconst dynamicFunction = new Function('a', 'b', 'return a + b');\nconsole.log(dynamicFunction(2, 3)); // 5\n```\n\n**5. Runtime Type Checking:**\n```javascript\nfunction processValue(value) {\n  if (typeof value === 'string') {\n    return value.toUpperCase();\n  } else if (typeof value === 'number') {\n    return value * 2;\n  } else if (Array.isArray(value)) {\n    return value.length;\n  }\n  return null;\n}\n```\n\n**6. Prototype Modification:**\n```javascript\n// Modify built-in prototypes (not recommended in production)\nString.prototype.reverse = function() {\n  return this.split('').reverse().join('');\n};\n\nconsole.log(\"hello\".reverse()); // \"olleh\"\n```\n\n**Benefits:**\n- **Flexibility:** Easy to adapt and modify code at runtime\n- **Rapid Development:** Less boilerplate, faster prototyping\n- **Expressiveness:** Can write concise, powerful code\n\n**Drawbacks:**\n- **Runtime Errors:** Type errors caught at runtime, not compile-time\n- **Performance:** Dynamic features can be slower than static alternatives\n- **Debugging:** Harder to track issues in highly dynamic code\n\n**Comparison with Static Languages:**\n```javascript\n// JavaScript (Dynamic)\nlet value = getUserInput(); // Could be anything\nif (value.length) { /* ... */ } // Runtime check\n\n// TypeScript/Java (Static)\n// String value = getUserInput(); // Type declared\n// if (value.length() > 0) { /* ... */ } // Compile-time safety\n```\n\nThis dynamic nature makes JavaScript very flexible but requires careful programming to avoid runtime errors."
    },
    {
      "id": 74,
      "question": "What is a regular expression",
      "answer": "A **regular expression (regex)** is a sequence of characters that defines a search pattern. In JavaScript, regex is used for pattern matching, searching, and replacing text within strings.\n\n**Creating Regular Expressions:**\n\n**1. Literal notation:**\n```javascript\nconst regex1 = /pattern/flags;\nconst regex2 = /hello/i; // Case-insensitive\n```\n\n**2. Constructor function:**\n```javascript\nconst regex3 = new RegExp('pattern', 'flags');\nconst regex4 = new RegExp('hello', 'i');\n```\n\n**Common Flags:**\n- `i` - Case-insensitive\n- `g` - Global (find all matches)\n- `m` - Multiline\n- `s` - Dot matches newlines\n- `u` - Unicode\n- `y` - Sticky\n\n**Basic Patterns:**\n```javascript\n// Literal characters\n/hello/          // Matches \"hello\"\n\n// Special characters\n/\\d/             // Matches any digit (0-9)\n/\\w/             // Matches any word character (a-z, A-Z, 0-9, _)\n/\\s/             // Matches any whitespace\n/./              // Matches any character except newline\n\n// Character classes\n/[abc]/          // Matches 'a', 'b', or 'c'\n/[a-z]/          // Matches any lowercase letter\n/[^abc]/         // Matches anything except 'a', 'b', or 'c'\n\n// Quantifiers\n/a+/             // One or more 'a'\n/a*/             // Zero or more 'a'\n/a?/             // Zero or one 'a'\n/a{2,4}/         // 2 to 4 'a's\n/a{3}/           // Exactly 3 'a's\n\n// Anchors\n/^hello/         // Starts with \"hello\"\n/world$/         // Ends with \"world\"\n```\n\n**Common Methods:**\n\n**1. test() - Check if pattern exists:**\n```javascript\nconst emailRegex = /^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,}$/;\nconsole.log(emailRegex.test('user@example.com')); // true\nconsole.log(emailRegex.test('invalid-email'));    // false\n```\n\n**2. match() - Find matches:**\n```javascript\nconst text = \"Call me at 123-456-7890 or 987-654-3210\";\nconst phoneRegex = /\\d{3}-\\d{3}-\\d{4}/g;\nconsole.log(text.match(phoneRegex)); // [\"123-456-7890\", \"987-654-3210\"]\n```\n\n**3. replace() - Replace matches:**\n```javascript\nconst text = \"Hello World\";\nconst result = text.replace(/[aeiou]/gi, '*'); // Replace vowels\nconsole.log(result); // \"H*ll* W*rld\"\n```\n\n**4. search() - Find position:**\n```javascript\nconst text = \"JavaScript is awesome\";\nconsole.log(text.search(/script/i)); // 4 (position of \"Script\")\n```\n\n**5. split() - Split string:**\n```javascript\nconst text = \"apple,banana;orange:grape\";\nconst fruits = text.split(/[,;:]/);\nconsole.log(fruits); // [\"apple\", \"banana\", \"orange\", \"grape\"]\n```\n\n**Practical Examples:**\n\n**Email validation:**\n```javascript\nfunction isValidEmail(email) {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n```\n\n**Extract numbers:**\n```javascript\nconst text = \"Price: $25.99, Tax: $3.50\";\nconst numbers = text.match(/\\d+\\.\\d+/g);\nconsole.log(numbers); // [\"25.99\", \"3.50\"]\n```\n\n**Format phone numbers:**\n```javascript\nfunction formatPhone(phone) {\n  const cleaned = phone.replace(/\\D/g, ''); // Remove non-digits\n  const match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/);\n  if (match) {\n    return `(${match[1]}) ${match[2]}-${match[3]}`;\n  }\n  return phone;\n}\n\nconsole.log(formatPhone('1234567890')); // \"(123) 456-7890\"\n```\n\nRegular expressions are powerful tools for text processing, validation, and data extraction in JavaScript."
    },
    {
      "id": 75,
      "question": "What are the string methods available in Regular expression",
      "answer": "JavaScript provides several string methods that work with regular expressions for pattern matching and text manipulation:\n\n**1. search() - Find position of first match**\n```javascript\nconst text = \"JavaScript is awesome\";\n\n// Returns index of first match, -1 if not found\nconsole.log(text.search(/script/i));      // 4\nconsole.log(text.search(/python/i));      // -1\nconsole.log(text.search(/is/));           // 11\n```\n\n**2. match() - Extract matches**\n```javascript\nconst text = \"Contact: john@email.com or jane@test.org\";\n\n// Without global flag - returns first match with details\nconst singleMatch = text.match(/\\w+@\\w+\\.\\w+/);\nconsole.log(singleMatch);\n// [\"john@email.com\", index: 9, input: \"Contact: john@email.com or jane@test.org\", groups: undefined]\n\n// With global flag - returns all matches\nconst allMatches = text.match(/\\w+@\\w+\\.\\w+/g);\nconsole.log(allMatches); // [\"john@email.com\", \"jane@test.org\"]\n```\n\n**3. matchAll() - Get iterator of all matches with details**\n```javascript\nconst text = \"Price: $25.99, Tax: $3.50, Total: $29.49\";\nconst regex = /\\$(\\d+)\\.(\\d+)/g;\n\n// Returns iterator with full match details\nfor (const match of text.matchAll(regex)) {\n  console.log(`Full: ${match[0]}, Dollars: ${match[1]}, Cents: ${match[2]}`);\n}\n// Full: $25.99, Dollars: 25, Cents: 99\n// Full: $3.50, Dollars: 3, Cents: 50\n// Full: $29.49, Dollars: 29, Cents: 49\n```\n\n**4. replace() - Replace matches**\n```javascript\nconst text = \"Hello World! Hello Universe!\";\n\n// Replace first match\nconst result1 = text.replace(/Hello/, \"Hi\");\nconsole.log(result1); // \"Hi World! Hello Universe!\"\n\n// Replace all matches (global flag)\nconst result2 = text.replace(/Hello/g, \"Hi\");\nconsole.log(result2); // \"Hi World! Hi Universe!\"\n\n// Using capture groups and replacement function\nconst phoneText = \"Call 123-456-7890 or 987-654-3210\";\nconst formatted = phoneText.replace(/(\\d{3})-(\\d{3})-(\\d{4})/g, '($1) $2-$3');\nconsole.log(formatted); // \"Call (123) 456-7890 or (987) 654-3210\"\n\n// Using function for complex replacement\nconst result3 = \"temperature: 25C, 30C, 15C\".replace(/\\d+C/g, (match) => {\n  const celsius = parseInt(match);\n  const fahrenheit = (celsius * 9/5) + 32;\n  return `${fahrenheit}F`;\n});\nconsole.log(result3); // \"temperature: 77F, 86F, 59F\"\n```\n\n**5. replaceAll() - Replace all matches (ES2021)**\n```javascript\nconst text = \"Hello World! Hello Universe!\";\n\n// Replace all occurrences (no need for global flag)\nconst result = text.replaceAll(/Hello/g, \"Hi\");\nconsole.log(result); // \"Hi World! Hi Universe!\"\n\n// Note: Must use global flag with regex, or use string\nconst result2 = text.replaceAll(\"Hello\", \"Hi\"); // Works with strings\n```\n\n**6. split() - Split string by pattern**\n```javascript\nconst data = \"apple,banana;orange:grape|cherry\";\n\n// Split by multiple delimiters\nconst fruits = data.split(/[,;:|]/);\nconsole.log(fruits); // [\"apple\", \"banana\", \"orange\", \"grape\", \"cherry\"]\n\n// Split with limit\nconst limited = data.split(/[,;:|]/, 3);\nconsole.log(limited); // [\"apple\", \"banana\", \"orange\"]\n\n// Split by whitespace\nconst sentence = \"  Hello    world   JavaScript  \";\nconst words = sentence.split(/\\s+/).filter(word => word.length > 0);\nconsole.log(words); // [\"Hello\", \"world\", \"JavaScript\"]\n```\n\n**Practical Examples:**\n\n**Extract all URLs:**\n```javascript\nconst text = \"Visit https://example.com or http://test.org for more info\";\nconst urls = text.match(/https?:\\/\\/[\\w.-]+/g);\nconsole.log(urls); // [\"https://example.com\", \"http://test.org\"]\n```\n\n**Clean and format text:**\n```javascript\nfunction cleanText(text) {\n  return text\n    .replace(/\\s+/g, ' ')           // Multiple spaces to single\n    .replace(/^\\s+|\\s+$/g, '')      // Trim whitespace\n    .replace(/[^\\w\\s.-]/g, '');     // Remove special characters\n}\n\nconsole.log(cleanText(\"  Hello!!!   World???  \")); // \"Hello World\"\n```\n\n**Validate and extract data:**\n```javascript\nfunction extractPhoneNumbers(text) {\n  const phoneRegex = /\\(?\\d{3}\\)?[-\\s]?\\d{3}[-\\s]?\\d{4}/g;\n  return text.match(phoneRegex) || [];\n}\n\nconst contact = \"Call (555) 123-4567 or 555.987.6543 for help\";\nconsole.log(extractPhoneNumbers(contact)); // [\"(555) 123-4567\", \"555.987.6543\"]\n```\n\nThese methods provide powerful text processing capabilities when combined with regular expressions."
    },
    {
      "id": 76,
      "question": "What is a cookie in a website",
      "answer": "**Cookies** are small pieces of data stored on the user's device (browser) by websites. They serve as a memory mechanism for web applications to recall stateful information about the user or their interactions with the website.\n\n**Key Characteristics of Cookies:**\n\n1. **Size Limitation**: Cookies are limited to about 4KB per domain.\n2. **Storage Location**: Stored on the client-side (user's browser).\n3. **Sent with Requests**: Automatically sent with every HTTP request to the same domain.\n4. **Domain Specific**: Can only be accessed by the domain that created them (unless configured otherwise).\n\n**Creating Cookies in JavaScript:**\n\n```javascript\n// Setting a basic cookie\ndocument.cookie = \"username=John\";  \n\n// With expiration date (required for persistence)\ndocument.cookie = \"username=John; expires=Thu, 18 Dec 2023 12:00:00 UTC\"; \n\n// With path specification\ndocument.cookie = \"username=John; path=/profile\"; \n\n// With domain specification\ndocument.cookie = \"username=John; domain=example.com\";\n\n// Setting a secure cookie (only sent over HTTPS)\ndocument.cookie = \"username=John; secure\";\n\n// Setting HttpOnly flag (inaccessible to JavaScript)\n// Note: Can only be set server-side\n```\n\n**Reading Cookies:**\n\n```javascript\n// Reading all cookies\nconst allCookies = document.cookie;\nconsole.log(allCookies); // \"username=John; theme=dark; sessionId=abc123\"\n\n// Parsing cookie value\nfunction getCookie(name) {\n  const cookieArr = document.cookie.split(\";\");\n  \n  for(let i = 0; i < cookieArr.length; i++) {\n    const cookiePair = cookieArr[i].trim().split(\"=\");\n    \n    if(cookiePair[0] === name) {\n      return decodeURIComponent(cookiePair[1]);\n    }\n  }\n  \n  return null;\n}\n\nconst username = getCookie(\"username\");\nconsole.log(username); // \"John\"\n```\n\n**Updating Cookies:**\n\n```javascript\n// Update by setting with the same name\ndocument.cookie = \"username=Jane\"; // Overwrites the \"username\" cookie\n```\n\n**Deleting Cookies:**\n\n```javascript\n// Delete by setting an expired date\ndocument.cookie = \"username=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n```\n\n**Cookie Attributes:**\n\n1. **expires/max-age**: Defines when the cookie expires\n   ```javascript\n   document.cookie = \"name=value; expires=Thu, 18 Dec 2023 12:00:00 UTC\";\n   document.cookie = \"name=value; max-age=31536000\"; // 1 year in seconds\n   ```\n\n2. **path**: Restricts cookie to a specific path\n   ```javascript\n   document.cookie = \"name=value; path=/products\";\n   ```\n\n3. **domain**: Specifies which domains can access the cookie\n   ```javascript\n   document.cookie = \"name=value; domain=.example.com\"; // Accessible to subdomains\n   ```\n\n4. **secure**: Only transmitted over HTTPS connections\n   ```javascript\n   document.cookie = \"name=value; secure\";\n   ```\n\n5. **HttpOnly**: Prevents JavaScript access to cookie (set by server)\n\n6. **SameSite**: Controls how cookies are sent with cross-origin requests\n   ```javascript\n   document.cookie = \"name=value; SameSite=Strict\";\n   document.cookie = \"name=value; SameSite=Lax\"; // Default in modern browsers\n   document.cookie = \"name=value; SameSite=None; Secure\"; // Cross-site cookies\n   ```\n\n**Common Use Cases:**\n\n1. **Session Management**: Storing session IDs to maintain logged-in state\n2. **Personalization**: Storing user preferences (e.g., theme, language)\n3. **Tracking**: Analyzing user behavior and site usage patterns\n4. **Shopping Carts**: Remembering items in a user's cart\n\n**Privacy and Regulations:**\n\nMany jurisdictions have regulations regarding cookies and user tracking:\n\n- **GDPR** (EU): Requires explicit consent for non-essential cookies\n- **CCPA** (California): Requires disclosure and opt-out options\n- **Cookie Consent Banners**: Commonly used to comply with regulations\n\n```javascript\n// Example of a simple cookie consent function\nfunction setCookieConsent(hasConsent) {\n  if (hasConsent) {\n    document.cookie = \"cookieConsent=true; max-age=31536000; path=/\";\n    enableAnalyticsCookies();\n  } else {\n    document.cookie = \"cookieConsent=false; max-age=31536000; path=/\";\n    disableAnalyticsCookies();\n  }\n}\n```\n\n**Limitations and Alternatives:**\n\n1. **Size**: Limited to ~4KB\n2. **Security**: Vulnerable to XSS attacks if not properly secured\n3. **Alternatives**:\n   - **Web Storage** (localStorage, sessionStorage): Larger storage capacity\n   - **IndexedDB**: For structured data storage\n   - **Web SQL**: SQL-based storage (deprecated)\n   - **Cache API**: For caching resources\n\nCookies remain an essential tool for stateful interactions on the web, despite newer storage technologies being available."
    },
    {
      "id": 77,
      "question": "Why do you need a Cookie",
      "answer": "**Why Cookies Are Needed in Web Development**\n\nCookies serve essential functions in modern web applications that would otherwise be impossible due to HTTP's stateless nature. Here are the key reasons why cookies are necessary:\n\n**1. Session Management**\n\nThe most fundamental reason for cookies is maintaining user sessions across page loads:\n\n```javascript\n// Server generates a session ID when user logs in\ndocument.cookie = \"sessionId=a3fWa; max-age=3600; path=/\";\n\n// On subsequent requests, the server can identify the user\n// through this sessionId cookie sent automatically with each request\n```\n\nWithout cookies, users would need to re-authenticate on every page load or action, creating a frustrating user experience.\n\n**2. Personalization**\n\nCookies enable websites to remember user preferences and settings:\n\n```javascript\n// Store user preferences\ndocument.cookie = \"theme=dark; max-age=31536000\"; // Persist for a year\ndocument.cookie = \"fontSize=large; max-age=31536000\";\ndocument.cookie = \"region=europe; max-age=31536000\";\n\n// Later retrieve and apply these settings\nconst theme = getCookie(\"theme\");\nif (theme === \"dark\") {\n  document.body.classList.add(\"dark-mode\");\n}\n```\n\nThis personalization creates tailored experiences without requiring users to reconfigure settings on each visit.\n\n**3. Shopping Carts & E-commerce**\n\nE-commerce sites use cookies to maintain shopping cart contents across sessions:\n\n```javascript\n// Add item to cart\nfunction addToCart(productId, quantity) {\n  let cart = getCookie(\"cart\");\n  cart = cart ? JSON.parse(cart) : {};\n  \n  cart[productId] = (cart[productId] || 0) + quantity;\n  \n  document.cookie = `cart=${JSON.stringify(cart)}; path=/; max-age=86400`;\n}\n```\n\nThis allows users to add items, navigate away, and return with their selections intact.\n\n**4. Authentication State**\n\nCookies maintain authentication state securely:\n\n```javascript\n// Server sets this after successful authentication\ndocument.cookie = \"authToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict\";\n```\n\nThe HttpOnly flag prevents JavaScript access, protecting against XSS attacks, while Secure ensures transmission only over HTTPS.\n\n**5. Analytics and Tracking**\n\nCookies enable site owners to understand user behavior:\n\n```javascript\n// Set unique visitor ID\nif (!getCookie(\"visitorId\")) {\n  const uniqueId = generateUniqueId();\n  document.cookie = `visitorId=${uniqueId}; max-age=31536000`;\n}\n\n// Track page views\nfunction trackPageView() {\n  const visitorId = getCookie(\"visitorId\");\n  const page = window.location.pathname;\n  \n  // Send to analytics server\n  navigator.sendBeacon(\"/analytics\", JSON.stringify({\n    visitorId,\n    page,\n    timestamp: new Date().toISOString()\n  }));\n}\n```\n\n**6. A/B Testing**\n\nCookies are crucial for consistent A/B test experiences:\n\n```javascript\n// Assign user to test variant\nfunction assignVariant() {\n  if (!getCookie(\"testVariant\")) {\n    const variant = Math.random() > 0.5 ? \"A\" : \"B\";\n    document.cookie = `testVariant=${variant}; max-age=2592000`; // 30 days\n    return variant;\n  }\n  return getCookie(\"testVariant\");\n}\n\nconst variant = assignVariant();\nif (variant === \"B\") {\n  document.querySelector(\".hero\").style.backgroundColor = \"blue\";\n}\n```\n\nThis ensures users consistently see the same variant throughout their browsing session.\n\n**7. Cross-Site Request Forgery (CSRF) Protection**\n\nCookies help protect against CSRF attacks:\n\n```javascript\n// Server generates token and sets as cookie\ndocument.cookie = \"csrfToken=a1b2c3d4e5f6; HttpOnly; SameSite=Lax\";\n\n// JavaScript retrieves token and adds to form submissions\nconst form = document.querySelector(\"form\");\nconst csrfInput = document.createElement(\"input\");\ncsrfInput.type = \"hidden\";\ncsrfInput.name = \"_csrf\";\ncsrfInput.value = getCookie(\"csrfToken\");\nform.appendChild(csrfInput);\n```\n\n**8. State Persistence in RESTful Services**\n\nRESTful APIs are stateless by design, but cookies provide a way to maintain state across requests:\n\n```javascript\n// Server sets cookies after initial API authentication\n// Subsequent API calls include these cookies automatically\nfetch('/api/user/profile', {\n  credentials: 'include' // Ensures cookies are sent\n})\n.then(response => response.json())\n.then(data => console.log(data));\n```\n\n**9. Language/Locale Preferences**\n\nRemembering language preferences improves user experience:\n\n```javascript\n// Set language preference\nfunction setLanguage(lang) {\n  document.cookie = `language=${lang}; path=/; max-age=31536000`;\n  document.documentElement.lang = lang;\n}\n\n// Apply stored language preference on page load\nconst savedLang = getCookie(\"language\") || navigator.language.split('-')[0] || \"en\";\ndocument.documentElement.lang = savedLang;\n```\n\n**10. Rate Limiting & Security**\n\nCookies help implement rate limiting and other security measures:\n\n```javascript\n// Server can track login attempts using cookies\ndocument.cookie = \"loginAttempts=1; max-age=3600\";\n\n// Increment with each failed attempt\nfunction incrementLoginAttempts() {\n  const attempts = parseInt(getCookie(\"loginAttempts\") || \"0\");\n  document.cookie = `loginAttempts=${attempts + 1}; max-age=3600`;\n  \n  // If too many attempts, lock account temporarily\n  if (attempts >= 5) {\n    document.cookie = \"accountLocked=true; max-age=1800\"; // 30 minutes\n  }\n}\n```\n\n**Alternatives to Cookies:**\n\nWhile cookies are essential, they do have alternatives for specific use cases:\n\n1. **Web Storage (localStorage/sessionStorage)** - For client-side storage without automatic transmission to server\n2. **IndexedDB** - For larger structured data storage needs\n3. **JWT in Authorization headers** - For API authentication\n4. **URL parameters** - For passing temporary state (less secure)\n\nHowever, for maintaining state across HTTP requests securely and efficiently, cookies remain the most appropriate solution."
    },
    {
      "id": 78,
      "question": "What are the differences between cookie, local storage and session storage",
      "answer": "# Cookies vs. localStorage vs. sessionStorage\n\nThese three browser storage mechanisms serve similar purposes but differ in key aspects. Here's a comprehensive comparison:\n\n## üç™ Cookies\n\n**Definition**: Small pieces of data stored by the browser and sent to the server with every HTTP request.\n\n**Key Characteristics:**\n\n```javascript\n// Creating a cookie\ndocument.cookie = \"username=John; expires=Thu, 18 Dec 2025 12:00:00 UTC; path=/\";\n\n// Reading cookies\nconst cookies = document.cookie; // Returns all cookies as one string\n\n// Deleting a cookie\ndocument.cookie = \"username=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n```\n\n- **Capacity**: ~4KB per cookie, typically limited to 20-50 cookies per domain\n- **Expiration**: Can set explicit expiration date; if not set, expires when the browser session ends\n- **Accessibility**: \n  - By default, accessible to all pages from the same domain\n  - Can restrict by path, domain, etc.\n  - Can be made HttpOnly (inaccessible to JavaScript)\n- **Server Communication**: Automatically sent to the server with every HTTP request via Cookie header\n- **API Complexity**: More complex API with string-based manipulation\n\n## üíæ localStorage\n\n**Definition**: Persistent client-side storage without expiration.\n\n**Key Characteristics:**\n\n```javascript\n// Storing data\nlocalStorage.setItem(\"username\", \"John\");\nlocalStorage.user = JSON.stringify({name: \"John\", role: \"admin\"});\n\n// Reading data\nconst username = localStorage.getItem(\"username\");\nconst user = JSON.parse(localStorage.user);\n\n// Removing data\nlocalStorage.removeItem(\"username\");\ndelete localStorage.user;\n\n// Clearing all data\nlocalStorage.clear();\n```\n\n- **Capacity**: ~5-10MB per domain\n- **Expiration**: Persists indefinitely until explicitly cleared\n- **Accessibility**: \n  - Available to any page from the same origin (protocol + domain + port)\n  - Not accessible across different domains/subdomains unless explicitly shared\n  - Always accessible to JavaScript\n- **Server Communication**: Never automatically sent to server\n- **API Complexity**: Simple key-value API with dedicated methods\n\n## ‚è±Ô∏è sessionStorage\n\n**Definition**: Similar to localStorage but limited to the current browser tab/window session.\n\n**Key Characteristics:**\n\n```javascript\n// Storing data\nsessionStorage.setItem(\"cartItems\", JSON.stringify([{id: 1, name: \"Product\"}]));\n\n// Reading data\nconst cartItems = JSON.parse(sessionStorage.getItem(\"cartItems\"));\n\n// Removing data\nsessionStorage.removeItem(\"cartItems\");\n\n// Clearing all data\nsessionStorage.clear();\n```\n\n- **Capacity**: ~5-10MB per domain\n- **Expiration**: Data cleared when the tab/window is closed\n- **Accessibility**: \n  - Limited to the exact tab/window where it was created\n  - Even separate tabs of the same site cannot access each other's sessionStorage\n  - Always accessible to JavaScript\n- **Server Communication**: Never automatically sent to server\n- **API Complexity**: Simple key-value API (identical to localStorage)\n\n## üìä Comparative Analysis\n\n### Storage Capacity\n\n```\nCookies:        ~4KB\nlocalStorage:   ~5-10MB\nsessionStorage: ~5-10MB\n```\n\n### Data Persistence\n\n```\nCookies:        Custom expiration or session-based\nlocalStorage:   Permanent until explicitly deleted\nsessionStorage: Tab/window session only\n```\n\n### Server Communication\n\n```\nCookies:        Sent with every HTTP request\nlocalStorage:   Never sent automatically\nsessionStorage: Never sent automatically\n```\n\n### Security Considerations\n\n**Cookies:**\n- Can be made secure (HTTPS only)\n- Can be HttpOnly (inaccessible to JavaScript)\n- Can have SameSite attribute to prevent CSRF\n- Vulnerable to CSRF if not protected\n\n```javascript\ndocument.cookie = \"sessionId=abc123; HttpOnly; Secure; SameSite=Strict\";\n```\n\n**localStorage/sessionStorage:**\n- Always accessible to JavaScript (XSS vulnerability)\n- Not automatically sent with requests (no CSRF risk)\n- Same-origin policy protection by default\n\n### Use Cases\n\n**Cookies are best for:**\n- Authentication tokens (with HttpOnly flag)\n- Server-side session management\n- Tracking user behavior across pages\n- Scenarios where data needs to be accessible both client and server-side\n\n**localStorage is best for:**\n- Persistent preferences/settings\n- Cached application data\n- Offline application data\n- Any data that should persist between sessions\n\n```javascript\n// Storing user preferences\nlocalStorage.setItem(\"theme\", \"dark\");\nlocalStorage.setItem(\"fontSize\", \"large\");\n\n// Storing cached API responses\nfunction cacheApiData(key, data, ttl) {\n  const item = {\n    data,\n    expiry: Date.now() + ttl\n  };\n  localStorage.setItem(key, JSON.stringify(item));\n}\n```\n\n**sessionStorage is best for:**\n- Form data during a multi-step process\n- Shopping cart during a session\n- Temporary user states that shouldn't persist between sessions\n- Per-tab settings in web applications\n\n```javascript\n// Storing form progress\nsessionStorage.setItem(\"registrationStep\", \"2\");\nsessionStorage.setItem(\"formData\", JSON.stringify({\n  name: \"John\",\n  email: \"john@example.com\"\n}));\n```\n\n### Performance Impact\n\n**Cookies:**\n- Increase network load (sent with every request)\n- Minimal impact on client-side performance\n\n**localStorage/sessionStorage:**\n- No impact on network traffic\n- Synchronous API can block the main thread with large operations\n\n```javascript\n// Potentially blocking operation with large data\nconst hugeData = localStorage.getItem(\"largeDataset\"); // Blocks UI thread\n\n// Better approach for large data\nsetTimeout(() => {\n  const hugeData = localStorage.getItem(\"largeDataset\");\n  processData(hugeData);\n}, 0);\n```\n\n## Advanced Usage Patterns\n\n### Storage Event Listening (localStorage)\n\n```javascript\n// This event fires in other tabs when localStorage changes\nwindow.addEventListener('storage', (event) => {\n  console.log(`Key ${event.key} changed from ${event.oldValue} to ${event.newValue}`);\n  \n  // Update UI based on the change\n  if (event.key === 'theme') {\n    applyTheme(event.newValue);\n  }\n});\n```\n\n### Storage Abstraction with Expiry Support\n\n```javascript\nconst storage = {\n  set(key, value, ttl = null) {\n    const item = {\n      value,\n      expiry: ttl ? Date.now() + ttl : null,\n    };\n    localStorage.setItem(key, JSON.stringify(item));\n  },\n  \n  get(key) {\n    const itemStr = localStorage.getItem(key);\n    if (!itemStr) return null;\n    \n    const item = JSON.parse(itemStr);\n    if (item.expiry && Date.now() > item.expiry) {\n      localStorage.removeItem(key);\n      return null;\n    }\n    \n    return item.value;\n  }\n};\n\n// Usage\nstorage.set('user', {name: 'John'}, 3600000); // 1 hour expiry\nconst user = storage.get('user');\n```\n\n### Fallback Pattern\n\n```javascript\nfunction storeData(key, value) {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch (e) {\n    // localStorage might be full or disabled\n    console.warn(\"localStorage failed, falling back to cookie\", e);\n    document.cookie = `${key}=${JSON.stringify(value)};path=/;max-age=31536000`;\n  }\n}\n\nfunction getData(key) {\n  try {\n    const value = localStorage.getItem(key);\n    return value ? JSON.parse(value) : null;\n  } catch (e) {\n    // Try to get from cookie\n    const match = document.cookie.match(new RegExp(`${key}=([^;]+)`));\n    return match ? JSON.parse(match[1]) : null;\n  }\n}\n```\n\nIn modern web development, most applications use a combination of all three storage mechanisms for different purposes, leveraging their unique strengths while being mindful of their limitations and security implications."
    },
    {
      "id": 79,
      "question": "What is the difference between local storage and session storage",
      "answer": "# localStorage vs. sessionStorage\n\nBoth `localStorage` and `sessionStorage` are part of the Web Storage API, providing similar functionality with key differences in data persistence and session handling. Here's a detailed comparison:\n\n## Core Similarities\n\n**1. API and Usage Pattern**\n\nBoth storage types share identical methods and properties:\n\n```javascript\n// Basic operations (identical for both localStorage and sessionStorage)\n\n// Storing data\nstorage.setItem('key', 'value');\nstorage['key'] = 'value';  // Property access syntax\n\n// Retrieving data\nconst value = storage.getItem('key');\nconst value2 = storage['key'];  // Property access syntax\n\n// Checking if a key exists\nif (storage.getItem('key') !== null) { /* exists */ }\n\n// Removing a specific item\nstorage.removeItem('key');\ndelete storage['key'];  // Property access syntax\n\n// Clearing all data\nstorage.clear();\n\n// Getting the number of items\nconst itemCount = storage.length;\n\n// Iterating through all items\nfor (let i = 0; i < storage.length; i++) {\n  const key = storage.key(i);\n  const value = storage.getItem(key);\n  console.log(`${key}: ${value}`);\n}\n\n// Using for...in loop (includes prototype properties, rarely used)\nfor (let key in storage) {\n  if (storage.hasOwnProperty(key)) {\n    console.log(`${key}: ${storage.getItem(key)}`);\n  }\n}\n```\n\n**2. Storage Capacity**\n\nBoth typically offer 5-10MB of storage per origin (exact limit varies by browser).\n\n**3. Storage Scope**\n\nBoth are restricted by the same-origin policy (protocol + hostname + port).\n\n**4. Data Types**\n\nBoth can only store string values, requiring serialization for complex data types:\n\n```javascript\n// Storing objects (works the same in both storage types)\nconst user = { \n  id: 1, \n  name: \"John\",\n  preferences: {\n    theme: \"dark\",\n    fontSize: \"large\"\n  }\n};\n\n// Must serialize objects to store them\nlocalStorage.setItem('user', JSON.stringify(user));\n// or\nsessionStorage.setItem('user', JSON.stringify(user));\n\n// Retrieving and parsing\nconst retrievedUser = JSON.parse(localStorage.getItem('user'));\n// or\nconst sessionUser = JSON.parse(sessionStorage.getItem('user'));\n```\n\n## Key Differences\n\n### 1. Persistence Duration\n\n**localStorage:**\n- Data persists indefinitely until explicitly removed\n- Survives browser restarts and computer reboots\n- Only cleared by JavaScript, clearing browser data, or browser settings\n\n```javascript\n// Data stored here will persist indefinitely\nlocalStorage.setItem('userTheme', 'dark');\nlocalStorage.setItem('hasSeenTutorial', 'true');\n```\n\n**sessionStorage:**\n- Data persists only for the duration of the page session\n- Cleared when the tab/window is closed\n- Not shared between tabs (even of the same origin)\n\n```javascript\n// Data stored here will be gone when tab is closed\nsessionStorage.setItem('currentPageData', JSON.stringify(pageState));\nsessionStorage.setItem('formProgress', '3'); // e.g., step 3 of a wizard\n```\n\n### 2. Session/Tab Isolation\n\n**localStorage:**\n- Shared across all tabs and windows from the same origin\n- Changes in one tab are visible to other tabs immediately (via storage events)\n\n```javascript\n// In tab 1: Set a value\nlocalStorage.setItem('theme', 'dark');\n\n// In tab 2: Can access the same value\nconsole.log(localStorage.getItem('theme')); // \"dark\"\n```\n\n**sessionStorage:**\n- Isolated to the specific tab/window where it was created\n- Each tab has its own independent sessionStorage\n- Even opening the same URL in a new tab creates a fresh sessionStorage\n\n```javascript\n// In tab 1: Set a value\nsessionStorage.setItem('currentFilter', 'newest');\n\n// In tab 2 (same URL): No access to tab 1's data\nconsole.log(sessionStorage.getItem('currentFilter')); // null\n```\n\n### 3. Window/Tab Creation Behavior\n\n**localStorage:**\n- Consistent across all contexts of the same origin\n\n**sessionStorage:**\n- New tabs created via `window.open()` inherit the sessionStorage from the opener\n- Tabs opened via Ctrl+Click or new tab/window do not inherit sessionStorage\n\n```javascript\n// In original tab\nsessionStorage.setItem('sessionData', 'important');\n\n// Open new tab programmatically\nconst newTab = window.open('same-url.html', '_blank');\n// New tab will inherit sessionStorage\n\n// But a manually opened tab will not have this data\n```\n\n### 4. Storage Events\n\n**localStorage:**\n- Changes trigger the storage event in other tabs/windows\n- Allows for cross-tab communication\n\n```javascript\n// In tab 1: Listen for changes made in other tabs\nwindow.addEventListener('storage', (event) => {\n  console.log(`Key changed: ${event.key}`);\n  console.log(`Old value: ${event.oldValue}`);\n  console.log(`New value: ${event.newValue}`);\n  console.log(`Storage area: ${event.storageArea}`);\n  console.log(`URL: ${event.url}`);\n  \n  // Update UI based on changes from other tabs\n  if (event.key === 'userLoggedIn') {\n    updateLoginStatus(event.newValue === 'true');\n  }\n});\n\n// In tab 2: Make a change that triggers the event in tab 1\nlocalStorage.setItem('userLoggedIn', 'true');\n```\n\n**sessionStorage:**\n- Changes do not trigger storage events in other contexts\n- No built-in way to communicate between tabs via sessionStorage\n\n## Use Case Scenarios\n\n### Appropriate for localStorage:\n\n**1. User Preferences**\n```javascript\nlocalStorage.setItem('theme', 'dark');\nlocalStorage.setItem('fontSize', 'large');\nlocalStorage.setItem('sidebarCollapsed', 'true');\n```\n\n**2. Cached Data**\n```javascript\n// Store API responses with expiry time\nfunction cacheApiData(key, data, ttlMinutes = 60) {\n  const item = {\n    value: data,\n    expiry: Date.now() + (ttlMinutes * 60 * 1000)\n  };\n  localStorage.setItem(key, JSON.stringify(item));\n}\n\nfunction getCachedData(key) {\n  const itemStr = localStorage.getItem(key);\n  if (!itemStr) return null;\n  \n  const item = JSON.parse(itemStr);\n  if (Date.now() > item.expiry) {\n    localStorage.removeItem(key);\n    return null;\n  }\n  return item.value;\n}\n```\n\n**3. Offline Application Data**\n```javascript\n// Store data for offline use\nlocalStorage.setItem('offlineArticles', JSON.stringify(articlesData));\nlocalStorage.setItem('lastSyncTimestamp', Date.now().toString());\n```\n\n**4. Authentication Status (non-sensitive)**\n```javascript\n// Store non-sensitive auth info (actual auth should use HttpOnly cookies)\nlocalStorage.setItem('userLoggedIn', 'true');\nlocalStorage.setItem('username', 'johndoe');\nlocalStorage.setItem('lastActive', Date.now().toString());\n```\n\n### Appropriate for sessionStorage:\n\n**1. Form Data During Navigation**\n```javascript\n// Save form progress as user navigates multi-page form\nfunction saveFormProgress(step, formData) {\n  sessionStorage.setItem('formStep', step.toString());\n  sessionStorage.setItem('formData', JSON.stringify(formData));\n}\n\nfunction loadFormProgress() {\n  const step = sessionStorage.getItem('formStep') || '1';\n  const formData = JSON.parse(sessionStorage.getItem('formData') || '{}');\n  return { step: parseInt(step), formData };\n}\n```\n\n**2. Shopping Cart for Current Session**\n```javascript\nfunction addToSessionCart(productId, quantity) {\n  const cart = JSON.parse(sessionStorage.getItem('cart') || '{}');\n  cart[productId] = (cart[productId] || 0) + quantity;\n  sessionStorage.setItem('cart', JSON.stringify(cart));\n}\n```\n\n**3. Wizard/Onboarding Flow State**\n```javascript\n// Track onboarding progress within current session\nsessionStorage.setItem('onboardingStep', '2');\nsessionStorage.setItem('seenFeatures', JSON.stringify(['dashboard', 'profile']));\n```\n\n**4. Tab-Specific UI State**\n```javascript\n// Remember scroll position or UI state just for this tab\nwindow.addEventListener('scroll', () => {\n  sessionStorage.setItem('scrollPosition', window.scrollY.toString());\n});\n\n// On page load\nconst savedScroll = parseInt(sessionStorage.getItem('scrollPosition') || '0');\nif (savedScroll > 0) {\n  window.scrollTo(0, savedScroll);\n}\n```\n\n## Best Practices for Both\n\n**1. Error Handling**\n```javascript\nfunction safelyStoreData(storage, key, value) {\n  try {\n    storage.setItem(key, value);\n    return true;\n  } catch (e) {\n    // Handle QuotaExceededError or other storage errors\n    console.error('Storage failed:', e);\n    if (e.name === 'QuotaExceededError') {\n      alert('Storage full. Please clear some space.');\n      // Possibly clear older items\n    }\n    return false;\n  }\n}\n```\n\n**2. Type Safety**\n```javascript\nfunction storageWrapper(storage) {\n  return {\n    setObject(key, value) {\n      storage.setItem(key, JSON.stringify(value));\n    },\n    getObject(key) {\n      try {\n        return JSON.parse(storage.getItem(key)) || null;\n      } catch (e) {\n        console.error(`Error parsing ${key}:`, e);\n        return null;\n      }\n    },\n    setNumber(key, value) {\n      storage.setItem(key, value.toString());\n    },\n    getNumber(key) {\n      return parseFloat(storage.getItem(key)) || 0;\n    },\n    setBoolean(key, value) {\n      storage.setItem(key, value ? 'true' : 'false');\n    },\n    getBoolean(key) {\n      return storage.getItem(key) === 'true';\n    }\n  };\n}\n\nconst localStore = storageWrapper(localStorage);\nconst sessionStore = storageWrapper(sessionStorage);\n\n// Usage\nlocalStore.setObject('user', {name: 'John', id: 123});\nlocalStore.setBoolean('darkMode', true);\n```\n\nIn summary, while both APIs share the same interface and capabilities, the key distinction is that `localStorage` provides persistent storage across browser sessions, while `sessionStorage` provides temporary storage limited to a single browser tab session."
    },
    {
      "id": 80,
      "question": "What is a promise",
      "answer": "A Promise is a JavaScript object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. It acts as a placeholder for a value that may not be available yet but will be resolved in the future.\n\nA Promise can be in one of three states:\n\n- **pending**: Initial state, neither fulfilled nor rejected.\n- **fulfilled**: The operation completed successfully.\n- **rejected**: The operation failed (e.g., due to a network error).\n\n**Promise Syntax**\n```javascript\nconst promise = new Promise(function (resolve, reject) {\n  // Perform async operation\n});\n```\n\n**Example: Creating and Using a Promise**\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"I'm a Promise!\");\n  }, 5000);\n});\n\npromise\n  .then((value) => console.log(value))  // Logs after 5 seconds: \"I'm a Promise!\"\n  .catch((error) => console.error(error))  // Handles any rejection\n  .finally(() => console.log(\"Done\"));     // Runs regardless of success or failure\n```\n\nIn the above example:\n- A Promise is created to handle an asynchronous operation with resolve and reject callbacks.\n- The setTimeout resolves the promise with a value after 5 seconds.\n- `.then()`, `.catch()`, and `.finally()` are used to handle success, errors, and cleanup respectively."
    },
    {
      "id": 81,
      "question": "Why do you need a promise",
      "answer": "Promises are used to handle asynchronous operations, especially in languages like JavaScript, which often work with non-blocking operations such as network requests, file I/O, and timers. When an operation is asynchronous, it doesn't immediately return a result; instead, it works in the background and provides the result later. Handling this in a clean, organized way can be difficult without a structured approach.\n\nPromises are used to:\n\n- **Handle asynchronous operations.**\n- **Provide a cleaner alternative to callbacks.**\n- **Avoid callback hell.**\n- **Make code more readable and maintainable.**"
    },
    {
      "id": 82,
      "question": "Explain the three states of promise",
      "answer": "Promises have three states:\n\n- **Pending**: This is an initial state of the Promise before an operation begins\n- **Fulfilled**: This state indicates that the specified operation was completed.\n- **Rejected**: This state indicates that the operation did not complete. In this case an error value will be thrown."
    },
    {
      "id": 83,
      "question": "What is a callback function",
      "answer": "A callback function is a function passed into another function as an argument. This function is invoked inside the outer function to complete an action. Let's take a simple example of how to use callback function\n\n```javascript\nfunction callbackFunction(name) {\n  console.log(\"Hello \" + name);\n}\n\nfunction outerFunction(callback) {\n  let name = prompt(\"Please enter your name.\");\n  callback(name);\n}\n\nouterFunction(callbackFunction);\n```"
    },
    {
      "id": 84,
      "question": "Why do we need callbacks",
      "answer": "The callbacks are needed because javascript is an event driven language. That means instead of waiting for a response, javascript will keep executing while listening for other events. Let's take an example with the first function invoking an API call(simulated by setTimeout) and the next function which logs the message.\n\n```javascript\nfunction firstFunction() {\n  // Simulate a code delay\n  setTimeout(function () {\n    console.log(\"First function called\");\n  }, 1000);\n}\nfunction secondFunction() {\n  console.log(\"Second function called\");\n}\nfirstFunction();\nsecondFunction();\n\n// Output:\n// Second function called\n// First function called\n```\n\nAs observed from the output, javascript didn't wait for the response of the first function and the remaining code block got executed. So callbacks are used in a way to make sure that certain code doesn't execute until the other code finishes execution."
    },
    {
      "id": 85,
      "question": "What is a callback hell",
      "answer": "Callback Hell is an anti-pattern with multiple nested callbacks which makes code hard to read and debug when dealing with asynchronous logic. The callback hell looks like below,\n\n```javascript\nasync1(function(){\n    async2(function(){\n        async3(function(){\n            async4(function(){\n                ....\n            });\n        });\n    });\n});\n```"
    },
    {
      "id": 86,
      "question": "What are server-sent events",
      "answer": "Server-sent events (SSE) is a server push technology enabling a browser to receive automatic updates from a server via HTTP connection without resorting to polling. These are a one way communications channel - events flow from server to client only. This has been used in Facebook/Twitter/X updates, stock price updates, news feeds etc."
    },
    {
      "id": 87,
      "question": "How do you receive server-sent event notifications",
      "answer": "The EventSource object is used to receive server-sent event notifications. For example, you can receive messages from server as below,\n\n```javascript\nif (typeof EventSource !== \"undefined\") {\n  var source = new EventSource(\"sse_generator.js\");\n  source.onmessage = function (event) {\n    document.getElementById(\"output\").innerHTML += event.data + \"<br>\";\n  };\n}\n```"
    },
    {
      "id": 88,
      "question": "How do you check browser support for server-sent events",
      "answer": "You can perform browser support for server-sent events before using it as below,\n\n```javascript\nif (typeof EventSource !== \"undefined\") {\n  // Server-sent events supported. Let's have some code here!\n} else {\n  // No server-sent events supported\n}\n```"
    },
    {
      "id": 89,
      "question": "What are the events available for server sent events",
      "answer": "Below are the list of events available for server sent events:\n\n| Event | Description |\n|-------|-------------|\n| **onopen** | It is used when a connection to the server is opened |\n| **onmessage** | This event is used when a message is received |\n| **onerror** | It happens when an error occurs |"
    },
    {
      "id": 90,
      "question": "What are the main rules of promise",
      "answer": "A promise must follow a specific set of rules:\n\n- A promise is an object that supplies a standard-compliant `.then()` method\n- A pending promise may transition into either fulfilled or rejected state\n- A fulfilled or rejected promise is settled and it must not transition into any other state.\n- Once a promise is settled, the value must not change."
    },
    {
      "id": 91,
      "question": "What is callback in callback",
      "answer": "You can nest one callback inside in another callback to execute the actions sequentially one by one. This is known as callbacks in callbacks. Beware, too many levels of nesting lead to Callback hell\n\n```javascript\nloadScript(\"/script1.js\", function (script) {\n  console.log(\"first script is loaded\");\n\n  loadScript(\"/script2.js\", function (script) {\n    console.log(\"second script is loaded\");\n\n    loadScript(\"/script3.js\", function (script) {\n      console.log(\"third script is loaded\");\n      // after all scripts are loaded\n    });\n  });\n});\n```"
    },
    {
      "id": 92,
      "question": "What is promise chaining",
      "answer": "The process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining. Let's take an example of promise chaining for calculating the final result:\n\n```javascript\nnew Promise(function (resolve, reject) {\n  setTimeout(() => resolve(1), 1000);\n})\n  .then(function (result) {\n    console.log(result); // 1\n    return result * 2;\n  })\n  .then(function (result) {\n    console.log(result); // 2\n    return result * 3;\n  })\n  .then(function (result) {\n    console.log(result); // 6\n    return result * 4;\n  });\n```\n\nIn the above handlers, the result is passed to the chain of `.then()` handlers with the below work flow:\n\n1. The initial promise resolves in 1 second,\n2. After that `.then` handler is called by logging the result(1) and then return a promise with the value of result * 2.\n3. After that the value passed to the next `.then` handler by logging the result(2) and return a promise with result * 3.\n4. Finally the value passed to the last `.then` handler by logging the result(6) and return a promise with result * 4."
    },
    {
      "id": 93,
      "question": "What is promise.all",
      "answer": "Promise.all is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all the promises get resolved or any one of them gets rejected. For example, the syntax of promise.all method is below:\n\n```javascript\nPromise.all([Promise1, Promise2, Promise3])\n  .then(result => {\n    console.log(result);\n  })\n  .catch(error => console.log(`Error in promises ${error}`));\n```\n\n**Note:** Remember that the order of the promises(output the result) is maintained as per input order."
    },
    {
      "id": 94,
      "question": "What is the purpose of the race method in promise",
      "answer": "Promise.race() method will return the promise instance which is firstly resolved or rejected. Let's take an example of race() method where promise2 is resolved first:\n\n```javascript\nvar promise1 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 500, \"one\");\n});\nvar promise2 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 100, \"two\");\n});\n\nPromise.race([promise1, promise2]).then(function (value) {\n  console.log(value); // \"two\" // Both promises will resolve, but promise2 is faster\n});\n```"
    },
    {
      "id": 95,
      "question": "What is a strict mode in javascript",
      "answer": "JavaScript's \"use strict\" directive is used to opt into a stricter parsing and error-handling mode for your scripts or functions. It helps catch common bugs, makes your code more secure, and prepares it for future versions of JavaScript.\n\nStrict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a \"strict\" operating context. This way it prevents certain actions from being taken and throws more exceptions. The literal expression \"use strict\"; instructs the browser to use the javascript code in the Strict mode. This also enables block-scoped variables."
    },
    {
      "id": 96,
      "question": "Why do you need strict mode",
      "answer": "Strict mode is useful to write \"secure\" JavaScript by notifying \"bad syntax\" into real errors. For example, it eliminates accidentally creating a global variable by throwing an error and also throws an error for assignment to a non-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing object."
    },
    {
      "id": 97,
      "question": "How do you declare strict mode",
      "answer": "The strict mode is declared by adding \"use strict\"; to the beginning of a script or a function. If declared at the beginning of a script, it has global scope.\n\n```javascript\n\"use strict\";\nx = 3.14; // This will cause an error because x is not declared\n```\n\nand if you declare inside a function, it has local scope:\n\n```javascript\nx = 3.14; // This will not cause an error.\nmyFunction();\n\nfunction myFunction() {\n  \"use strict\";\n  y = 3.14; // This will cause an error\n}\n```"
    },
    {
      "id": 98,
      "question": "What is the purpose of double exclamation",
      "answer": "The double exclamation or negation(!!) ensures the resulting type is a boolean. If it was falsey (e.g. 0, null, undefined, etc.), it will be false, otherwise, it will be true. For example, you can test IE version using this expression as below:\n\n```javascript\nlet isIE8 = false;\nisIE8 = !!navigator.userAgent.match(/MSIE 8.0/);\nconsole.log(isIE8); // returns true or false\n```\n\nIf you don't use this expression then it returns the original value.\n\n```javascript\nconsole.log(navigator.userAgent.match(/MSIE 8.0/)); // returns either an Array or null\n```\n\n**Note:** The expression !! is not an operator, but it is just twice of ! operator."
    },
    {
      "id": 99,
      "question": "What is the purpose of the delete operator",
      "answer": "The delete operator is used to delete the property as well as its value.\n\n```javascript\nvar user = { firstName: \"John\", lastName: \"Doe\", age: 20 };\ndelete user.age;\n\nconsole.log(user); // {firstName: \"John\", lastName:\"Doe\"}\n```"
    },
    {
      "id": 100,
      "question": "What is typeof operator",
      "answer": "You can use the JavaScript typeof operator to find the type of a JavaScript variable. It returns the type of a variable or an expression.\n\n```javascript\ntypeof \"John Abraham\"; // Returns \"string\"\ntypeof (1 + 2); // Returns \"number\"\ntypeof [1, 2, 3]; // Returns \"object\" because all arrays are also objects\n```"
    },
    {
      "id": 101,
      "question": "What is undefined property",
      "answer": "The undefined property indicates that a variable has not been assigned a value, or declared but not initialized at all. The type of undefined value is undefined too.\n\n```javascript\nvar user; // Value is undefined, type is undefined\nconsole.log(typeof user); //undefined\n```\n\nAny variable can be emptied by setting the value to undefined.\n\n```javascript\nuser = undefined;\n```"
    },
    {
      "id": 102,
      "question": "What is null value",
      "answer": "The value null represents the intentional absence of any object value. It is one of JavaScript's primitive values. The type of null value is object. You can empty the variable by setting the value to null.\n\n```javascript\nvar user = null;\nconsole.log(typeof user); //object\n```"
    },
    {
      "id": 103,
      "question": "What is the difference between null and undefined",
      "answer": "Below are the main differences between null and undefined:\n\n| **Null** | **Undefined** |\n|----------|---------------|\n| It is an assignment value which indicates that variable points to no object. | It is not an assignment value where a variable has been declared but has not yet been assigned a value. |\n| Type of null is object | Type of undefined is undefined |\n| The null value is a primitive value that represents the null, empty, or non-existent reference. | The undefined value is a primitive value used when a variable has not been assigned a value. |\n| Indicates the absence of a value for a variable | Indicates absence of variable itself |\n| Converted to zero (0) while performing primitive operations | Converted to NaN while performing primitive operations |"
    },
    {
      "id": 104,
      "question": "What is eval",
      "answer": "The eval() function evaluates JavaScript code represented as a string. The string can be a JavaScript expression, variable, statement, or sequence of statements.\n\n```javascript\nconsole.log(eval(\"1 + 2\")); //  3\n```"
    },
    {
      "id": 105,
      "question": "What is the difference between window and document",
      "answer": "Below are the main differences between window and document:\n\n| **Window** | **Document** |\n|------------|---------------|\n| It is the root level element in any web page | It is the direct child of the window object. This is also known as Document Object Model (DOM) |\n| By default window object is available implicitly in the page | You can access it via window.document or document. |\n| It has methods like alert(), confirm() and properties like document, location | It provides methods like getElementById, getElementsByTagName, createElement etc |"
    },
    {
      "id": 106,
      "question": "How do you access history in javascript",
      "answer": "The window.history object contains the browser's history. You can load previous and next URLs in the history using back() and next() methods.\n\n```javascript\nfunction goBack() {\n  window.history.back();\n}\nfunction goForward() {\n  window.history.forward();\n}\n```\n\n**Note:** You can also access history without window prefix."
    },
    {
      "id": 107,
      "question": "How do you detect caps lock key turned on or not",
      "answer": "The mouseEvent getModifierState() is used to return a boolean value that indicates whether the specified modifier key is activated or not. The modifiers such as CapsLock, ScrollLock and NumLock are activated when they are clicked, and deactivated when they are clicked again.\n\nLet's take an input element to detect the CapsLock on/off behavior with an example:\n\n```html\n<input type=\"password\" onmousedown=\"enterInput(event)\" />\n\n<p id=\"feedback\"></p>\n\n<script>\n  function enterInput(e) {\n    var flag = e.getModifierState(\"CapsLock\");\n    if (flag) {\n      document.getElementById(\"feedback\").innerHTML = \"CapsLock activated\";\n    } else {\n      document.getElementById(\"feedback\").innerHTML =\n        \"CapsLock not activated\";\n    }\n  }\n</script>\n```"
    },
    {
      "id": 108,
      "question": "What is isNaN",
      "answer": "The isNaN() function is used to determine whether a value is an illegal number (Not-a-Number) or not. i.e, This function returns true if the value equates to NaN. Otherwise it returns false.\n\n```javascript\nisNaN(\"Hello\"); //true\nisNaN(\"100\"); //false\n```"
    },
    {
      "id": 109,
      "question": "What are the differences between undeclared and undefined variables",
      "answer": "Below are the major differences between undeclared(not defined) and undefined variables:\\n\\n| **undeclared** | **undefined** |\\n|----------------|---------------|\\n| These variables do not exist in a program and are not declared | These variables declared in the program but have not assigned any value |\\n| If you try to read the value of an undeclared variable, then a runtime error is encountered | If you try to read the value of an undefined variable, an undefined value is returned. |\\n\\n```javascript\\nvar a;\\na; // yields undefined\\n\\nb; // Throws runtime error like \\\"Uncaught ReferenceError: b is not defined\\\"\\n```\\n\\nThis can be confusing, because it says \\\"not defined\\\" instead of \\\"not declared\\\" (Chrome)"
    },
    {
      "id": 110,
      "question": "What are global variables",
      "answer": "Global variables are those that are available throughout the length of the code without any scope. The var keyword is used to declare a local variable but if you omit it then it will become global variable\n\n```javascript\nmsg = \"Hello\"; // var is missing, it becomes global variable\n```"
    },
    {
      "id": 111,
      "question": "What are the problems with global variables",
      "answer": "The problem with global variables is the conflict of variable names of local and global scope. It is also difficult to debug and test the code that relies on global variables."
    },
    {
      "id": 112,
      "question": "What is NaN property",
      "answer": "The NaN property is a global property that represents \"Not-a-Number\" value. i.e, It indicates that a value is not a legal number. It is very rare to use NaN in a program but it can be used as return value for few cases\n\n```javascript\nMath.sqrt(-1);\nparseInt(\"Hello\");\n```"
    },
    {
      "id": 113,
      "question": "What is the purpose of isFinite function",
      "answer": "The isFinite() function is used to determine whether a number is a finite, legal number. It returns false if the value is +infinity, -infinity, or NaN (Not-a-Number), otherwise it returns true.\n\n```javascript\nisFinite(Infinity); // false\nisFinite(NaN); // false\nisFinite(-Infinity); // false\n\nisFinite(100); // true\n```"
    },
    {
      "id": 114,
      "question": "What is an event flow",
      "answer": "Event flow refers to the order in which events are handled in the browser when a user interacts with elements on a webpage like clicking, typing, hovering, etc.\n\nWhen you click an element that is nested in various other elements, before your click actually reaches its destination, or target element, it must trigger the click event for each of its parent elements first, starting at the top with the global window object.\n\nHence, there are three phases in JavaScript's event flow:\n\n1. **Event Capturing(Top to Bottom)**: The event starts from the window/document and moves down the DOM tree toward the target element.\n2. **Target phase**: The event reaches the target element ‚Äî the element that was actually interacted with.\n3. **Event Bubbling(Bottom to Top)**: The event then bubbles back up from the target element to the root."
    },
    {
      "id": 115,
      "question": "What is event capturing",
      "answer": "Event capturing is a phase of event propagation in which an event is first intercepted by the outermost ancestor element, then travels downward through the DOM hierarchy until it reaches the target (innermost) element.\n\nTo handle events during the capturing phase, you need to pass true as the third argument to the addEventListener method.\n\n```html\n<div>\n  <button class=\"child\">Hello</button>\n</div>\n\n<script>\n  const parent = document.querySelector(\"div\");\n  const child = document.querySelector(\".child\");\n\n  // Capturing phase: parent listener (runs first)\n  parent.addEventListener(\"click\", function () {\n    console.log(\"Parent (capturing)\");\n  }, true); // `true` enables capturing\n\n  // Bubbling phase: child listener (runs after)\n  child.addEventListener(\"click\", function () {\n    console.log(\"Child (bubbling)\");\n  });\n</script>\n// Parent (capturing)\n// Child (bubbling)\n```"
    },
    {
      "id": 116,
      "question": "What is event bubbling",
      "answer": "Event bubbling is a type of event propagation in which an event first triggers on the innermost target element (the one the user interacted with), and then bubbles up through its ancestors in the DOM hierarchy ‚Äî eventually reaching the outermost elements, like the document or window.\n\nBy default, event listeners in JavaScript are triggered during the bubbling phase, unless specified otherwise.\n\n```html\n<div>\n  <button class=\"child\">Hello</button>\n</div>\n\n<script>\n  const parent = document.querySelector(\"div\");\n  const child = document.querySelector(\".child\");\n\n  // Bubbling phase (default)\n  parent.addEventListener(\"click\", function () {\n    console.log(\"Parent\");\n  });\n\n  child.addEventListener(\"click\", function () {\n    console.log(\"Child\");\n  });\n</script>\n//Child\n//Parent\n```\n\nHere, at first, the event triggers on the child button. Thereafter it bubbles up and triggers the parent div's event handler."
    },
    {
      "id": 117,
      "question": "How do you submit a form using JavaScript",
      "answer": "You can submit a form using document.forms[0].submit(). All the form input's information is submitted using onsubmit event handler\n\n```javascript\nfunction submit() {\n  document.forms[0].submit();\n}\n```"
    },
    {
      "id": 118,
      "question": "How do you find operating system details",
      "answer": "The window.navigator object contains information about the visitor's browser OS details. Some of the OS properties are available under platform property:\n\n```javascript\nconsole.log(navigator.platform);\n```"
    },
    {
      "id": 119,
      "question": "What is the difference between document load and DOMContentLoaded events",
      "answer": "The **DOMContentLoaded** event is fired when the initial HTML document has been completely loaded and parsed, without waiting for assets(stylesheets, images, and subframes) to finish loading. Whereas The **load** event is fired when the whole page has loaded, including all dependent resources(stylesheets, images)."
    },
    {
      "id": 120,
      "question": "What is the difference between native, host and user objects",
      "answer": "**Native objects** are objects that are part of the JavaScript language defined by the ECMAScript specification. For example, String, Math, RegExp, Object, Function etc core objects defined in the ECMAScript spec.\n\n**Host objects** are objects provided by the browser or runtime environment (Node). For example, window, XmlHttpRequest, DOM nodes etc are considered as host objects.\n\n**User objects** are objects defined in the javascript code. For example, User objects created for profile information."
    },
    {
      "id": 121,
      "question": "What are the tools or techniques used for debugging JavaScript code",
      "answer": "You can use below tools or techniques for debugging javascript:\n\n- **Chrome Devtools**\n- **debugger statement**\n- **Good old console.log statement**"
    },
    {
      "id": 122,
      "question": "What are the pros and cons of promises over callbacks",
      "answer": "Below are the list of pros and cons of promises over callbacks:\n\n**Pros:**\n- It avoids callback hell which is unreadable\n- Easy to write sequential asynchronous code with .then()\n- Easy to write parallel asynchronous code with Promise.all()\n- Solves some of the common problems of callbacks(call the callback too late, too early, many times and swallow errors/exceptions)\n\n**Cons:**\n- It makes little complex code\n- You need to load a polyfill if ES6 is not supported"
    },
    {
      "id": 123,
      "question": "What is the difference between an attribute and a property",
      "answer": "**Attributes** are defined on the HTML markup whereas **properties** are defined on the DOM. For example, the below HTML element has 2 attributes: type and value:\n\n```html\n<input type=\"text\" value=\"Name:\">\n```\n\nYou can retrieve the attribute value as below, for example after typing \"Good morning\" into the input field:\n\n```javascript\nconst input = document.querySelector(\"input\");\nconsole.log(input.getAttribute(\"value\")); // Good morning\nconsole.log(input.value); // Good morning\n```\n\nAnd after you change the value of the text field to \"Good evening\", it becomes:\n\n```javascript\nconsole.log(input.getAttribute(\"value\")); // Good evening\nconsole.log(input.value); // Good evening\n```"
    },
    {
      "id": 124,
      "question": "What is same-origin policy",
      "answer": "The same-origin policy is a policy that prevents JavaScript from making requests across domain boundaries. An origin is defined as a combination of URI scheme, hostname, and port number. If you enable this policy then it prevents a malicious script on one page from obtaining access to sensitive data on another web page using Document Object Model(DOM)."
    },
    {
      "id": 125,
      "question": "What is the purpose of void 0",
      "answer": "Void(0) is used to prevent the page from refreshing. This will be helpful to eliminate the unwanted side-effect, because it will return the undefined primitive value. It is commonly used for HTML documents that use href=\"JavaScript:Void(0);\" within an <a> element. i.e, when you click a link, the browser loads a new page or refreshes the same page. But this behavior will be prevented using this expression. For example, the below link notify the message without reloading the page:\n\n```html\n<a href=\"JavaScript:void(0);\" onclick=\"alert('Well done!')\">\n  Click Me!\n</a>\n```"
    },
    {
      "id": 126,
      "question": "Is JavaScript a compiled or interpreted language",
      "answer": "JavaScript is an **interpreted language**, not a compiled language. An interpreter in the browser reads over the JavaScript code, interprets each line, and runs it. Nowadays modern browsers use a technology known as **Just-In-Time (JIT) compilation**, which compiles JavaScript to executable bytecode just as it is about to run."
    },
    {
      "id": 127,
      "question": "Is JavaScript a case-sensitive language",
      "answer": "Yes, JavaScript is a **case sensitive language**. The language keywords, variables, function & object names, and any other identifiers must always be typed with a consistent capitalization of letters."
    },
    {
      "id": 128,
      "question": "Is there any relation between Java and JavaScript",
      "answer": "No, they are entirely two different programming languages and have nothing to do with each other. But both of them are Object Oriented Programming languages and like many other languages, they follow similar syntax for basic features(if, else, for, switch, break, continue etc)."
    },
    {
      "id": 129,
      "question": "What are events",
      "answer": "Events are \"things\" that happen to HTML elements. When JavaScript is used in HTML pages, JavaScript can react on these events. Some of the examples of HTML events are:\n\n- Web page has finished loading\n- Input field was changed\n- Button was clicked\n\nLet's describe the behavior of click event for button element:\n\n```html\n<!doctype html>\n<html>\n <head>\n   <script>\n     function greeting() {\n       alert('Hello! Good morning');\n     }\n   </script>\n </head>\n <body>\n   <button type=\"button\" onclick=\"greeting()\">Click me</button>\n </body>\n</html>\n```"
    },
    {
      "id": 130,
      "question": "Who created javascript",
      "answer": "JavaScript was created by **Brendan Eich** in 1995 during his time at Netscape Communications. Initially it was developed under the name **Mocha**, but later the language was officially called **LiveScript** when it first shipped in beta releases of Netscape."
    },
    {
      "id": 131,
      "question": "What is the use of preventDefault method",
      "answer": "The preventDefault() method cancels the event if it is cancelable, meaning that the default action or behaviour that belongs to the event will not occur. For example, prevent form submission when clicking on submit button and prevent opening the page URL when clicking on hyperlink are some common use cases.\n\n```javascript\ndocument\n  .getElementById(\"link\")\n  .addEventListener(\"click\", function (event) {\n    event.preventDefault();\n  });\n```\n\n**Note:** Remember that not all events are cancelable."
    },
    {
      "id": 132,
      "question": "What is the use of stopPropagation method",
      "answer": "The stopPropagation method is used to stop the event from bubbling up the event chain. For example, the below nested divs with stopPropagation method prevents default event propagation when clicking on nested div(Div1):\n\n```html\n<p>Click DIV1 Element</p>\n<div onclick=\"secondFunc()\">DIV 2\n  <div onclick=\"firstFunc(event)\">DIV 1</div>\n</div>\n\n<script>\nfunction firstFunc(event) {\n  alert(\"DIV 1\");\n  event.stopPropagation();\n}\n\nfunction secondFunc() {\n  alert(\"DIV 2\");\n}\n</script>\n```"
    },
    {
      "id": 133,
      "question": "What are the steps involved in return false usage",
      "answer": "The return false statement in event handlers performs the below steps:\n\n1. First it stops the browser's default action or behaviour.\n2. It prevents the event from propagating the DOM\n3. Stops callback execution and returns immediately when called."
    },
    {
      "id": 134,
      "question": "What is BOM",
      "answer": "The **Browser Object Model (BOM)** allows JavaScript to \"talk to\" the browser. It consists of the objects navigator, history, screen, location and document which are children of the window. The Browser Object Model is not standardized and can change based on different browsers."
    },
    {
      "id": 135,
      "question": "What is the use of setTimeout",
      "answer": "The setTimeout() method is used to call a function or evaluate an expression after a specified number of milliseconds. For example, let's log a message after 2 seconds using setTimeout method:\n\n```javascript\nsetTimeout(function () {\n  console.log(\"Good morning\");\n}, 2000);\n```"
    },
    {
      "id": 136,
      "question": "What is the use of setInterval",
      "answer": "The setInterval() method is used to call a function or evaluate an expression at specified intervals (in milliseconds). For example, let's log a message after 2 seconds using setInterval method:\n\n```javascript\nsetInterval(function () {\n  console.log(\"Good morning\");\n}, 2000);\n```"
    },
    {
      "id": 137,
      "question": "Why is JavaScript treated as Single threaded",
      "answer": "JavaScript is a single-threaded language. Because the language specification does not allow the programmer to write code so that the interpreter can run parts of it in parallel in multiple threads or processes. Whereas languages like java, go, C++ can make multi-threaded and multi-process programs."
    },
    {
      "id": 138,
      "question": "What is an event delegation",
      "answer": "Event delegation is a technique for listening to events where you delegate a parent element as the listener for all of the events that happen inside it.\n\nFor example, if you wanted to detect field changes inside a specific form, you can use event delegation technique:\n\n```javascript\nvar form = document.querySelector(\"#registration-form\");\n\n// Listen for changes to fields inside the form\nform.addEventListener(\n  \"input\",\n  function (event) {\n    // Log the field that was changed\n    console.log(event.target);\n  },\n  false\n);\n```"
    },
    {
      "id": 139,
      "question": "What is ECMAScript",
      "answer": "ECMAScript is the scripting language that forms the basis of JavaScript. ECMAScript standardized by the ECMA International standards organization in the ECMA-262 and ECMA-402 specifications. The first edition of ECMAScript was released in 1997."
    },
    {
      "id": 140,
      "question": "What is JSON",
      "answer": "JSON (JavaScript Object Notation) is a lightweight format that is used for data interchanging. It is based on a subset of JavaScript language in the way objects are built in JavaScript."
    },
    {
      "id": 141,
      "question": "What are the syntax rules of JSON",
      "answer": "Below are the list of syntax rules of JSON:\n\n- The data is in name/value pairs\n- The data is separated by commas\n- Curly braces hold objects\n- Square brackets hold arrays"
    },
    {
      "id": 142,
      "question": "What is the purpose JSON stringify",
      "answer": "When sending data to a web server, the data has to be in a string format. You can achieve this by converting JSON object into a string using stringify() method.\n\n```javascript\nvar userJSON = { name: \"John\", age: 31 };\nvar userString = JSON.stringify(userJSON);\nconsole.log(userString); //\"{\\\"name\\\":\\\"John\\\",\\\"age\\\":31}\"\n```"
    },
    {
      "id": 143,
      "question": "How do you parse JSON string",
      "answer": "When receiving the data from a web server, the data is always in a string format. But you can convert this string value to a javascript object using parse() method.\n\n```javascript\nvar userString = '{\"name\":\"John\",\"age\":31}';\nvar userJSON = JSON.parse(userString);\nconsole.log(userJSON); // {name: \"John\", age: 31}\n```"
    },
    {
      "id": 144,
      "question": "Why do you need JSON",
      "answer": "When exchanging data between a browser and a server, the data can only be text. Since JSON is text only, it can easily be sent to and from a server, and used as a data format by any programming language."
    },
    {
      "id": 145,
      "question": "What are PWAs",
      "answer": "Progressive web applications (PWAs) are a type of mobile app delivered through the web, built using common web technologies including HTML, CSS and JavaScript. These PWAs are deployed to servers, accessible through URLs, and indexed by search engines."
    },
    {
      "id": 146,
      "question": "What is the purpose of clearTimeout method",
      "answer": "The clearTimeout() function is used in javascript to clear the timeout which has been set by setTimeout()function before that. i.e, The return value of setTimeout() function is stored in a variable and it's passed into the clearTimeout() function to clear the timer.\n\nFor example, the below setTimeout method is used to display the message after 3 seconds. This timeout can be cleared by the clearTimeout() method.\n\n```html\n<script>\n     var msg;\n     function greeting() {\n        alert('Good morning');\n     }\n     function start() {\n       msg =setTimeout(greeting, 3000);\n\n     }\n\n     function stop() {\n         clearTimeout(msg);\n     }\n</script>\n```"
    },
    {
      "id": 147,
      "question": "What is the purpose of clearInterval method",
      "answer": "The clearInterval() function is used in javascript to clear the interval which has been set by setInterval() function. i.e, The return value returned by setInterval() function is stored in a variable and it's passed into the clearInterval() function to clear the interval.\n\nFor example, the below setInterval method is used to display the message for every 3 seconds. This interval can be cleared by the clearInterval() method.\n\n```html\n<script>\n     var msg;\n     function greeting() {\n        alert('Good morning');\n     }\n     function start() {\n       msg = setInterval(greeting, 3000);\n\n     }\n\n     function stop() {\n         clearInterval(msg);\n     }\n</script>\n```"
    },
    {
      "id": 148,
      "question": "How do you redirect new page in javascript",
      "answer": "In vanilla javascript, you can redirect to a new page using the location property of window object. The syntax would be as follows:\n\n```javascript\nfunction redirect() {\n  window.location.href = \"newPage.html\";\n}\n```"
    },
    {
      "id": 149,
      "question": "How do you check whether a string contains a substring",
      "answer": "There are 3 possible ways to check whether a string contains a substring or not:\n\n**1. Using includes (ES6):**\nES6 provided String.prototype.includes method to test a string contains a substring\n\n```javascript\nvar mainString = \"hello\",\n  subString = \"hell\";\nmainString.includes(subString);\n```\n\n**2. Using indexOf (ES5):**\nIn an ES5 or older environment, you can use String.prototype.indexOf which returns the index of a substring. If the index value is not equal to -1 then it means the substring exists in the main string.\n\n```javascript\nvar mainString = \"hello\",\n  subString = \"hell\";\nmainString.indexOf(subString) !== -1;\n```\n\n**3. Using RegEx:**\nThe advanced solution is using Regular expression's test method(RegExp.test), which allows for testing for against regular expressions\n\n```javascript\nvar mainString = \"hello\",\n  regex = /hell/;\nregex.test(mainString);\n```"
    },
    {
      "id": 150,
      "question": "How do you validate an email in javascript",
      "answer": "You can validate an email in javascript using regular expressions. It is recommended to do validations on the server side instead of the client side. Because the javascript can be disabled on the client side.\n\n```javascript\nfunction validateEmail(email) {\n  var re =\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\n```\n\nThe above regular expression accepts unicode characters."
    },
    {
      "id": 151,
      "question": "How do you get the current url with javascript",
      "answer": "You can use window.location.href expression to get the current url path and you can use the same expression for updating the URL too. You can also use document.URL for read-only purposes but this solution has issues in FF.\n\n```javascript\nconsole.log(\"location.href\", window.location.href); // Returns full URL\n```"
    },
    {
      "id": 152,
      "question": "What are the various url properties of location object",
      "answer": "The below Location object properties can be used to access URL components of the page:\n\n- **href** - The entire URL\n- **protocol** - The protocol of the URL\n- **host** - The hostname and port of the URL\n- **hostname** - The hostname of the URL\n- **port** - The port number in the URL\n- **pathname** - The path name of the URL\n- **search** - The query portion of the URL\n- **hash** - The anchor portion of the URL"
    },
    {
      "id": 153,
      "question": "How do get query string values in javascript",
      "answer": "You can use URLSearchParams to get query string values in javascript. Let's see an example to get the client code value from URL query string:\n\n```javascript\nconst urlParams = new URLSearchParams(window.location.search);\nconst clientCode = urlParams.get(\"clientCode\");\n```"
    },
    {
      "id": 154,
      "question": "How do you check if a key exists in an object",
      "answer": "You can check whether a key exists in an object or not using three approaches:\n\n**1. Using in operator:**\nYou can use the in operator whether a key exists in an object or not\n\n```javascript\n\"key\" in obj;\n```\n\nand If you want to check if a key doesn't exist, remember to use parenthesis:\n\n```javascript\n!(\"key\" in obj);\n```\n\n**2. Using hasOwnProperty method:**\nYou can use hasOwnProperty to particularly test for properties of the object instance (and not inherited properties)\n\n```javascript\nobj.hasOwnProperty(\"key\"); // true\n```\n\n**3. Using undefined comparison:**\nIf you access a non-existing property from an object, the result is undefined. Let's compare the properties against undefined to determine the existence of the property.\n\n```javascript\nconst user = {\n  name: \"John\",\n};\n\nconsole.log(user.name !== undefined); // true\nconsole.log(user.nickName !== undefined); // false\n```"
    },
    {
      "id": 155,
      "question": "How do you loop through or enumerate javascript object",
      "answer": "You can use the for-in loop to loop through javascript object. You can also make sure that the key you get is an actual property of an object, and doesn't come from the prototype using hasOwnProperty method.\n\n```javascript\nvar object = {\n  k1: \"value1\",\n  k2: \"value2\",\n  k3: \"value3\",\n};\n\nfor (var key in object) {\n  if (object.hasOwnProperty(key)) {\n    console.log(key + \" -> \" + object[key]); // k1 -> value1 ...\n  }\n}\n```"
    },
    {
      "id": 156,
      "question": "How do you test for an empty object",
      "answer": "There are different solutions based on ECMAScript versions:\n\n**1. Using Object entries (ECMA 7+):**\nYou can use object entries length along with constructor type.\n\n```javascript\nObject.entries(obj).length === 0 && obj.constructor === Object; // Since date object length is 0, you need to check constructor check as well\n```\n\n**2. Using Object keys (ECMA 5+):**\nYou can use object keys length along with constructor type.\n\n```javascript\nObject.keys(obj).length === 0 && obj.constructor === Object; // Since date object length is 0, you need to check constructor check as well\n```\n\n**3. Using for-in with hasOwnProperty (Pre-ECMA 5):**\nYou can use a for-in loop along with hasOwnProperty.\n\n```javascript\nfunction isEmpty(obj) {\n  for (var prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      return false;\n    }\n  }\n\n  return JSON.stringify(obj) === JSON.stringify({});\n}\n```"
    },
    {
      "id": 157,
      "question": "What is an arguments object",
      "answer": "The arguments object is an Array-like object accessible inside functions that contains the values of the arguments passed to that function. For example, let's see how to use arguments object inside sum function:\n\n```javascript\nfunction sum() {\n  var total = 0;\n  for (var i = 0, len = arguments.length; i < len; ++i) {\n    total += arguments[i];\n  }\n  return total;\n}\n\nsum(1, 2, 3); // returns 6\n```\n\n**Note:** You can't apply array methods on arguments object. But you can convert into a regular array as below:\n\n```javascript\nvar argsArray = Array.prototype.slice.call(arguments);\n```"
    },
    {
      "id": 158,
      "question": "How do you make first letter of the string in an uppercase",
      "answer": "You can create a function which uses a chain of string methods such as charAt, toUpperCase and slice methods to generate a string with the first letter in uppercase.\n\n```javascript\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n```"
    },
    {
      "id": 159,
      "question": "What are the pros and cons of for loops",
      "answer": "The for-loop is a commonly used iteration syntax in javascript. It has both pros and cons:\n\n**Pros:**\n- Works on every environment\n- You can use break and continue flow control statements\n\n**Cons:**\n- Too verbose\n- Imperative\n- You might face off-by-one errors."
    },
    {
      "id": 160,
      "question": "How do you display the current date in javascript",
      "answer": "You can use new Date() to generate a new Date object containing the current date and time. For example, let's display the current date in mm/dd/yyyy:\n\n```javascript\nvar today = new Date();\nvar dd = String(today.getDate()).padStart(2, \"0\");\nvar mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\nvar yyyy = today.getFullYear();\n\ntoday = mm + \"/\" + dd + \"/\" + yyyy;\ndocument.write(today);\n```"
    },
    {
      "id": 161,
      "question": "How do you compare two date objects",
      "answer": "You need to use date.getTime() method in order to compare unix timestamp values:\n\n```javascript\nvar d1 = new Date();\nvar d2 = new Date(d1);\nconsole.log(d1.getTime() === d2.getTime()); //True\nconsole.log(d1 === d2); // False\n```"
    },
    {
      "id": 162,
      "question": "How do you check if a string starts with another string",
      "answer": "You can use ECMAScript 6's String.prototype.startsWith() method to check if a string starts with another string or not. But it is not yet supported in all browsers. Let's see an example to see this usage:\n\n```javascript\n\"Good morning\".startsWith(\"Good\"); // true\n\"Good morning\".startsWith(\"morning\"); // false\n```"
    },
    {
      "id": 163,
      "question": "How do you trim a string in javascript",
      "answer": "JavaScript provided a trim method on string types to trim any whitespaces present at the beginning or ending of the string.\n\n```javascript\n\"  Hello World   \".trim(); //Hello World\n```\n\nIf your browser(<IE9) doesn't support this method then you can use below polyfill:\n\n```javascript\nif (!String.prototype.trim) {\n  (function () {\n    // Make sure we trim BOM and NBSP\n    var rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    String.prototype.trim = function () {\n      return this.replace(rtrim, \"\");\n    };\n  })();\n}\n```"
    },
    {
      "id": 164,
      "question": "How do you add a key value pair in javascript",
      "answer": "There are two possible solutions to add new properties to an object.\n\nLet's take a simple object to explain these solutions:\n\n```javascript\nvar object = {\n  key1: value1,\n  key2: value2,\n};\n```\n\n**1. Using dot notation:**\nThis solution is useful when you know the name of the property\n\n```javascript\nobject.key3 = \"value3\";\n```\n\n**2. Using square bracket notation:**\nThis solution is useful when the name of the property is dynamically determined or the key's name is non-JS like \"user-name\"\n\n```javascript\nobj[\"key3\"] = \"value3\";\n```"
    },
    {
      "id": 165,
      "question": "Is the !-- notation represents a special operator",
      "answer": "No, that's not a special operator. But it is a combination of 2 standard operators one after the other:\n\n- A logical not (!)\n- A prefix decrement (--)\n\nAt first, the value decremented by one and then tested to see if it is equal to zero or not for determining the truthy/falsy value."
    },
    {
      "id": 166,
      "question": "How do you assign default values to variables",
      "answer": "You can use the logical or operator || in an assignment expression to provide a default value. The syntax looks like as below:\n\n```javascript\nvar a = b || c;\n```\n\nAs per the above expression, variable 'a' will get the value of 'c' only if 'b' is falsy (if is null, false, undefined, 0, empty string, or NaN), otherwise 'a' will get the value of 'b'."
    },
    {
      "id": 167,
      "question": "How do you define multiline strings",
      "answer": "You can define multiline string literals using the '\\n' character followed by line terminator('').\n\n```javascript\nvar str = \"This is a \\n very lengthy \\n sentence!\";\nconsole.log(str);\n```\n\nBut if you have a space after the '\\n' character, there will be indentation inconsistencies."
    },
    {
      "id": 168,
      "question": "What is an app shell model",
      "answer": "An application shell (or app shell) architecture is one way to build a Progressive Web App that reliably and instantly loads on your users' screens, similar to what you see in native applications. It is useful for getting some initial HTML to the screen fast without a network."
    },
    {
      "id": 169,
      "question": "Can we define properties for functions",
      "answer": "Yes, we can define properties for functions because functions are also objects.\n\n```javascript\nfn = function (x) {\n  //Function code goes here\n};\n\nfn.name = \"John\";\n\nfn.profile = function (y) {\n  //Profile code goes here\n};\n```"
    },
    {
      "id": 170,
      "question": "What is the way to find the number of parameters expected by a function",
      "answer": "You can use function.length syntax to find the number of parameters expected by a function. Let's take an example of sum function to calculate the sum of numbers:\n\n```javascript\nfunction sum(num1, num2, num3, num4) {\n  return num1 + num2 + num3 + num4;\n}\nsum.length; // 4 is the number of parameters expected.\n```"
    },
    {
      "id": 171,
      "question": "What is a polyfill",
      "answer": "A polyfill is a piece of JS code used to provide modern functionality on older browsers that do not natively support it. For example, Silverlight plugin polyfill can be used to mimic the functionality of an HTML Canvas element on Microsoft Internet Explorer 7.\n\nThere are two main polyfill libraries available:\n\n- **Core.js**: It is a modular javascript library used for cutting-edge ECMAScript features.\n- **Polyfill.io**: It provides polyfills that are required for browser needs."
    },
    {
      "id": 172,
      "question": "What are break and continue statements",
      "answer": "**Break statement:**\nThe break statement is used to \"jump out\" of a loop. i.e, It breaks the loop and continues executing the code after the loop.\n\n```javascript\nfor (i = 0; i < 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  text += \"Number: \" + i + \"<br>\";\n}\n```\n\n**Continue statement:**\nThe continue statement is used to \"jump over\" one iteration in the loop. i.e, It breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.\n\n```javascript\nfor (i = 0; i < 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  text += \"Number: \" + i + \"<br>\";\n}\n```"
    },
    {
      "id": 173,
      "question": "What are js labels",
      "answer": "The label statement allows us to name loops and blocks in JavaScript. We can then use these labels to refer back to the code later. For example, the below code with labels avoids printing the numbers when they are same:\n\n```javascript\nvar i, j;\n\nloop1: for (i = 0; i < 3; i++) {\n  loop2: for (j = 0; j < 3; j++) {\n    if (i === j) {\n      continue loop1;\n    }\n    console.log(\"i = \" + i + \", j = \" + j);\n  }\n}\n\n// Output is:\n//   \"i = 1, j = 0\"\n//   \"i = 2, j = 0\"\n//   \"i = 2, j = 1\"\n```"
    },
    {
      "id": 174,
      "question": "What are the benefits of keeping declarations at the top",
      "answer": "It is recommended to keep all declarations at the top of each script or function. The benefits of doing this are:\n\n- Gives cleaner code\n- It provides a single place to look for local variables\n- Easy to avoid unwanted global variables\n- It reduces the possibility of unwanted re-declarations"
    },
    {
      "id": 175,
      "question": "What are the benefits of initializing variables",
      "answer": "It is recommended to initialize variables because of the below benefits:\n\n- It gives cleaner code\n- It provides a single place to initialize variables\n- Avoid undefined values in the code"
    },
    {
      "id": 176,
      "question": "What are the recommendations to create new object",
      "answer": "It is recommended to avoid creating new objects using new Object(). Instead you can initialize values based on it's type to create the objects.\n\n- Assign {} instead of new Object()\n- Assign \"\" instead of new String()\n- Assign 0 instead of new Number()\n- Assign false instead of new Boolean()\n- Assign [] instead of new Array()\n- Assign /()/ instead of new RegExp()\n- Assign function (){} instead of new Function()\n\nYou can define them as an example:\n\n```javascript\nvar v1 = {};\nvar v2 = \"\";\nvar v3 = 0;\nvar v4 = false;\nvar v5 = [];\nvar v6 = /()/;\nvar v7 = function () {};\n```"
    },
    {
      "id": 177,
      "question": "How do you define JSON arrays",
      "answer": "JSON arrays are written inside square brackets and arrays contain javascript objects. For example, the JSON array of users would be as below:\n\n```json\n\"users\":[\n  {\"firstName\":\"John\", \"lastName\":\"Abrahm\"},\n  {\"firstName\":\"Anna\", \"lastName\":\"Smith\"},\n  {\"firstName\":\"Shane\", \"lastName\":\"Warn\"}\n]\n```"
    },
    {
      "id": 178,
      "question": "How do you generate random integers",
      "answer": "You can use Math.random() with Math.floor() to return random integers. For example, if you want generate random integers between 1 to 10, the multiplication factor should be 10:\n\n```javascript\nMath.floor(Math.random() * 10) + 1; // returns a random integer from 1 to 10\nMath.floor(Math.random() * 100) + 1; // returns a random integer from 1 to 100\n```\n\n**Note:** Math.random() returns a random number between 0 (inclusive), and 1 (exclusive)"
    },
    {
      "id": 179,
      "question": "Can you write a random integers function to print integers within a range",
      "answer": "Yes, you can create a proper random function to return a random number between min and max (both included):\n\n```javascript\nfunction randomInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nrandomInteger(1, 100); // returns a random integer from 1 to 100\nrandomInteger(1, 1000); // returns a random integer from 1 to 1000\n```"
    },
    {
      "id": 180,
      "question": "What is tree shaking",
      "answer": "Tree shaking is a form of dead code elimination. It means that unused modules will not be included in the bundle during the build process and for that it relies on the static structure of ES2015 module syntax,( i.e. import and export). Initially this has been popularized by the ES2015 module bundler rollup, these days practically all bundlers use this technique."
    },
    {
      "id": 181,
      "question": "What is the need of tree shaking",
      "answer": "Tree Shaking can significantly reduce the code size in any application. i.e, The less code we send over the wire the more performant the application will be. For example, if we just want to create a \"Hello World\" Application using SPA frameworks then it will take around a few MBs, but by tree shaking it can bring down the size to just a few hundred KBs. Tree shaking is implemented in Rollup and Webpack bundlers."
    },
    {
      "id": 182,
      "question": "Is it recommended to use eval",
      "answer": "No, it allows arbitrary code to be run which causes a security problem. As we know that the eval() function is used to run text as code. In most of the cases, it should not be necessary to use it."
    },
    {
      "id": 183,
      "question": "What is a Regular Expression",
      "answer": "A regular expression is a sequence of characters that forms a search pattern. You can use this search pattern for searching data in a text. These can be used to perform all types of text search and text replace operations. Let's see the syntax format now:\n\n```javascript\n/pattern/modifiers;\n```\n\nFor example, the regular expression or search pattern with case-insensitive username would be:\n\n```javascript\n/John/i;\n```"
    },
    {
      "id": 184,
      "question": "What are the string methods that accept Regular expression",
      "answer": "There are six string methods: search(), replace(), replaceAll(), match(), matchAll(), and split().\n\n**1. search():** The search() method uses an expression to search for a match, and returns the position of the match.\n\n```javascript\nvar msg = \"Hello John\";\nvar n = msg.search(/John/i); // 6\n```\n\n**2. replace() and replaceAll():** These methods are used to return a modified string where the pattern is replaced.\n\n```javascript\nvar msg = \"ball bat\";\nvar n1 = msg.replace(/b/i, \"c\"); // call bat\nvar n2 = msg.replaceAll(/b/i, \"c\"); // call cat\n```\n\n**3. match() and matchAll():** These methods are used to return the matches when matching a string against a regular expression.\n\n```javascript\nvar msg = \"Hello John\";\nvar n1 = msg.match(/[A-Z]/g); // [\"H\", \"J\"]\nvar n2 = msg.matchAll(/[A-Z]/g); // this returns an iterator\n```\n\n**4. split():** The split() method is used to split a string into an array of substrings, and returns the new array.\n\n```javascript\nvar msg = \"Hello John\";\nvar n = msg.split(/\\s/); // [\"Hello\", \"John\"]\n```"
    },
    {
      "id": 185,
      "question": "What are modifiers in regular expression",
      "answer": "Modifiers can be used to perform case-insensitive and global searches. Let's list some of the modifiers:\n\n| Modifier | Description |\n|----------|-------------|\n| **i** | Perform case-insensitive matching |\n| **g** | Perform a global match rather than stops at first match |\n| **m** | Perform multiline matching |\n\nLet's take an example of global modifier:\n\n```javascript\nvar text = \"Learn JS one by one\";\nvar pattern = /one/g;\nvar result = text.match(pattern); // one,one\n```"
    },
    {
      "id": 186,
      "question": "What are regular expression patterns",
      "answer": "Regular Expressions provide a group of patterns in order to match characters. Basically they are categorized into 3 types:\n\n**1. Brackets:** These are used to find a range of characters. For example, below are some use cases:\n- [abc]: Used to find any of the characters between the brackets(a,b,c)\n- [0-9]: Used to find any of the digits between the brackets\n- (a|b): Used to find any of the alternatives separated with |\n\n**2. Metacharacters:** These are characters with a special meaning. For example, below are some use cases:\n- \\d: Used to find a digit\n- \\s: Used to find a whitespace character\n- \\b: Used to find a match at the beginning or ending of a word\n\n**3. Quantifiers:** These are useful to define quantities. For example, below are some use cases:\n- n+: Used to find matches for any string that contains at least one n\n- n*: Used to find matches for any string that contains zero or more occurrences of n\n- n?: Used to find matches for any string that contains zero or one occurrences of n"
    },
    {
      "id": 187,
      "question": "What is a RegExp object",
      "answer": "RegExp object is a regular expression object with predefined properties and methods. Let's see the simple usage of RegExp object:\n\n```javascript\nvar regexp = new RegExp(\"\\\\w+\");\nconsole.log(regexp);\n// expected output: /\\w+/\n```"
    },
    {
      "id": 188,
      "question": "How do you search a string for a pattern",
      "answer": "You can use the test() method of regular expression in order to search a string for a pattern, and return true or false depending on the result.\n\n```javascript\nvar pattern = /you/;\nconsole.log(pattern.test(\"How are you?\")); //true\n```"
    },
    {
      "id": 189,
      "question": "Can we define properties for functions",
      "answer": "Yes, we can define properties for functions because functions are also objects.\n\n```javascript\nfn = function (x) {\n  //Function code goes here\n};\n\nfn.name = \"John\";\n\nfn.profile = function (y) {\n  //Profile code goes here\n};\n```"
    },
    {
      "id": 190,
      "question": "What is the way to find the number of parameters expected by a function",
      "answer": "You can use function.length syntax to find the number of parameters expected by a function. Let's take an example of sum function to calculate the sum of numbers:\n\n```javascript\nfunction sum(num1, num2, num3, num4) {\n  return num1 + num2 + num3 + num4;\n}\nsum.length; // 4 is the number of parameters expected.\n```"
    },
    {
      "id": 191,
      "question": "What is a polyfill",
      "answer": "A polyfill is a piece of JS code used to provide modern functionality on older browsers that do not natively support it. For example, Silverlight plugin polyfill can be used to mimic the functionality of an HTML Canvas element on Microsoft Internet Explorer 7.\n\nThere are two main polyfill libraries available:\n\n1. **Core.js**: It is a modular javascript library used for cutting-edge ECMAScript features.\n2. **Polyfill.io**: It provides polyfills that are required for browser needs."
    },
    {
      "id": 192,
      "question": "What are break and continue statements",
      "answer": "The **break** statement is used to \"jump out\" of a loop. i.e, It breaks the loop and continues executing the code after the loop.\n\n```javascript\nfor (i = 0; i < 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  text += \"Number: \" + i + \"<br>\";\n}\n```\n\nThe **continue** statement is used to \"jump over\" one iteration in the loop. i.e, It breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.\n\n```javascript\nfor (i = 0; i < 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  text += \"Number: \" + i + \"<br>\";\n}\n```"
    },
    {
      "id": 193,
      "question": "What are js labels",
      "answer": "The label statement allows us to name loops and blocks in JavaScript. We can then use these labels to refer back to the code later. For example, the below code with labels avoids printing the numbers when they are same:\n\n```javascript\nvar i, j;\n\nloop1: for (i = 0; i < 3; i++) {\n  loop2: for (j = 0; j < 3; j++) {\n    if (i === j) {\n      continue loop1;\n    }\n    console.log(\"i = \" + i + \", j = \" + j);\n  }\n}\n\n// Output is:\n//   \"i = 1, j = 0\"\n//   \"i = 2, j = 0\"\n//   \"i = 2, j = 1\"\n```"
    },
    {
      "id": 194,
      "question": "What are the benefits of keeping declarations at the top",
      "answer": "It is recommended to keep all declarations at the top of each script or function. The benefits of doing this are:\n\n1. Gives cleaner code\n2. It provides a single place to look for local variables\n3. Easy to avoid unwanted global variables\n4. It reduces the possibility of unwanted re-declarations"
    },
    {
      "id": 195,
      "question": "What are the benefits of initializing variables",
      "answer": "It is recommended to initialize variables because of the below benefits:\n\n1. It gives cleaner code\n2. It provides a single place to initialize variables\n3. Avoid undefined values in the code"
    },
    {
      "id": 196,
      "question": "What are the recommendations to create new object",
      "answer": "It is recommended to avoid creating new objects using new Object(). Instead you can initialize values based on it's type to create the objects.\n\n- Assign {} instead of new Object()\n- Assign \"\" instead of new String()\n- Assign 0 instead of new Number()\n- Assign false instead of new Boolean()\n- Assign [] instead of new Array()\n- Assign /()/ instead of new RegExp()\n- Assign function (){} instead of new Function()\n\nYou can define them as an example:\n\n```javascript\nvar v1 = {};\nvar v2 = \"\";\nvar v3 = 0;\nvar v4 = false;\nvar v5 = [];\nvar v6 = /()/;\nvar v7 = function () {};\n```"
    },
    {
      "id": 197,
      "question": "How do you define JSON arrays",
      "answer": "JSON arrays are written inside square brackets and arrays contain javascript objects. For example, the JSON array of users would be as below:\n\n```json\n\"users\":[\n  {\"firstName\":\"John\", \"lastName\":\"Abrahm\"},\n  {\"firstName\":\"Anna\", \"lastName\":\"Smith\"},\n  {\"firstName\":\"Shane\", \"lastName\":\"Warn\"}\n]\n```"
    },
    {
      "id": 198,
      "question": "How do you generate random integers",
      "answer": "You can use Math.random() with Math.floor() to return random integers. For example, if you want generate random integers between 1 to 10, the multiplication factor should be 10:\n\n```javascript\nMath.floor(Math.random() * 10) + 1; // returns a random integer from 1 to 10\nMath.floor(Math.random() * 100) + 1; // returns a random integer from 1 to 100\n```\n\n**Note:** Math.random() returns a random number between 0 (inclusive), and 1 (exclusive)"
    },
    {
      "id": 199,
      "question": "Can you write a random integers function to print integers within a range",
      "answer": "Yes, you can create a proper random function to return a random number between min and max (both included):\n\n```javascript\nfunction randomInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nrandomInteger(1, 100); // returns a random integer from 1 to 100\nrandomInteger(1, 1000); // returns a random integer from 1 to 1000\n```"
    },
    {
      "id": 200,
      "question": "What is tree shaking",
      "answer": "Tree shaking is a form of dead code elimination. It means that unused modules will not be included in the bundle during the build process and for that it relies on the static structure of ES2015 module syntax (i.e. import and export). Initially this has been popularized by the ES2015 module bundler rollup, these days practically all bundlers use this technique."
    },
    {
      "id": 201,
      "question": "What is the need of tree shaking",
      "answer": "Tree Shaking can significantly reduce the code size in any application. i.e, The less code we send over the wire the more performant the application will be. For example, if we just want to create a \"Hello World\" Application using SPA frameworks then it will take around a few MBs, but by tree shaking it can bring down the size to just a few hundred KBs. Tree shaking is implemented in Rollup and Webpack bundlers."
    },
    {
      "id": 202,
      "question": "Is it recommended to use eval",
      "answer": "No, it allows arbitrary code to be run which causes a security problem. As we know that the eval() function is used to run text as code. In most of the cases, it should not be necessary to use it."
    },
    {
      "id": 203,
      "question": "What is a Regular Expression",
      "answer": "A regular expression is a sequence of characters that forms a search pattern. You can use this search pattern for searching data in a text. These can be used to perform all types of text search and text replace operations. Let's see the syntax format now:\n\n```javascript\n/pattern/modifiers;\n```\n\nFor example, the regular expression or search pattern with case-insensitive username would be:\n\n```javascript\n/John/i;\n```"
    },
    {
      "id": 204,
      "question": "What are the string methods that accept Regular expression",
      "answer": "There are six string methods: search(), replace(), replaceAll(), match(), matchAll(), and split().\n\n**The search() method** uses an expression to search for a match, and returns the position of the match.\n```javascript\nvar msg = \"Hello John\";\nvar n = msg.search(/John/i); // 6\n```\n\n**The replace() and replaceAll() methods** are used to return a modified string where the pattern is replaced.\n```javascript\nvar msg = \"ball bat\";\nvar n1 = msg.replace(/b/i, \"c\"); // call bat\nvar n2 = msg.replaceAll(/b/i, \"c\"); // call cat\n```\n\n**The match() and matchAll() methods** are used to return the matches when matching a string against a regular expression.\n```javascript\nvar msg = \"Hello John\";\nvar n1 = msg.match(/[A-Z]/g); // [\"H\", \"J\"]\nvar n2 = msg.matchAll(/[A-Z]/g); // this returns an iterator\n```\n\n**The split() method** is used to split a string into an array of substrings, and returns the new array.\n```javascript\nvar msg = \"Hello John\";\nvar n = msg.split(/\\s/); // [\"Hello\", \"John\"]\n```"
    },
    {
      "id": 205,
      "question": "What are modifiers in regular expression",
      "answer": "Modifiers can be used to perform case-insensitive and global searches. Let's list some of the modifiers:\n\n| Modifier | Description |\n|----------|-------------|\n| i | Perform case-insensitive matching |\n| g | Perform a global match rather than stops at first match |\n| m | Perform multiline matching |\n\nLet's take an example of global modifier:\n\n```javascript\nvar text = \"Learn JS one by one\";\nvar pattern = /one/g;\nvar result = text.match(pattern); // one,one\n```"
    },
    {
      "id": 206,
      "question": "What is the purpose of exec method",
      "answer": "The purpose of exec method is similar to test method but it executes a search for a match in a specified string and returns a result array, or null instead of returning true/false.\n\n```javascript\nvar pattern = /you/;\nconsole.log(pattern.exec(\"How are you?\")); //[\"you\", index: 8, input: \"How are you?\", groups: undefined]\n```"
    },
    {
      "id": 207,
      "question": "How do you change the style of a HTML element",
      "answer": "You can change inline style or classname of a HTML element using javascript DOM-manipulation:\n\n**Using style property:** You can modify inline style using style property\n```javascript\ndocument.getElementById(\"title\").style.fontSize = \"30px\";\n```\n\n**Using ClassName property:** It is easy to modify element class using className property\n```javascript\ndocument.getElementById(\"title\").className = \"custom-title\";\n```"
    },
    {
      "id": 208,
      "question": "What would be the result of 1+2+'3'",
      "answer": "The output is going to be **33**. Since 1 and 2 are numeric values, the result of the first two digits is going to be a numeric value 3. The next digit is a string type value because of that the addition of numeric value 3 and string type value 3 is just going to be a concatenation value 33. Other operations like 3 * '3' do yield correct results because the string is coerced into a number."
    },
    {
      "id": 209,
      "question": "What is a debugger statement",
      "answer": "The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect. For example, in the below function a debugger statement has been inserted. So execution is paused at the debugger statement just like a breakpoint in the script source.\n\n```javascript\nfunction getProfile() {\n  // code goes here\n  debugger;\n  // code goes here\n}\n```"
    },
    {
      "id": 210,
      "question": "What is the purpose of breakpoints in debugging",
      "answer": "You can set breakpoints in the javascript code once the debugger statement is executed and the debugger window pops up. At each breakpoint, javascript will stop executing, and let you examine the JavaScript values. After examining values, you can resume the execution of code using the play button."
    },
    {
      "id": 211,
      "question": "Can I use reserved words as identifiers",
      "answer": "No, you cannot use the reserved words as variables, labels, object or function names. Let's see one simple example:\n\n```javascript\nvar else = \"hello\"; // Uncaught SyntaxError: Unexpected token else\n```"
    },
    {
      "id": 212,
      "question": "How do you detect a mobile browser",
      "answer": "You can use regex which returns a true or false value depending on whether or not the user is browsing with a mobile.\n\n```javascript\nwindow.mobilecheck = function () {\n  var mobileCheck = false;\n  (function (a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(\n        a\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n        a.substr(0, 4)\n      )\n    )\n      mobileCheck = true;\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return mobileCheck;\n};\n```"
    },
    {
      "id": 213,
      "question": "How do you detect a mobile browser without regexp",
      "answer": "You can detect mobile browsers by simply running through a list of devices and checking if the useragent matches anything. This is an alternative solution for RegExp usage:\n\n```javascript\nfunction detectmob() {\n  if (\n    navigator.userAgent.match(/Android/i) ||\n    navigator.userAgent.match(/webOS/i) ||\n    navigator.userAgent.match(/iPhone/i) ||\n    navigator.userAgent.match(/iPad/i) ||\n    navigator.userAgent.match(/iPod/i) ||\n    navigator.userAgent.match(/BlackBerry/i) ||\n    navigator.userAgent.match(/Windows Phone/i)\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```"
    },
    {
      "id": 214,
      "question": "How do you get the image width and height using JS",
      "answer": "You can programmatically get the image and check the dimensions(width and height) using Javascript.\n\n```javascript\nvar img = new Image();\nimg.onload = function () {\n  console.log(this.width + \"x\" + this.height);\n};\nimg.src = \"http://www.google.com/intl/en_ALL/images/logo.gif\";\n```"
    },
    {
      "id": 215,
      "question": "How do you make synchronous HTTP request",
      "answer": "Browsers provide an XMLHttpRequest object which can be used to make synchronous HTTP requests from JavaScript.\n\n```javascript\nfunction httpGet(theUrl) {\n  var xmlHttpReq = new XMLHttpRequest();\n  xmlHttpReq.open(\"GET\", theUrl, false); // false for synchronous request\n  xmlHttpReq.send(null);\n  return xmlHttpReq.responseText;\n}\n```"
    },
    {
      "id": 216,
      "question": "How do you make asynchronous HTTP request",
      "answer": "Browsers provide an XMLHttpRequest object which can be used to make asynchronous HTTP requests from JavaScript by passing the 3rd parameter as true.\n\n```javascript\nfunction httpGetAsync(theUrl, callback) {\n  var xmlHttpReq = new XMLHttpRequest();\n  xmlHttpReq.onreadystatechange = function () {\n    if (xmlHttpReq.readyState == 4 && xmlHttpReq.status == 200)\n      callback(xmlHttpReq.responseText);\n  };\n  xmlHttpReq.open(\"GET\", theUrl, true); // true for asynchronous\n  xmlHttpReq.send(null);\n}\n```\n\nToday this is considered deprecated, because an async fetch call (in browsers later than 2016) is simpler and more robust."
    },
    {
      "id": 217,
      "question": "How do you convert date to another timezone in javascript",
      "answer": "You can use the toLocaleString() method to convert dates in one timezone to another. For example, let's convert current date to British English timezone as below:\n\n```javascript\nconsole.log(new Date().toLocaleString(\"en-GB\", { timeZone: \"UTC\" })); //29/06/2019, 09:56:00\n```"
    },
    {
      "id": 218,
      "question": "What are the properties used to get size of window",
      "answer": "You can use innerWidth, innerHeight, clientWidth, clientHeight properties of windows, document element and document body objects to find the size of a window. Let's use them combination of these properties to calculate the size of a window or document:\n\n```javascript\nvar width =\n  window.innerWidth ||\n  document.documentElement.clientWidth ||\n  document.body.clientWidth;\n\nvar height =\n  window.innerHeight ||\n  document.documentElement.clientHeight ||\n  document.body.clientHeight;\n```"
    },
    {
      "id": 219,
      "question": "What is a conditional operator in javascript",
      "answer": "The conditional (ternary) operator is the only JavaScript operator that takes three operands which acts as a shortcut for if statements.\n\n```javascript\nvar isAuthenticated = false;\nconsole.log(\n  isAuthenticated ? \"Hello, welcome\" : \"Sorry, you are not authenticated\"\n); // Sorry, you are not authenticated\n```"
    },
    {
      "id": 220,
      "question": "Can you apply chaining on conditional operator",
      "answer": "Yes, you can apply chaining on conditional operators similar to if ‚Ä¶ else if ‚Ä¶ else if ‚Ä¶ else chain. The syntax is going to be as below:\n\n```javascript\nfunction traceValue(someParam) {\n  return condition1\n    ? value1\n    : condition2\n    ? value2\n    : condition3\n    ? value3\n    : value4;\n}\n\n// The above conditional operator is equivalent to:\n\nfunction traceValue(someParam) {\n  if (condition1) {\n    return value1;\n  } else if (condition2) {\n    return value2;\n  } else if (condition3) {\n    return value3;\n  } else {\n    return value4;\n  }\n}\n```"
    },
    {
      "id": 221,
      "question": "What are the ways to execute javascript after a page load",
      "answer": "You can execute javascript after page load in many different ways:\n\n1. **window.onload:**\n```javascript\nwindow.onload = function ...\n```\n\n2. **document.onload:**\n```javascript\ndocument.onload = function ...\n```\n\n3. **body onload:**\n```html\n<body onload=\"script();\">\n```"
    },
    {
      "id": 222,
      "question": "What is the difference between proto and prototype",
      "answer": "The __proto__ object is the actual object that is used in the lookup chain to resolve methods, etc. Whereas prototype is the object that is used to build __proto__ when you create an object with the new operator (a special variant of a function call).\n\n```javascript\nnew Employee().__proto__ === Employee.prototype;\nnew Employee().prototype === undefined;\n```\n\nThere are few more differences:\n\n| Feature | Prototype | __proto__ |\n|---------|-----------|------------|\n| Access | All function constructors have prototype properties. | All objects have __proto__ property |\n| Purpose | Used to reduce memory wastage with a single copy of function | Used in lookup chain to resolve methods, constructors etc. |\n| ECMAScript | Introduced in ES6 | Introduced in ES5 |\n| Usage | Frequently used | Rarely used |"
    },
    {
      "id": 223,
      "question": "Can you give an example of when you really need a semicolon",
      "answer": "It is recommended to use semicolons after every statement in JavaScript. For example, in the below case (that is an IIFE = Immediately Invoked Function Expression) it throws an error \".. is not a function\" at runtime due to missing semicolon.\n\n```javascript\n// define a function\nvar fn = (function () {\n  //...\n})(\n  // semicolon missing at this line\n\n  // then execute some code inside a closure\n  function () {\n    //...\n  }\n)();\n```\n\nand it will be interpreted as\n\n```javascript\nvar fn = (function () {\n  //...\n})(function () {\n  //...\n})();\n```\n\nIn this case, we are passing the second function as an argument to the first function and then trying to call the result of the first function call as a function. Hence, the second function will fail with a \"... is not a function\" error at runtime."
    },
    {
      "id": 224,
      "question": "What is the freeze method",
      "answer": "The freeze() method is used to freeze an object. Freezing an object does not allow adding new properties to an object, prevents removing, and prevents changing the enumerability, configurability, or writability of existing properties. i.e. It returns the passed object and does not create a frozen copy.\n\n```javascript\nconst obj = {\n  prop: 100,\n};\n\nObject.freeze(obj);\nobj.prop = 200; // Throws an error in strict mode\n\nconsole.log(obj.prop); //100\n```\n\nRemember freezing is only applied to the top-level properties in objects but not for nested objects. For example, let's try to freeze user object which has employment details as nested object and observe that details have been changed.\n\n```javascript\nconst user = {\n  name: \"John\",\n  employment: {\n    department: \"IT\",\n  },\n};\n\nObject.freeze(user);\nuser.employment.department = \"HR\";\n```\n\n**Note:** It causes a TypeError if the argument passed is not an object."
    },
    {
      "id": 225,
      "question": "What is the purpose of the freeze method",
      "answer": "Below are the main benefits of using freeze method:\n\n1. It is used for freezing objects and arrays.\n2. It is used to make an object immutable."
    },
    {
      "id": 226,
      "question": "How do you set the prototype of one object to another",
      "answer": "You can use the Object.setPrototypeOf() method that sets the prototype (i.e., the internal Prototype property) of a specified object to another object or null. For example, if you want to set prototype of a square object to rectangle object would be as follows:\n\n```javascript\nObject.setPrototypeOf(Square.prototype, Rectangle.prototype);\nObject.setPrototypeOf({}, null);\n```"
    },
    {
      "id": 227,
      "question": "How do you check whether an object can be extended or not",
      "answer": "The Object.isExtensible() method is used to determine if an object is extendable or not. i.e, Whether it can have new properties added to it or not.\n\n```javascript\nconst newObject = {};\nconsole.log(Object.isExtensible(newObject)); //true\n```\n\nNote: By default, all the objects are extendable. i.e, The new properties can be added or modified."
    },
    {
      "id": 228,
      "question": "How do you prevent an object from being extend",
      "answer": "The Object.preventExtensions() method is used to prevent new properties from ever being added to an object. In other words, it prevents future extensions to the object. Let's see the usage of this property:\n\n```javascript\nconst newObject = {};\nObject.preventExtensions(newObject); // NOT extendable\n\ntry {\n  Object.defineProperty(newObject, \"newProperty\", {\n    // Adding new property\n    value: 100,\n  });\n} catch (e) {\n  console.log(e); // TypeError: Cannot define property newProperty, object is not extensible\n}\n```"
    },
    {
      "id": 229,
      "question": "What are the different ways to make an object non-extensible",
      "answer": "You can mark an object non-extensible in 3 ways:\n\n1. Object.preventExtensions\n2. Object.seal\n3. Object.freeze\n\n```javascript\nvar newObject = {};\n\nObject.preventExtensions(newObject); // Prevent objects are non-extensible\nObject.isExtensible(newObject); // false\n\nvar sealedObject = Object.seal({}); // Sealed objects are non-extensible\nObject.isExtensible(sealedObject); // false\n\nvar frozenObject = Object.freeze({}); // Frozen objects are non-extensible\nObject.isExtensible(frozenObject); // false\n```"
    },
    {
      "id": 230,
      "question": "How do you define multiple properties on an object",
      "answer": "The Object.defineProperties() method is used to define new or modify existing properties directly on an object and returning the object. Let's define multiple properties on an empty object:\n\n```javascript\nconst newObject = {};\n\nObject.defineProperties(newObject, {\n  newProperty1: {\n    value: \"John\",\n    writable: true,\n  },\n  newProperty2: {},\n});\n```"
    },
    {
      "id": 231,
      "question": "What is the MEAN stack",
      "answer": "The MEAN (MongoDB, Express, AngularJS, and Node.js) stack is the most popular open-source JavaScript software tech stack available for building dynamic web apps where you can write both the server-side and client-side halves of the web project entirely in JavaScript."
    },
    {
      "id": 232,
      "question": "What is obfuscation in javascript",
      "answer": "Obfuscation is the deliberate act of creating obfuscated javascript code(i.e, source or machine code) that is difficult for humans to understand. It is something similar to encryption, but a machine can understand the code and execute it. Let's see the below function before Obfuscation:\n\n```javascript\nfunction greeting() {\n  console.log(\"Hello, welcome to JS world\");\n}\n```\n\nAnd after the code Obfuscation, it would be appeared as below:\n\n```javascript\neval(\n  (function (p, a, c, k, e, d) {\n    e = function (c) {\n      return c;\n    };\n    if (!\"\".replace(/^/, String)) {\n      while (c--) {\n        d[c] = k[c] || c;\n      }\n      k = [\n        function (e) {\n          return d[e];\n        },\n      ];\n      e = function () {\n        return \"\\\\w+\";\n      };\n      c = 1;\n    }\n    while (c--) {\n      if (k[c]) {\n        p = p.replace(new RegExp(\"\\\\b\" + e(c) + \"\\\\b\", \"g\"), k[c]);\n      }\n    }\n    return p;\n  })(\n    \"2 1(){0.3('4, 7 6 5 8')}\",\n    9,\n    9,\n    \"console|greeting|function|log|Hello|JS|to|welcome|world\".split(\"|\"),\n    0,\n    {}\n  )\n);\n```"
    },
    {
      "id": 233,
      "question": "Why do you need Obfuscation",
      "answer": "Below are the few reasons for Obfuscation:\n\n1. The Code size will be reduced. So data transfers between server and client will be fast.\n2. It hides the business logic from outside world and protects the code from others\n3. Reverse engineering is highly difficult\n4. The download time will be reduced"
    },
    {
      "id": 234,
      "question": "What is Minification",
      "answer": "Minification is the process of removing all unnecessary characters(empty spaces are removed) and variables will be renamed without changing it's functionality. It is also a type of obfuscation."
    },
    {
      "id": 235,
      "question": "What are the advantages of minification",
      "answer": "Normally it is recommended to use minification for heavy traffic and intensive requirements of resources. It reduces file sizes with below benefits:\n\n1. Decreases loading times of a web page\n2. Saves bandwidth usages"
    },
    {
      "id": 236,
      "question": "What are the differences between obfuscation and Encryption",
      "answer": "Below are the main differences between obfuscation and encryption:\n\n| Feature | Obfuscation | Encryption |\n|---------|-------------|------------|\n| Definition | Changing the form of any data in any other form | Changing the form of information to an unreadable format by using a key |\n| A key to decode | It can be decoded without any key | It is required |\n| Target data format | It will be converted to a complex form | Converted into an unreadable format |"
    },
    {
      "id": 237,
      "question": "What are the common tools used for minification",
      "answer": "There are many online/offline tools to minify the javascript files:\n\n1. Google's Closure Compiler\n2. UglifyJS2\n3. jsmin\n4. javascript-minifier.com/\n5. prettydiff.com"
    },
    {
      "id": 238,
      "question": "How do you perform form validation using javascript",
      "answer": "JavaScript can be used to perform HTML form validation. For example, if the form field is empty, the function needs to notify, and return false, to prevent the form being submitted. Let's perform user login in an html form:\n\n```html\n<form name=\"myForm\" onsubmit=\"return validateForm()\" method=\"post\">\n  User name:\n  <input type=\"text\" name=\"uname\" />\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n```\n\nAnd the validation on user login is below:\n\n```javascript\nfunction validateForm() {\n  var x = document.forms[\"myForm\"][\"uname\"].value;\n  if (x == \"\") {\n    alert(\"The username shouldn't be empty\");\n    return false;\n  }\n}\n```"
    },
    {
      "id": 239,
      "question": "How do you perform form validation without javascript",
      "answer": "You can perform HTML form validation automatically without using javascript. The validation enabled by applying the required attribute to prevent form submission when the input is empty.\n\n```html\n<form method=\"post\">\n  <input type=\"text\" name=\"uname\" required />\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n```\n\nNote: Automatic form validation does not work in Internet Explorer 9 or earlier."
    },
    {
      "id": 240,
      "question": "What are the DOM methods available for constraint validation",
      "answer": "The below DOM methods are available for constraint validation on an invalid input:\n\n1. checkValidity(): It returns true if an input element contains valid data.\n2. setCustomValidity(): It is used to set the validationMessage property of an input element.\n\nLet's take an user login form with DOM validations:\n\n```javascript\nfunction myFunction() {\n  var userName = document.getElementById(\"uname\");\n  if (!userName.checkValidity()) {\n    document.getElementById(\"message\").innerHTML =\n      userName.validationMessage;\n  } else {\n    document.getElementById(\"message\").innerHTML =\n      \"Entered a valid username\";\n  }\n}\n```"
    },
    {
      "id": 241,
      "question": "What are the available constraint validation DOM properties",
      "answer": "Below are the list of some of the constraint validation DOM properties available:\n\n1. validity: It provides a list of boolean properties related to the validity of an input element.\n2. validationMessage: It displays the message when the validity is false.\n3. willValidate: It indicates if an input element will be validated or not."
    },
    {
      "id": 242,
      "question": "What are the validity properties",
      "answer": "The validity property of an input element provides a set of properties related to the validity of data:\n\n1. customError: It returns true, if a custom validity message is set.\n2. patternMismatch: It returns true, if an element's value does not match its pattern attribute.\n3. rangeOverflow: It returns true, if an element's value is greater than its max attribute.\n4. rangeUnderflow: It returns true, if an element's value is less than its min attribute.\n5. stepMismatch: It returns true, if an element's value is invalid according to step attribute.\n6. tooLong: It returns true, if an element's value exceeds its maxLength attribute.\n7. typeMismatch: It returns true, if an element's value is invalid according to type attribute.\n8. valueMissing: It returns true, if an element with a required attribute has no value.\n9. valid: It returns true, if an element's value is valid."
    },
    {
      "id": 243,
      "question": "Give an example usage of the rangeOverflow property",
      "answer": "If an element's value is greater than its max attribute then the rangeOverflow property is true. For example, the below form submission throws an error if the value is more than 100:\n\n```html\n<input id=\"age\" type=\"number\" max=\"100\" />\n<button onclick=\"myOverflowFunction()\">OK</button>\n```\n\n```javascript\nfunction myOverflowFunction() {\n  if (document.getElementById(\"age\").validity.rangeOverflow) {\n    alert(\"The mentioned age is not allowed\");\n  }\n}\n```"
    },
    {
      "id": 244,
      "question": "Are enums available in javascript",
      "answer": "No, javascript does not natively support enums. But there are different kinds of solutions to simulate them even though they may not provide exact equivalents. For example, you can use freeze or seal on object:\n\n```javascript\nvar DaysEnum = Object.freeze({\"monday\":1, \"tuesday\":2, \"wednesday\":3, ...});\n```"
    },
    {
      "id": 245,
      "question": "What is an enum",
      "answer": "An enum is a type restricting variables to one value from a predefined set of constants. JavaScript has no enums but typescript provides built-in enum support.\n\n```typescript\nenum Color {\n RED, GREEN, BLUE\n}\n```"
    },
    {
      "id": 246,
      "question": "How do you list all properties of an object",
      "answer": "You can use the Object.getOwnPropertyNames() method which returns an array of all properties found directly in a given object. Let's see the usage of this in an example below:\n\n```javascript\nconst newObject = {\n  a: 1,\n  b: 2,\n  c: 3,\n};\n\nconsole.log(Object.getOwnPropertyNames(newObject));\n// [\"a\", \"b\", \"c\"]\n```"
    },
    {
      "id": 247,
      "question": "How do you get property descriptors of an object",
      "answer": "You can use the Object.getOwnPropertyDescriptors() method which returns all own property descriptors of a given object. The example usage of this method is below:\n\n```javascript\nconst newObject = {\n  a: 1,\n  b: 2,\n  c: 3,\n};\nconst descriptorsObject = Object.getOwnPropertyDescriptors(newObject);\nconsole.log(descriptorsObject.a.writable); //true\nconsole.log(descriptorsObject.a.configurable); //true\nconsole.log(descriptorsObject.a.enumerable); //true\nconsole.log(descriptorsObject.a.value); // 1\n```"
    },
    {
      "id": 248,
      "question": "What are the attributes provided by a property descriptor",
      "answer": "A property descriptor is a record which has the following attributes:\n\n1. value: The value associated with the property\n2. writable: Determines whether the value associated with the property can be changed or not\n3. configurable: Returns true if the type of this property descriptor can be changed and if the property can be deleted from the corresponding object.\n4. enumerable: Determines whether the property appears during enumeration of the properties on the corresponding object or not.\n5. set: A function which serves as a setter for the property\n6. get: A function which serves as a getter for the property"
    },
    {
      "id": 249,
      "question": "How do you extend classes",
      "answer": "The extends keyword is used in class declarations/expressions to create a class which is a child of another class. It can be used to subclass custom classes as well as built-in objects. The syntax would be as below:\n\n```javascript\nclass ChildClass extends ParentClass { ... }\n```\n\nLet's take an example of Square subclass from Polygon parent class:\n\n```javascript\nclass Square extends Rectangle {\n  constructor(length) {\n    super(length, length);\n    this.name = \"Square\";\n  }\n\n  get area() {\n    return this.width * this.height;\n  }\n\n  set area(value) {\n    this.area = value;\n  }\n}\n```"
    },
    {
      "id": 250,
      "question": "How do I modify the url without reloading the page",
      "answer": "The window.location.href property will be helpful to modify the url but it reloads the page. HTML5 introduced the history.pushState() and history.replaceState() methods, which allow you to add and modify history entries, respectively. For example, you can use pushState as below:\n\n```javascript\nwindow.history.pushState(\"page2\", \"Title\", \"/page2.html\");\n```\n\nThis mechanism is used by routing libraries of frameworks like React and Angular in order to simulate the behaviour of a multi-page-website, even though they are only SPA (Single Page Applications)."
    },
    {
      "id": 251,
      "question": "How do you check whether or not an array includes a particular value",
      "answer": "The Array#includes() method is used to determine whether an array includes a particular value among its entries by returning either true or false. Let's see an example to find an element(numeric and string) within an array:\n\n```javascript\nvar numericArray = [1, 2, 3, 4];\nconsole.log(numericArray.includes(3)); // true\n\nvar stringArray = [\"green\", \"yellow\", \"blue\"];\nconsole.log(stringArray.includes(\"blue\")); //true\n```"
    },
    {
      "id": 252,
      "question": "How do you compare scalar arrays",
      "answer": "You can use length and every method of arrays to compare two scalars (compared directly using ===) arrays. The combination of these expressions can give the expected result:\n\n```javascript\nconst arrayFirst = [1, 2, 3, 4, 5];\nconst arraySecond = [1, 2, 3, 4, 5];\nconsole.log(\n  arrayFirst.length === arraySecond.length &&\n    arrayFirst.every((value, index) => value === arraySecond[index])\n); // true\n```\n\nIf you would like to compare arrays irrespective of order then you should sort them before:\n\n```javascript\nconst arrayFirst = [2, 3, 1, 4, 5];\nconst arraySecond = [1, 2, 3, 4, 5];\nconsole.log(\n  arrayFirst.length === arraySecond.length &&\n    arrayFirst\n      .sort()\n      .every((value, index) => value === arraySecond[index])\n); //true\n```"
    },
    {
      "id": 253,
      "question": "How to get the value from get parameters",
      "answer": "The new URL() object accepts the url string and searchParams property of this object can be used to access the get parameters:\n\n```javascript\nlet urlString = \"http://www.some-domain.com/about.html?x=1&y=2&z=3\"; //window.location.href\nlet url = new URL(urlString);\nlet parameterZ = url.searchParams.get(\"z\");\nconsole.log(parameterZ); // 3\n```"
    },
    {
      "id": 254,
      "question": "How do you print numbers with commas as thousand separators",
      "answer": "You can use the Number.prototype.toLocaleString() method which returns a string with a language-sensitive representation such as thousand separator, currency etc. of this number:\n\n```javascript\nfunction convertToThousandFormat(x) {\n  return x.toLocaleString(); // 12,345.679\n}\n\nconsole.log(convertToThousandFormat(12345.6789));\n```"
    },
    {
      "id": 255,
      "question": "What is the difference between java and javascript",
      "answer": "Both are totally unrelated programming languages and no relation between them. Java is statically typed, compiled, runs on its own VM. Whereas Javascript is dynamically typed, interpreted, and runs in a browser and nodejs environments. Let's see the major differences in a tabular format:\n\n| Feature | Java | JavaScript |\n|---------|------|------------|\n| Typed | It's a strongly typed language | It's a dynamic typed language |\n| Paradigm | Object oriented programming | Prototype based programming |\n| Scoping | Block scoped | Function-scoped, block scoped since ES6 |\n| Concurrency | Thread based | event based |"
    },
    {
      "id": 256,
      "question": "Does JavaScript support namespaces",
      "answer": "JavaScript doesn't support namespaces by default. So if you create any element (function, method, object, variable) then it becomes global and pollutes the global namespace. Let's take an example of defining two functions without any namespace:\n\n```javascript\nfunction func1() {\n  console.log(\"This is a first definition\");\n}\nfunction func1() {\n  console.log(\"This is a second definition\");\n}\nfunc1(); // This is a second definition\n```\n\nIt always calls the second function definition. In this case, namespaces will solve the name collision problem."
    },
    {
      "id": 257,
      "question": "How do you declare a namespace",
      "answer": "Even though JavaScript lacks namespaces, we can use Objects, an IIFE (Immediately Invoked Function Expression) or let/const to create namespaces.\n\n**Using Object Literal Notation:** Let's wrap variables and functions inside an Object literal which acts as a namespace. After that you can access them using object notation:\n\n```javascript\nvar namespaceOne = {\n    function func1() {\n        console.log(\"This is a first definition\");\n    }\n}\nvar namespaceTwo = {\n      function func1() {\n          console.log(\"This is a second definition\");\n      }\n  }\nnamespaceOne.func1(); // This is a first definition\nnamespaceTwo.func1(); // This is a second definition\n```\n\n**Using IIFE (Immediately invoked function expression):** The outer pair of parentheses of IIFE creates a local scope for all the code inside of it and makes the anonymous function a function expression. Due to that, you can create the same function in two different function expressions to act as a namespace:\n\n```javascript\n(function () {\n  function fun1() {\n    console.log(\"This is a first definition\");\n  }\n  fun1();\n})();\n\n(function () {\n  function fun1() {\n    console.log(\"This is a second definition\");\n  }\n  fun1();\n})();\n```\n\n**Using a block and a let/const declaration:** In ECMAScript 6, you can simply use a block and a let declaration to restrict the scope of a variable to a block:\n\n```javascript\n{\n  let myFunction = function fun1() {\n    console.log(\"This is a first definition\");\n  };\n  myFunction();\n}\n//myFunction(): ReferenceError: myFunction is not defined.\n\n{\n  let myFunction = function fun1() {\n    console.log(\"This is a second definition\");\n  };\n  myFunction();\n}\n//myFunction(): ReferenceError: myFunction is not defined.\n```"
    },
    {
      "id": 258,
      "question": "How do you invoke javascript code in an iframe from the parent page",
      "answer": "Initially iFrame needs to be accessed using either document.getElementBy or window.frames. After that contentWindow property of iFrame gives the access for targetFunction:\n\n```javascript\ndocument.getElementById(\"targetFrame\").contentWindow.targetFunction();\nwindow.frames[0].frameElement.contentWindow.targetFunction(); // Accessing iframe this way may not work in latest versions chrome and firefox\n```"
    },
    {
      "id": 259,
      "question": "How do you get the timezone offset of a date object",
      "answer": "You can use the getTimezoneOffset method of the date object. This method returns the time zone difference, in minutes, from current locale (host system settings) to UTC:\n\n```javascript\nvar offset = new Date().getTimezoneOffset();\nconsole.log(offset); // -480\n```"
    },
    {
      "id": 260,
      "question": "How do you load CSS and JS files dynamically",
      "answer": "You can create both link and script elements in the DOM and append them as child to head tag. Let's create a function to add script and style resources as below:\n\n```javascript\nfunction loadAssets(filename, filetype) {\n  if (filetype == \"css\") {\n    // External CSS file\n    var fileReference = document.createElement(\"link\");\n    fileReference.setAttribute(\"rel\", \"stylesheet\");\n    fileReference.setAttribute(\"type\", \"text/css\");\n    fileReference.setAttribute(\"href\", filename);\n  } else if (filetype == \"js\") {\n    // External JavaScript file\n    var fileReference = document.createElement(\"script\");\n    fileReference.setAttribute(\"type\", \"text/javascript\");\n    fileReference.setAttribute(\"src\", filename);\n  }\n  if (typeof fileReference != \"undefined\")\n    document.getElementsByTagName(\"head\")[0].appendChild(fileReference);\n}\n```"
    },
    {
      "id": 261,
      "question": "What are the different methods to find HTML elements in DOM",
      "answer": "If you want to access any element in an HTML page, you need to start with accessing the document object. Later you can use any of the below methods to find the HTML element:\n\n1. document.getElementById(id): It finds an element by Id\n2. document.getElementsByTagName(name): It finds an element by tag name (returns an node list)\n3. document.getElementsByClassName(name): It finds an element by class name (returns an node list)\n4. document.querySelector(cssSelector): It finds an element by css selector\n5. document.querySelectorAll(cssSelector): It finds all elements by css selector (returns a node list)"
    },
    {
      "id": 262,
      "question": "What is jQuery",
      "answer": "jQuery is a popular cross-browser JavaScript library that provides Document Object Model (DOM) traversal, event handling, animations and AJAX interactions by minimizing the discrepancies across browsers. It is widely famous with its philosophy of \"Write less, do more\". For example, you can display welcome message on the page load using jQuery as below:\n\n```javascript\n$(document).ready(function () {\n  // It selects the document and apply the function on page load\n  alert(\"Welcome to jQuery world\");\n});\n```\n\nNote: You can download it from jquery's official site or install it from CDNs, like google."
    },
    {
      "id": 263,
      "question": "What is V8 JavaScript engine",
      "answer": "V8 is an open source high-performance JavaScript engine used by the Google Chrome browser, written in C++. It is also being used in the node.js project. It implements ECMAScript and WebAssembly, and runs on Windows 7 or later, macOS 10.12+, and Linux systems that use x64, IA-32, ARM, or MIPS processors. Note: It can run standalone, or can be embedded into any C++ application."
    },
    {
      "id": 264,
      "question": "Why do we call javascript as dynamic language",
      "answer": "JavaScript is a loosely typed or a dynamic language because variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned/reassigned with values of all types.\n\n```javascript\nlet age = 50; // age is a number now\nage = \"old\"; // age is a string now\nage = true; // age is a boolean\n```"
    },
    {
      "id": 265,
      "question": "What is a void operator",
      "answer": "The void operator evaluates the given expression and then returns undefined (i.e, without returning value). The syntax would be as below:\n\n```javascript\nvoid expression;\nvoid expression;\n```\n\nLet's display a message without any redirection or reload:\n\n```html\n<a href=\"javascript:void(alert('Welcome to JS world'))\">\n  Click here to see a message\n</a>\n```\n\nNote: This operator is often used to obtain the undefined primitive value, using void(0). Also it can be used to call asynchronous functions without waiting for the result."
    },
    {
      "id": 266,
      "question": "How to set the cursor to wait",
      "answer": "The cursor can be set to wait in JavaScript by using the property cursor. Let's perform this behavior on page load using the below function:\n\n```javascript\nfunction myFunction() {\n  window.document.body.style.cursor = \"wait\";\n}\n```\n\nand this function invoked on page load:\n\n```html\n<body onload=\"myFunction()\"></body>\n```"
    },
    {
      "id": 267,
      "question": "How do you create an infinite loop",
      "answer": "You can create infinite loops using for and while loops without using any expressions. The for loop construct or syntax is better approach in terms of ESLint and code optimizer tools:\n\n```javascript\nfor (;;) {}\nwhile (true) {}\n```"
    },
    {
      "id": 268,
      "question": "Why do you need to avoid with statement",
      "answer": "JavaScript's with statement was intended to provide a shorthand for writing recurring accesses to objects. So it can help reduce file size by reducing the need to repeat a lengthy object reference without performance penalty. Let's take an example where it is used to avoid redundancy when accessing an object several times:\n\n```javascript\na.b.c.greeting = \"welcome\";\na.b.c.age = 32;\n```\n\nUsing with it turns this into:\n\n```javascript\nwith (a.b.c) {\n  greeting = \"welcome\";\n  age = 32;\n}\n```\n\nBut this with statement creates performance problems since one cannot predict whether an argument will refer to a real variable or to a property inside the with argument."
    },
    {
      "id": 269,
      "question": "What is the output of the following for loops",
      "answer": "```javascript\nfor (var i = 0; i < 4; i++) {\n  // global scope\n  setTimeout(() => console.log(i));\n}\n\nfor (let i = 0; i < 4; i++) {\n  // block scope\n  setTimeout(() => console.log(i));\n}\n```\n\nThe output of the above for loops is `4 4 4 4` and `0 1 2 3`\n\n**Explanation:** Due to the event queue/loop of javascript, the setTimeout callback function is called after the loop has been executed. Since the variable i is declared with the var keyword it became a global variable and the value was equal to 4 using iteration when the time setTimeout function is invoked. Hence, the output of the first loop is `4 4 4 4`.\n\nWhereas in the second loop, the variable i is declared as the let keyword it becomes a block scoped variable and it holds a new value(0, 1 ,2 3) for each iteration. Hence, the output of the second loop is `0 1 2 3`."
    },
    {
      "id": 270,
      "question": "List down some of the features of ES6",
      "answer": "Below are the list of some new features of ES6:\n\n1. Support for constants or immutable variables\n2. Block-scope support for variables, constants and functions\n3. Arrow functions\n4. Default parameters\n5. Rest and Spread Parameters\n6. Template Literals\n7. Multi-line Strings\n8. Destructuring Assignment\n9. Enhanced Object Literals\n10. Promises\n11. Classes\n12. Modules"
    },
    {
      "id": 271,
      "question": "What is ES6",
      "answer": "ES6 is the sixth edition of the javascript language and it was released in June 2015. It was initially known as ECMAScript 6 (ES6) and later renamed to ECMAScript 2015. Almost all the modern browsers support ES6 but for the old browsers there are many transpilers, like Babel.js etc."
    },
    {
      "id": 272,
      "question": "Can I redeclare let and const variables",
      "answer": "No, you cannot redeclare let and const variables. If you do, it throws below error:\n\n```\nUncaught SyntaxError: Identifier 'someVariable' has already been declared\n```\n\n**Explanation:** The variable declaration with var keyword refers to a function scope and the variable is treated as if it were declared at the top of the enclosing scope due to hoisting feature. So all the multiple declarations contributing to the same hoisted variable without any error. Let's take an example of re-declaring variables in the same scope for both var and let/const variables:\n\n```javascript\nvar name = \"John\";\nfunction myFunc() {\n  var name = \"Nick\";\n  var name = \"Abraham\"; // Re-assigned in the same function block\n  alert(name); // Abraham\n}\nmyFunc();\nalert(name); // John\n```\n\nThe block-scoped multi-declaration throws syntax error:\n\n```javascript\nlet name = \"John\";\nfunction myFunc() {\n  let name = \"Nick\";\n  let name = \"Abraham\"; // Uncaught SyntaxError: Identifier 'name' has already been declared\n  alert(name);\n}\n\nmyFunc();\nalert(name);\n```"
    },
    {
      "id": 273,
      "question": "Does the const variable make the value immutable",
      "answer": "No, the const variable doesn't make the value immutable. But it disallows subsequent assignments(i.e, You can declare with assignment but can't assign another value later):\n\n```javascript\nconst userList = [];\nuserList.push(\"John\"); // Can mutate even though it can't re-assign\nconsole.log(userList); // ['John']\n```"
    },
    {
      "id": 274,
      "question": "What are default parameters",
      "answer": "In ES5, we need to depend on logical OR operators to handle default values of function parameters. Whereas in ES6, Default function parameters feature allows parameters to be initialized with default values if no value or undefined is passed. Let's compare the behavior with an examples:\n\n```javascript\n//ES5\nvar calculateArea = function (height, width) {\n  height = height || 50;\n  width = width || 60;\n\n  return width * height;\n};\nconsole.log(calculateArea()); //300\n```\n\nThe default parameters makes the initialization more simpler:\n\n```javascript\n//ES6\nvar calculateArea = function (height = 50, width = 60) {\n  return width * height;\n};\n\nconsole.log(calculateArea()); //300\n```"
    },
    {
      "id": 275,
      "question": "What are template literals",
      "answer": "Template literals or template strings are string literals allowing embedded expressions. These are enclosed by the back-tick (`) character instead of double or single quotes. In ES6, this feature enables using dynamic expressions as below:\n\n```javascript\nvar greeting = `Welcome to JS World, Mr. ${firstName} ${lastName}.`;\n```\n\nIn ES5, you need break string like below:\n\n```javascript\nvar greeting = 'Welcome to JS World, Mr. ' + firstName + ' ' + lastName + '.';\n```\n\nNote: You can use multi-line strings and string interpolation features with template literals."
    },
    {
      "id": 276,
      "question": "How do you write multi-line strings in template literals",
      "answer": "In ES5, you would have to use newline escape characters('\\n') and concatenation symbols(+) in order to get multi-line strings:\n\n```javascript\nconsole.log(\"This is string sentence 1\\n\" + \"This is string sentence 2\");\n```\n\nWhereas in ES6, You don't need to mention any newline sequence character:\n\n```javascript\nconsole.log(`This is string sentence\n'This is string sentence 2`);\n```"
    },
    {
      "id": 277,
      "question": "What are nesting templates",
      "answer": "The nesting template is a feature supported within template literals syntax to allow inner backticks inside a placeholder ${ } within the template. For example, the below nesting template is used to display the icons based on user permissions whereas outer template checks for platform type:\n\n```javascript\nconst iconStyles = `icon ${\n  isMobilePlatform()\n    ? \"\"\n    : `icon-${user.isAuthorized ? \"submit\" : \"disabled\"}`\n}`;\n```\n\nYou can write the above use case without nesting template features as well. However, the nesting template feature is more compact and readable:\n\n```javascript\n//Without nesting templates\nconst iconStyles = `icon ${\n  isMobilePlatform()\n    ? \"\"\n    : user.isAuthorized\n    ? \"icon-submit\"\n    : \"icon-disabled\"\n}`;\n```"
    },
    {
      "id": 278,
      "question": "What are tagged templates",
      "answer": "Tagged templates are the advanced form of templates in which tags allow you to parse template literals with a function. The tag function accepts the first parameter as an array of strings and remaining parameters as expressions. This function can also return manipulated strings based on parameters. Let's see the usage of this tagged template behavior of an IT professional skill set in an organization:\n\n```javascript\nvar user1 = \"John\";\nvar skill1 = \"JavaScript\";\nvar experience1 = 15;\n\nvar user2 = \"Kane\";\nvar skill2 = \"JavaScript\";\nvar experience2 = 5;\n\nfunction myInfoTag(strings, userExp, experienceExp, skillExp) {\n  var str0 = strings[0]; // \"Mr/Ms. \"\n  var str1 = strings[1]; // \" is a/an \"\n  var str2 = strings[2]; // \"in\"\n\n  var expertiseStr;\n  if (experienceExp > 10) {\n    expertiseStr = \"expert developer\";\n  } else if (skillExp > 5 && skillExp <= 10) {\n    expertiseStr = \"senior developer\";\n  } else {\n    expertiseStr = \"junior developer\";\n  }\n\n  return `${str0}${userExp}${str1}${expertiseStr}${str2}${skillExp}`;\n}\n\nvar output1 = myInfoTag`Mr/Ms. ${user1} is a/an ${experience1} in ${skill1}`;\nvar output2 = myInfoTag`Mr/Ms. ${user2} is a/an ${experience2} in ${skill2}`;\n\nconsole.log(output1); // Mr/Ms. John is a/an expert developer in JavaScript\nconsole.log(output2); // Mr/Ms. Kane is a/an junior developer in JavaScript\n```"
    },
    {
      "id": 279,
      "question": "What are raw strings",
      "answer": "ES6 provides a raw strings feature using the String.raw() method which is used to get the raw string form of template strings. This feature allows you to access the raw strings as they were entered, without processing escape sequences. For example, the usage would be as below:\n\n```javascript\nvar calculationString = String.raw`The sum of numbers is \\n${\n  1 + 2 + 3 + 4\n}!`;\nconsole.log(calculationString); // The sum of numbers is \\n10!\n```\n\nIf you don't use raw strings, the newline character sequence will be processed by displaying the output in multiple lines:\n\n```javascript\nvar calculationString = `The sum of numbers is \\n${1 + 2 + 3 + 4}!`;\nconsole.log(calculationString);\n// The sum of numbers is\n// 10!\n```\n\nAlso, the raw property is available on the first argument to the tag function:\n\n```javascript\nfunction tag(strings) {\n  console.log(strings.raw[0]);\n}\n```"
    },
    {
      "id": 280,
      "question": "What is destructuring assignment",
      "answer": "The destructuring assignment is a JavaScript expression that makes it possible to unpack values from arrays or properties from objects into distinct variables. Let's get the month values from an array using destructuring assignment:\n\n```javascript\nvar [one, two, three] = [\"JAN\", \"FEB\", \"MARCH\"];\n\nconsole.log(one); // \"JAN\"\nconsole.log(two); // \"FEB\"\nconsole.log(three); // \"MARCH\"\n```\n\nand you can get user properties of an object using destructuring assignment:\n\n```javascript\nvar { name, age } = { name: \"John\", age: 32 };\n\nconsole.log(name); // John\nconsole.log(age); // 32\n```"
    },
    {
      "id": 281,
      "question": "What are default values in destructuring assignment",
      "answer": "A variable can be assigned a default value when the value unpacked from the array or object is undefined during destructuring assignment. It helps to avoid setting default values separately for each assignment. Let's take an example for both arrays and object use cases:\n\n**Arrays destructuring:**\n\n```javascript\nvar x, y, z;\n\n[x = 2, y = 4, z = 6] = [10];\nconsole.log(x); // 10\nconsole.log(y); // 4\nconsole.log(z); // 6\n```\n\n**Objects destructuring:**\n\n```javascript\nvar { x = 2, y = 4, z = 6 } = { x: 10 };\n\nconsole.log(x); // 10\nconsole.log(y); // 4\nconsole.log(z); // 6\n```"
    },
    {
      "id": 282,
      "question": "How do you swap variables in destructuring assignment",
      "answer": "If you don't use destructuring assignment, swapping two values requires a temporary variable. Whereas using a destructuring feature, two variable values can be swapped in one destructuring expression. Let's swap two number variables in array destructuring assignment:\n\n```javascript\nvar x = 10,\n  y = 20;\n\n[x, y] = [y, x];\nconsole.log(x); // 20\nconsole.log(y); // 10\n```"
    },
    {
      "id": 283,
      "question": "What are enhanced object literals",
      "answer": "Object literals make it easy to quickly create objects with properties inside the curly braces. For example, it provides shorter syntax for common object property definition as below:\n\n```javascript\n//ES6\nvar x = 10,\n  y = 20;\nobj = { x, y };\nconsole.log(obj); // {x: 10, y:20}\n```\n\n```javascript\n//ES5\nvar x = 10,\n  y = 20;\nobj = { x: x, y: y };\nconsole.log(obj); // {x: 10, y:20}\n```"
    },
    {
      "id": 284,
      "question": "What are dynamic imports",
      "answer": "The dynamic imports using import() function syntax allows us to load modules on demand by using promises or the async/await syntax. Currently this feature is in stage4 proposal. The main advantage of dynamic imports is reduction of our bundle's sizes, the size/payload response of our requests and overall improvements in the user experience. The syntax of dynamic imports would be as below:\n\n```javascript\nimport(\"./Module\").then((Module) => Module.method());\n```"
    },
    {
      "id": 285,
      "question": "What are the use cases for dynamic imports",
      "answer": "Below are some of the use cases of using dynamic imports over static imports:\n\n1. **Import a module on-demand or conditionally.** For example, if you want to load a polyfill on legacy browser:\n\n```javascript\nif (isLegacyBrowser()) {\n    import(¬∑¬∑¬∑)\n    .then(¬∑¬∑¬∑);\n}\n```\n\n2. **Compute the module specifier at runtime.** For example, you can use it for internationalization:\n\n```javascript\nimport(`messages_${getLocale()}.js`).then(¬∑¬∑¬∑);\n```\n\n3. **Import a module from within a regular script instead a module.**"
    },
    {
      "id": 286,
      "question": "What are typed arrays",
      "answer": "Typed arrays are array-like objects from ECMAScript 6 API for handling binary data. JavaScript provides 12 Typed array types:\n\n1. Int8Array: An array of 8-bit signed integers\n2. Uint8Array: An array of 8-bit unsigned integers\n3. Uint8ClampedArray: An array of 8-bit unsigned integers clamped to 0-255\n4. Int16Array: An array of 16-bit signed integers\n5. Uint16Array: An array of 16-bit unsigned integers\n6. Int32Array: An array of 32-bit signed integers\n7. Uint32Array: An array of 32-bit unsigned integers\n8. BigInt64Array: An array of 64-bit signed BigInts\n9. BigUint64Array: An array of 64-bit unsigned BigInts\n10. Float16Array: An array of 16-bit floating point numbers\n11. Float32Array: An array of 32-bit floating point numbers\n12. Float64Array: An array of 64-bit floating point numbers\n\nFor example, you can create an array of 8-bit signed integers as below:\n\n```javascript\nconst a = new Int8Array();\n// You can pre-allocate n bytes\nconst bytes = 1024;\nconst a = new Int8Array(bytes);\n```"
    },
    {
      "id": 287,
      "question": "What are the advantages of module loaders",
      "answer": "The module loaders provides the below features:\n\n1. Dynamic loading\n2. State isolation\n3. Global namespace isolation\n4. Compilation hooks\n5. Nested virtualization"
    },
    {
      "id": 288,
      "question": "What is collation",
      "answer": "Collation is used for sorting a set of strings and searching within a set of strings. It is parameterized by locale and aware of Unicode. Let's take comparison and sorting features:\n\n**Comparison:**\n```javascript\nvar list = [\"√§\", \"a\", \"z\"]; // In German,  \"√§\" sorts with \"a\" Whereas in Swedish, \"√§\" sorts after \"z\"\nvar l10nDE = new Intl.Collator(\"de\");\nvar l10nSV = new Intl.Collator(\"sv\");\nconsole.log(l10nDE.compare(\"√§\", \"z\") === -1); // true\nconsole.log(l10nSV.compare(\"√§\", \"z\") === +1); // true\n```\n\n**Sorting:**\n```javascript\nvar list = [\"√§\", \"a\", \"z\"]; // In German,  \"√§\" sorts with \"a\" Whereas in Swedish, \"√§\" sorts after \"z\"\nvar l10nDE = new Intl.Collator(\"de\");\nvar l10nSV = new Intl.Collator(\"sv\");\nconsole.log(list.sort(l10nDE.compare)); // [ \"a\", \"√§\", \"z\" ]\nconsole.log(list.sort(l10nSV.compare)); // [ \"a\", \"z\", \"√§\" ]\n```"
    },
    {
      "id": 289,
      "question": "What is for...of statement",
      "answer": "The for...of statement creates a loop iterating over iterable objects or elements such as built-in String, Array, Array-like objects (like arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. The basic usage of for...of statement on arrays would be as below:\n\n```javascript\nlet arrayIterable = [10, 20, 30, 40, 50];\n\nfor (let value of arrayIterable) {\n  value++;\n  console.log(value); // 11 21 31 41 51\n}\n```"
    },
    {
      "id": 290,
      "question": "What is the output of below spread operator array",
      "answer": "```javascript\n[...\"John Resig\"];\n```\n\nThe output of the array is `['J', 'o', 'h', 'n', ' ', 'R', 'e', 's', 'i', 'g']`\n\n**Explanation:** The string is an iterable type and the spread operator within an array maps every character of an iterable to one element. Hence, each character of a string becomes an element within an Array."
    },
    {
      "id": 291,
      "question": "Is PostMessage secure",
      "answer": "Yes, postMessages can be considered very secure as long as the programmer/developer is careful about checking the origin and source of an arriving message. But if you try to send/receive a message without verifying its source will create cross-site scripting attacks."
    },
    {
      "id": 292,
      "question": "What are the problems with postmessage target origin as wildcard",
      "answer": "The second argument of postMessage method specifies which origin is allowed to receive the message. If you use the wildcard \"*\" as an argument then any origin is allowed to receive the message. In this case, there is no way for the sender window to know if the target window is at the target origin when sending the message. If the target window has been navigated to another origin, the other origin would receive the data. Hence, this may lead to XSS vulnerabilities.\n\n```javascript\ntargetWindow.postMessage(message, \"*\");\n```"
    },
    {
      "id": 293,
      "question": "How do you avoid receiving postMessages from attackers",
      "answer": "Since the listener listens for any message, an attacker can trick the application by sending a message from the attacker's origin, which gives an impression that the receiver received the message from the actual sender's window. You can avoid this issue by validating the origin of the message on the receiver's end using the \"message.origin\" attribute.\n\nFor example, let's check the sender's origin http://www.some-sender.com on receiver side www.some-receiver.com:\n\n```javascript\n//Listener on http://www.some-receiver.com/\nwindow.addEventListener(\"message\", function(message){\n    if(/^http://www\\.some-sender\\.com$/.test(message.origin)){\n         console.log('You received the data from valid sender', message.data);\n   }\n});\n```"
    },
    {
      "id": 294,
      "question": "Can I avoid using postMessages completely",
      "answer": "You cannot avoid using postMessages completely(or 100%). Even though your application doesn't use postMessage considering the risks, a lot of third party scripts use postMessage to communicate with the third party service. So your application might be using postMessage without your knowledge."
    },
    {
      "id": 295,
      "question": "Is postMessages synchronous",
      "answer": "The postMessages are synchronous in IE8 browser but they are asynchronous in IE9 and all other modern browsers (i.e, IE9+, Firefox, Chrome, Safari). Due to this asynchronous behaviour, we use a callback mechanism when the postMessage is returned."
    },
    {
      "id": 296,
      "question": "What paradigm is Javascript",
      "answer": "JavaScript is a multi-paradigm language, supporting imperative/procedural programming, Object-Oriented Programming and functional programming. JavaScript supports Object-Oriented Programming with prototypical inheritance."
    },
    {
      "id": 297,
      "question": "What is the difference between internal and external javascript",
      "answer": "**Internal JavaScript:** It is the source code within the script tag.\n\n**External JavaScript:** The source code is stored in an external file (stored with .js extension) and referred with in the tag."
    },
    {
      "id": 298,
      "question": "Is JavaScript faster than server side script",
      "answer": "Yes, JavaScript is faster than server side scripts. Because JavaScript is a client-side script it does not require any web server's help for its computation or calculation. So JavaScript is always faster than any server-side script like ASP, PHP, etc."
    },
    {
      "id": 299,
      "question": "How do you get the status of a checkbox",
      "answer": "You can apply the checked property on the selected checkbox in the DOM. If the value is true it means the checkbox is checked, otherwise it is unchecked. For example, the below HTML checkbox element can be access using javascript as below:\n\n```html\n<input type=\"checkbox\" id=\"checkboxname\" value=\"Agree\" />\nAgree the conditions\n<br />\n```\n\n```javascript\nconsole.log(document.getElementById('checkboxname').checked); // true or false\n```"
    },
    {
      "id": 300,
      "question": "What is the purpose of double tilde operator",
      "answer": "The double tilde operator(~~) is known as double NOT bitwise operator. This operator is a slightly quicker substitute for Math.floor()."
    },
    {
      "id": 301,
      "question": "How do you convert character to ASCII code",
      "answer": "You can use the String.prototype.charCodeAt() method to convert string characters to ASCII numbers. For example, let's find ASCII code for the first letter of 'ABC' string:\n\n```javascript\n\"ABC\".charCodeAt(0); // returns 65\n```\n\nWhereas String.fromCharCode() method converts numbers to equal ASCII characters:\n\n```javascript\nString.fromCharCode(65, 66, 67); // returns 'ABC'\n```"
    },
    {
      "id": 302,
      "question": "What is ArrayBuffer",
      "answer": "An ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer. You can create it as below:\n\n```javascript\nlet buffer = new ArrayBuffer(16); // create a buffer of length 16\nalert(buffer.byteLength); // 16\n```\n\nTo manipulate an ArrayBuffer, we need to use a \"view\" object:\n\n```javascript\n//Create a DataView referring to the buffer\nlet view = new DataView(buffer);\n```"
    },
    {
      "id": 303,
      "question": "What is the output of below string expression",
      "answer": "```javascript\nconsole.log(\"Welcome to JS world\"[0]);\n```\n\nThe output of the above expression is \"W\". \n\n**Explanation:** The bracket notation with specific index on a string returns the character at a specific location. Hence, it returns the character \"W\" of the string. Since this is not supported in IE7 and below versions, you may need to use the .charAt() method to get the desired result."
    },
    {
      "id": 304,
      "question": "What is the purpose of Error object",
      "answer": "The Error constructor creates an error object and the instances of error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. The syntax of error object would be as below:\n\n```javascript\nnew Error([message[, fileName[, lineNumber]]])\n```\n\nYou can throw user defined exceptions or errors using Error object in try...catch block as below:\n\n```javascript\ntry {\n  if (withdraw > balance)\n    throw new Error(\"Oops! You don't have enough balance\");\n} catch (e) {\n  console.log(e.name + \": \" + e.message);\n}\n```"
    },
    {
      "id": 305,
      "question": "What is the purpose of EvalError object",
      "answer": "The EvalError object indicates an error regarding the global eval() function. Even though this exception is not thrown by JavaScript anymore, the EvalError object remains for compatibility. The syntax of this expression would be as below:\n\n```javascript\nnew EvalError([message[, fileName[, lineNumber]]])\n```\n\nYou can throw EvalError with in try...catch block as below:\n\n```javascript\ntry {\n  throw new EvalError('Eval function error', 'someFile.js', 100);\n} catch (e) {\n  console.log(e.message, e.name, e.fileName); // \"Eval function error\", \"EvalError\", \"someFile.js\"\n}\n```"
    },
    {
      "id": 306,
      "question": "What are the list of cases error thrown from non-strict mode to strict mode",
      "answer": "When you apply 'use strict'; syntax, some of the below cases will throw a SyntaxError before executing the script:\n\n1. **When you use Octal syntax**\n```javascript\nvar n = 022;\n```\n\n2. **Using with statement**\n\n3. **When you use delete operator on a variable name**\n\n4. **Using eval or arguments as variable or function argument name**\n\n5. **When you use newly reserved keywords**\n\n6. **When you declare a function in a block and access it from outside of the block**\n```javascript\nif (someCondition) {\n  function f() {}\n}\nf(); // ReferenceError: f is not defined\n```\n\nHence, the errors from above cases are helpful to avoid errors in development/production environments."
    },
    {
      "id": 307,
      "question": "Do all objects have prototypes",
      "answer": "No. All objects have prototypes except two exceptions:\n\n1. **Object.prototype itself** ‚Äî This is the base object in the prototype chain, and its prototype is null.\n2. **Objects created with Object.create(null)** ‚Äî These are deliberately created with no prototype, so they don't inherit from Object.prototype.\n\nAll other standard objects do have a prototype."
    },
    {
      "id": 308,
      "question": "What is the difference between a parameter and an argument",
      "answer": "**Parameter** is the variable name of a function definition whereas an **argument** represents the value given to a function when it is invoked. Let's explain this with a simple function:\n\n```javascript\nfunction myFunction(parameter1, parameter2, parameter3) {\n  console.log(arguments[0]); // \"argument1\"\n  console.log(arguments[1]); // \"argument2\"\n  console.log(arguments[2]); // \"argument3\"\n}\nmyFunction(\"argument1\", \"argument2\", \"argument3\");\n```"
    },
    {
      "id": 309,
      "question": "What is the purpose of some method in arrays",
      "answer": "The some() method is used to test whether at least one element in the array passes the test implemented by the provided function. The method returns a boolean value. Let's take an example to test for any odd elements:\n\n```javascript\nvar array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nvar odd = (element) => element % 2 !== 0;\n\nconsole.log(array.some(odd)); // true (the odd element exists)\n```"
    },
    {
      "id": 310,
      "question": "How do you combine two or more arrays",
      "answer": "The concat() method is used to join two or more arrays by returning a new array containing all the elements. The syntax would be as below:\n\n```javascript\narray1.concat(array2, array3, ..., arrayX)\n```\n\nLet's take an example of array's concatenation with veggies and fruits arrays:\n\n```javascript\nvar veggies = [\"Tomato\", \"Carrot\", \"Cabbage\"];\nvar fruits = [\"Apple\", \"Orange\", \"Pears\"];\nvar veggiesAndFruits = veggies.concat(fruits);\nconsole.log(veggiesAndFruits); // Tomato, Carrot, Cabbage, Apple, Orange, Pears\n```"
    },
    {
      "id": 311,
      "question": "What is the difference between Shallow and Deep copy",
      "answer": "There are two ways to copy an object:\n\n**Shallow Copy:** Shallow copy is a bitwise copy of an object. A new object is created that has an exact copy of the values in the original object. If any of the fields of the object are references to other objects, just the reference addresses are copied i.e., only the memory address is copied.\n\n**Example:**\n```javascript\nvar empDetails = {\n  name: \"John\",\n  age: 25,\n  expertise: \"Software Developer\",\n};\n// Create a duplicate\nvar empDetailsShallowCopy = empDetails; //Shallow copying!\n// If we change some property value in the duplicate one:\nempDetailsShallowCopy.name = \"Johnson\";\n```\nThe above statement will also change the name of empDetails, since we have a shallow copy.\n\n**Deep copy:** A deep copy copies all fields, and makes copies of dynamically allocated memory pointed to by the fields. A deep copy occurs when an object is copied along with the objects to which it refers.\n\n**Example:**\n```javascript\nvar empDetails = {\n  name: \"John\",\n  age: 25,\n  expertise: \"Software Developer\",\n};\n// Create a deep copy by using the properties from the original object into new variable\nvar empDetailsDeepCopy = {\n  name: empDetails.name,\n  age: empDetails.age,\n  expertise: empDetails.expertise,\n};\n```\nNow if you change empDetailsDeepCopy.name, it will only affect empDetailsDeepCopy & not empDetails."
    },
    {
      "id": 312,
      "question": "How do you create specific number of copies of a string",
      "answer": "The repeat() method is used to construct and return a new string which contains the specified number of copies of the string on which it was called, concatenated together. Remember that this method has been added to the ECMAScript 2015 specification. Let's take an example of Hello string to repeat it 4 times:\n\n```javascript\n\"Hello\".repeat(4); // 'HelloHelloHelloHello'\n```"
    },
    {
      "id": 313,
      "question": "How do you return all matching strings against a regular expression",
      "answer": "The matchAll() method can be used to return an iterator of all results matching a string against a regular expression. For example, the below example returns an array of matching string results against a regular expression:\n\n```javascript\nlet regexp = /Hello(\\d?)/g;\nlet greeting = \"Hello1Hello2Hello3\";\n\nlet greetingList = [...greeting.matchAll(regexp)];\n\nconsole.log(greetingList[0][0]); //Hello1\nconsole.log(greetingList[1][0]); //Hello2\nconsole.log(greetingList[2][0]); //Hello3\n```"
    },
    {
      "id": 314,
      "question": "How do you trim a string at the beginning or ending",
      "answer": "The trim method of string prototype is used to trim on both sides of a string. But if you want to trim especially at the beginning or ending of the string then you can use trimStart/trimLeft and trimEnd/trimRight methods. Let's see an example of these methods on a greeting message:\n\n```javascript\nvar greeting = \"   Hello, Goodmorning!   \";\n\nconsole.log(greeting); // \"   Hello, Goodmorning!   \"\nconsole.log(greeting.trimStart()); // \"Hello, Goodmorning!   \"\nconsole.log(greeting.trimLeft()); // \"Hello, Goodmorning!   \"\n\nconsole.log(greeting.trimEnd()); // \"   Hello, Goodmorning!\"\nconsole.log(greeting.trimRight()); // \"   Hello, Goodmorning!\"\n```"
    },
    {
      "id": 315,
      "question": "What is the output of below console statement with unary operator",
      "answer": "Let's take console statement with unary operator as given below:\n\n```javascript\nconsole.log(+\"Hello\"); // NaN\n```\n\nThe output of the above console log statement returns NaN. Because the element is prefixed by the unary operator and the JavaScript interpreter will try to convert that element into a number type. Since the conversion fails, the value of the statement results in NaN value."
    },
    {
      "id": 316,
      "question": "Does javascript uses mixins",
      "answer": "JavaScript does not have built-in support for mixins as a formal language feature. However, developers commonly implement mixins using various patterns to enable code reuse and composition.\n\nA mixin is a way to add reusable functionality from one or more objects into a class or another object, without using classical inheritance. It promotes object composition by combining behaviors or properties from different sources into a single destination.\n\n**Mixin Example using Object composition:**\n```javascript\n// Define a mixin\nconst canEat = {\n  eat() {\n    console.log(\"Eating...\");\n  }\n};\n\nconst canWalk = {\n  walk() {\n    console.log(\"Walking...\");\n  }\n};\n\nconst canRead = {\n  read() {\n    console.log(\"Reading...\");\n  }\n};\n\n// Create a class\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\n// Apply mixins\nObject.assign(Person.prototype, canEat, canWalk, canRead);\n\n// Use it\nconst person = new Person(\"Sudheer\");\nperson.eat();  // Output: Eating...\nperson.walk(); // Output: Walking...\nperson.read(); // Output: Reading...\n```\n\n**Benefits:**\n- Avoids deep inheritance hierarchies\n- Encourages composition over inheritance\n- Promotes reusable and modular code\n\nModern JavaScript favors mixin alternatives like composition, delegation, higher-order functions, and class mixins to promote reusable and modular code."
    },
    {
      "id": 317,
      "question": "What is a thunk function",
      "answer": "A thunk is just a function which delays the evaluation of the value. It doesn't take any arguments but gives the value whenever you invoke the thunk. i.e, It is used not to execute now but it will be sometime in the future. Let's take a synchronous example:\n\n```javascript\nconst add = (x, y) => x + y;\n\nconst thunk = () => add(2, 3);\n\nthunk(); // 5\n```"
    },
    {
      "id": 318,
      "question": "What are asynchronous thunks",
      "answer": "The asynchronous thunks are useful to make network requests. Let's see an example of network requests:\n\n```javascript\nfunction fetchData(fn) {\n  fetch(\"https://jsonplaceholder.typicode.com/todos/1\")\n    .then((response) => response.json())\n    .then((json) => fn(json));\n}\n\nconst asyncThunk = function () {\n  return fetchData(function getData(data) {\n    console.log(data);\n  });\n};\n\nasyncThunk();\n```\n\nThe getData function won't be called immediately but it will be invoked only when the data is available from API endpoint. The setTimeout function is also used to make our code asynchronous. The best real time example is redux state management library which uses the asynchronous thunks to delay the actions to dispatch."
    },
    {
      "id": 319,
      "question": "What is the output of below function calls",
      "answer": "Code snippet:\n\n```javascript\nconst circle = {\n  radius: 20,\n  diameter() {\n    return this.radius * 2;\n  },\n  perimeter: () => 2 * Math.PI * this.radius,\n};\nconsole.log(circle.diameter());\nconsole.log(circle.perimeter());\n```\n\n**Output:** The output is 40 and NaN.\n\n**Explanation:** Remember that diameter is a regular function, whereas the value of perimeter is an arrow function. The this keyword of a regular function (i.e, diameter) refers to the surrounding scope which is a class (i.e, Shape object). Whereas this keyword of perimeter function refers to the surrounding scope which is a window object. Since there is no radius property on window objects it returns an undefined value and the multiple of number value returns NaN value."
    },
    {
      "id": 320,
      "question": "How to remove all line breaks from a string",
      "answer": "The easiest approach is using regular expressions to detect and replace newlines in the string. In this case, we use replace function along with string to replace with, which in our case is an empty string.\n\n```javascript\nfunction remove_linebreaks(var message) {\n    return message.replace(/[\\r\\n]+/gm, \"\");\n}\n```\n\nIn the above expression, g and m are for global and multiline flags."
    },
    {
      "id": 321,
      "question": "What is the difference between reflow and repaint",
      "answer": "A **repaint** occurs when changes are made which affect the visibility of an element, but not its layout. Examples of this include outline, visibility, or background color.\n\nA **reflow** involves changes that affect the layout of a portion of the page (or the whole page). Resizing the browser window, changing the font, content changing (such as user typing text), using JavaScript methods involving computed styles, adding or removing elements from the DOM, and changing an element's classes are a few of the things that can trigger reflow.\n\nReflow of an element causes the subsequent reflow of all child and ancestor elements as well as any elements following it in the DOM."
    },
    {
      "id": 322,
      "question": "What happens with negating an array",
      "answer": "Negating an array with ! character will coerce the array into a boolean. Since Arrays are considered to be truthy So negating it will return false.\n\n```javascript\nconsole.log(![]); // false\n```"
    },
    {
      "id": 323,
      "question": "What happens if we add two arrays",
      "answer": "If you add two arrays together, it will convert them both to strings and concatenate them. For example, the result of adding arrays would be as below:\n\n```javascript\nconsole.log([\"a\"] + [\"b\"]); // \"ab\"\nconsole.log([] + []); // \"\"\nconsole.log(![] + []); // \"false\", because ![] returns false.\n```"
    },
    {
      "id": 324,
      "question": "What is the output of prepend additive operator on falsy values",
      "answer": "If you prepend the additive(+) operator on falsy values(null, undefined, NaN, false, \"\"), the falsy value converts to a number value zero. Let's display them on browser console as below:\n\n```javascript\nconsole.log(+null); // 0\nconsole.log(+undefined); // NaN\nconsole.log(+false); // 0\nconsole.log(+NaN); // NaN\nconsole.log(+\"\"); // 0\n```"
    },
    {
      "id": 325,
      "question": "How do you create self string using special characters",
      "answer": "The self string can be formed with the combination of []()!+ characters. You need to remember the below conventions to achieve this pattern:\n\n1. Since Arrays are truthful values, negating the arrays will produce false: ![] === false\n2. As per JavaScript coercion rules, the addition of arrays together will toString them: [] + [] === \"\"\n3. Prepend an array with + operator will convert an array to false, the negation will make it true and finally converting the result will produce value '1': +(!(+[])) === 1\n\nBy applying the above rules, we can derive below conditions:\n\n```javascript\n(![] + [] === \"false\" + !+[]) === 1;\n```\n\nNow the character pattern would be created as below:\n\n```javascript\n      s               e               l               f\n ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^\n\n (![] + [])[3] + (![] + [])[4] + (![] + [])[2] + (![] + [])[0]\n ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^\n(![] + [])[+!+[]+!+[]+!+[]] +\n(![] + [])[+!+[]+!+[]+!+[]+!+[]] +\n(![] + [])[+!+[]+!+[]] +\n(![] + [])[+[]]\n```"
    },
    {
      "id": 326,
      "question": "How do you remove falsy values from an array",
      "answer": "You can apply the filter method on the array by passing Boolean as a parameter. This way it removes all falsy values(0, undefined, null, false and \"\") from the array.\n\n```javascript\nconst myArray = [false, null, 1, 5, undefined];\nmyArray.filter(Boolean); // [1, 5] // is same as myArray.filter(x => x);\n```"
    },
    {
      "id": 327,
      "question": "How do you get unique values of an array",
      "answer": "You can get unique values of an array with the combination of Set and rest expression/spread(...) syntax.\n\n```javascript\nconsole.log([...new Set([1, 2, 4, 4, 3])]); // [1, 2, 4, 3]\n```"
    },
    {
      "id": 328,
      "question": "What is destructuring aliases",
      "answer": "Sometimes you would like to have a destructured variable with a different name than the property name. In that case, you'll use a : newName to specify a name for the variable. This process is called destructuring aliases.\n\n```javascript\nconst obj = { x: 1 };\n// Grabs obj.x as { otherName }\nconst { x: otherName } = obj;\n```"
    },
    {
      "id": 329,
      "question": "How do you map the array values without using map method",
      "answer": "You can map the array values without using the map method by just using the from method of Array. Let's map city names from Countries array:\n\n```javascript\nconst countries = [\n  { name: \"India\", capital: \"Delhi\" },\n  { name: \"US\", capital: \"Washington\" },\n  { name: \"Russia\", capital: \"Moscow\" },\n  { name: \"Singapore\", capital: \"Singapore\" },\n  { name: \"China\", capital: \"Beijing\" },\n  { name: \"France\", capital: \"Paris\" },\n];\n\nconst cityNames = Array.from(countries, ({ capital }) => capital);\nconsole.log(cityNames); // ['Delhi, 'Washington', 'Moscow', 'Singapore', 'Beijing', 'Paris']\n```"
    },
    {
      "id": 330,
      "question": "How do you empty an array",
      "answer": "You can empty an array quickly by setting the array length to zero.\n\n```javascript\nlet cities = [\"Singapore\", \"Delhi\", \"London\"];\ncities.length = 0; // cities becomes []\n```"
    },
    {
      "id": 331,
      "question": "How do you round numbers to certain decimals",
      "answer": "You can round numbers to a certain number of decimals using toFixed method from native javascript.\n\n```javascript\nlet pie = 3.141592653;\npie = pie.toFixed(3); // 3.142\n```"
    },
    {
      "id": 332,
      "question": "What is the easiest way to convert an array to an object",
      "answer": "You can convert an array to an object with the same data using spread(...) operator.\n\n```javascript\nvar fruits = [\"banana\", \"apple\", \"orange\", \"watermelon\"];\nvar fruitsObject = { ...fruits };\nconsole.log(fruitsObject); // {0: \"banana\", 1: \"apple\", 2: \"orange\", 3: \"watermelon\"}\n```"
    },
    {
      "id": 333,
      "question": "How do you create an array with some data",
      "answer": "You can create an array with some data or an array with the same values using fill method.\n\n```javascript\nvar newArray = new Array(5).fill(\"0\");\nconsole.log(newArray); // [\"0\", \"0\", \"0\", \"0\", \"0\"]\n```"
    },
    {
      "id": 334,
      "question": "What are the placeholders from console object",
      "answer": "Below are the list of placeholders available from console object:\n\n- **%o** ‚Äî It takes an object\n- **%s** ‚Äî It takes a string\n- **%d** ‚Äî It is used for a decimal or integer\n\nThese placeholders can be represented in the console.log as below:\n\n```javascript\nconst user = { name: \"John\", id: 1, city: \"Delhi\" };\nconsole.log(\n  \"Hello %s, your details %o are available in the object form\",\n  \"John\",\n  user\n); // Hello John, your details {name: \"John\", id: 1, city: \"Delhi\"} are available in object\n```"
    },
    {
      "id": 335,
      "question": "Is it possible to add CSS to console messages",
      "answer": "Yes, you can apply CSS styles to console messages similar to html text on the web page.\n\n```javascript\nconsole.log(\n  \"%c The text has blue color, with large font and red background\",\n  \"color: blue; font-size: x-large; background: red\"\n);\n```\n\n**Note:** All CSS styles can be applied to console messages."
    },
    {
      "id": 336,
      "question": "What is the purpose of dir method of console object",
      "answer": "The console.dir() is used to display an interactive list of the properties of the specified JavaScript object as JSON.\n\n```javascript\nconst user = { name: \"John\", id: 1, city: \"Delhi\" };\nconsole.dir(user);\n```\n\nThe user object displayed in JSON representation."
    },
    {
      "id": 337,
      "question": "Is it possible to debug HTML elements in console",
      "answer": "Yes, it is possible to get and debug HTML elements in the console just like inspecting elements.\n\n```javascript\nconst element = document.getElementsByTagName(\"body\")[0];\nconsole.log(element);\n```\n\nIt prints the HTML element in the console."
    },
    {
      "id": 338,
      "question": "How do you display data in a tabular format using console object",
      "answer": "The console.table() is used to display data in the console in a tabular format to visualize complex arrays or objects.\n\n```javascript\nconst users = [\n  { name: \"John\", id: 1, city: \"Delhi\" },\n  { name: \"Max\", id: 2, city: \"London\" },\n  { name: \"Rod\", id: 3, city: \"Paris\" },\n];\nconsole.table(users);\n```\n\nThe data visualized in a table format.\n\n**Note:** Remember that console.table() is not supported in IE."
    },
    {
      "id": 339,
      "question": "How do you verify that an argument is a Number or not",
      "answer": "The combination of IsNaN and isFinite methods are used to confirm whether an argument is a number or not.\n\n```javascript\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n```"
    },
    {
      "id": 340,
      "question": "How do you create copy to clipboard button",
      "answer": "You need to select the content (using .select() method) of the input element and execute the copy command with execCommand (i.e, execCommand('copy')). You can also execute other system commands like cut and paste.\n\n```javascript\ndocument.querySelector(\"#copy-button\").onclick = function () {\n  // Select the content\n  document.querySelector(\"#copy-input\").select();\n  // Copy to the clipboard\n  document.execCommand(\"copy\");\n};\n```"
    },
    {
      "id": 341,
      "question": "What is the shortcut to get timestamp",
      "answer": "You can use new Date().getTime() to get the current timestamp. There is an alternative shortcut to get the value.\n\n```javascript\nconsole.log(+new Date());\nconsole.log(Date.now());\n```"
    },
    {
      "id": 342,
      "question": "How do you flattening multi dimensional arrays",
      "answer": "Flattening bi-dimensional arrays is trivial with Spread operator.\n\n```javascript\nconst biDimensionalArr = [11, [22, 33], [44, 55], [66, 77], 88, 99];\nconst flattenArr = [].concat(...biDimensionalArr); // [11, 22, 33, 44, 55, 66, 77, 88, 99]\n```\n\nBut you can make it work with multi-dimensional arrays by recursive calls:\n\n```javascript\nfunction flattenMultiArray(arr) {\n  const flattened = [].concat(...arr);\n  return flattened.some((item) => Array.isArray(item))\n    ? flattenMultiArray(flattened)\n    : flattened;\n}\nconst multiDimensionalArr = [\n  11,\n  [22, 33],\n  [44, [55, 66, [77, [88]], 99]],\n];\nconst flatArr = flattenMultiArray(multiDimensionalArr); // [11, 22, 33, 44, 55, 66, 77, 88, 99]\n```\n\nAlso you can use the flat method of Array:\n\n```javascript\nconst arr = [1, [2, 3], 4, 5, [6, 7]];\nconst fllattenArr = arr.flat(); // [1, 2, 3, 4, 5, 6, 7]\n\n// And for multiDimensional arrays\nconst multiDimensionalArr = [\n  11,\n  [22, 33],\n  [44, [55, 66, [77, [88]], 99]],\n];\nconst oneStepFlat = multiDimensionalArr.flat(1); // [11, 22, 33, 44, [55, 66, [77, [88]], 99]]\nconst towStep = multiDimensionalArr.flat(2); // [11, 22, 33, 44, 55, 66, [77, [88]], 99]\nconst fullyFlatArray = multiDimensionalArr.flat(Infinity); // [11, 22, 33, 44, 55, 66, 77, 88, 99]\n```"
    },
    {
      "id": 343,
      "question": "What is the easiest multi condition checking",
      "answer": "You can use indexOf to compare input with multiple values instead of checking each value as one condition.\n\n```javascript\n// Verbose approach\nif (\n  input === \"first\" ||\n  input === 1 ||\n  input === \"second\" ||\n  input === 2\n) {\n  someFunction();\n}\n// Shortcut\nif ([\"first\", 1, \"second\", 2].indexOf(input) !== -1) {\n  someFunction();\n}\n```"
    },
    {
      "id": 344,
      "question": "How do you capture browser back button",
      "answer": "The beforeunload event is triggered when the window, the document and its resources are about to be unloaded. This event is helpful to warn users about losing the current data and detect back button event.\n\n```javascript\nwindow.addEventListener(\"beforeunload\", () => {\n  console.log(\"Clicked browser back button\");\n});\n```\n\nYou can also use popstate event to detect the browser back button. Note: The history entry has been activated using history.pushState method.\n\n```javascript\nwindow.addEventListener(\"popstate\", () => {\n  console.log(\"Clicked browser back button\");\n  box.style.backgroundColor = \"white\";\n});\n\nconst box = document.getElementById(\"div\");\n\nbox.addEventListener(\"click\", () => {\n  box.style.backgroundColor = \"blue\";\n  window.history.pushState({}, null, null);\n});\n```\n\nIn the preceeding code, When the box element clicked, its background color appears in blue color and changed to while color upon clicking the browser back button using `popstate` event handler. The `state` property of `popstate` contains the copy of history entry's state object."
    },
    {
      "id": 345,
      "question": "How do you disable right click in the web page",
      "answer": "The right click on the page can be disabled by returning false from the oncontextmenu attribute on the body element.\n\n```html\n<body oncontextmenu=\"return false;\"></body>\n```"
    },
    {
      "id": 346,
      "question": "What are wrapper objects",
      "answer": "Primitive Values like string, number and boolean don't have properties and methods but they are temporarily converted or coerced to an object (Wrapper object) when you try to perform actions on them. For example, if you apply toUpperCase() method on a primitive string value, it does not throw an error but returns uppercase of the string.\n\n```javascript\nlet name = \"john\";\n\nconsole.log(name.toUpperCase()); // Behind the scenes treated as console.log(new String(name).toUpperCase());\n```\n\ni.e, Every primitive except null and undefined have Wrapper Objects and the list of wrapper objects are String, Number, Boolean, Symbol and BigInt."
    },
    {
      "id": 347,
      "question": "What is AJAX",
      "answer": "AJAX stands for Asynchronous JavaScript and XML and it is a group of related technologies (HTML, CSS, JavaScript, XMLHttpRequest API etc) used to display data asynchronously. i.e. We can send data to the server and get data from the server without reloading the web page."
    },
    {
      "id": 348,
      "question": "What are the different ways to deal with Asynchronous Code",
      "answer": "Below are the list of different ways to deal with Asynchronous code:\n\n1. **Callbacks**\n2. **Promises**\n3. **Async/await**\n4. **Third-party libraries** such as async.js, bluebird etc"
    },
    {
      "id": 349,
      "question": "How to cancel a fetch request",
      "answer": "Until a few days back, One shortcoming of native promises is no direct way to cancel a fetch request. But the new AbortController from js specification allows you to use a signal to abort one or multiple fetch calls. The basic flow of cancelling a fetch request would be as below:\n\n1. Create an AbortController instance\n2. Get the signal property of an instance and pass the signal as a fetch option for signal\n3. Call the AbortController's abort property to cancel all fetches that use that signal\n\nFor example, passing the same signal to multiple fetch calls will cancel all requests with that signal:\n\n```javascript\nconst controller = new AbortController();\nconst { signal } = controller;\n\nfetch(\"http://localhost:8000\", { signal })\n  .then((response) => {\n    console.log(`Request 1 is complete!`);\n  })\n  .catch((e) => {\n    if (e.name === \"AbortError\") {\n      // We know it's been canceled!\n    }\n  });\n\nfetch(\"http://localhost:8000\", { signal })\n  .then((response) => {\n    console.log(`Request 2 is complete!`);\n  })\n  .catch((e) => {\n    if (e.name === \"AbortError\") {\n      // We know it's been canceled!\n    }\n  });\n\n// Wait 2 seconds to abort both requests\nsetTimeout(() => controller.abort(), 2000);\n```"
    },
    {
      "id": 350,
      "question": "What is web speech API",
      "answer": "Web speech API is used to enable modern browsers recognize and synthesize speech (i.e, voice data into web apps). This API was introduced by W3C Community in the year 2012. It has two main parts:\n\n**1. SpeechRecognition (Asynchronous Speech Recognition or Speech-to-Text):** It provides the ability to recognize voice context from an audio input and respond accordingly. This is accessed by the SpeechRecognition interface. The example below shows how to use this API to get text from speech:\n\n```javascript\nwindow.SpeechRecognition =\n  window.webkitSpeechRecognition || window.SpeechRecognition; // webkitSpeechRecognition for Chrome and SpeechRecognition for FF\nconst recognition = new window.SpeechRecognition();\nrecognition.onresult = (event) => {\n  // SpeechRecognitionEvent type\n  const speechToText = event.results[0][0].transcript;\n  console.log(speechToText);\n};\nrecognition.start();\n```\n\nIn this API, browser is going to ask you for permission to use your microphone\n\n**2. SpeechSynthesis (Text-to-Speech):** It provides the ability to recognize voice context from an audio input and respond. This is accessed by the SpeechSynthesis interface. For example, the below code is used to get voice/speech from text:\n\n```javascript\nif (\"speechSynthesis\" in window) {\n  var speech = new SpeechSynthesisUtterance(\"Hello World!\");\n  speech.lang = \"en-US\";\n  window.speechSynthesis.speak(speech);\n}\n```\n\nThe above examples can be tested on chrome(33+) browser's developer console. Note: This API is still a working draft and only available in Chrome and Firefox browsers (ofcourse Chrome only implemented the specification)"
    },
    {
      "id": 351,
      "question": "What is minimum timeout throttling",
      "answer": "Both browser and NodeJS javascript environments throttles with a minimum delay that is greater than 0ms. That means even though setting a delay of 0ms will not happen instantaneously.\n\n**Browsers:** They have a minimum delay of 4ms. This throttle occurs when successive calls are triggered due to callback nesting (certain depth) or after a certain number of successive intervals. Note: The older browsers have a minimum delay of 10ms.\n\n**Nodejs:** They have a minimum delay of 1ms. This throttle happens when the delay is larger than 2147483647 or less than 1.\n\nThe best example to explain this timeout throttling behavior is the order of below code snippet:\n\n```javascript\nfunction runMeFirst() {\n  console.log(\"My script is initialized\");\n}\nsetTimeout(runMeFirst, 0);\nconsole.log(\"Script loaded\");\n```\n\nand the output would be:\n\n```\nScript loaded\nMy script is initialized\n```\n\nIf you don't use setTimeout, the order of logs will be sequential:\n\n```javascript\nfunction runMeFirst() {\n  console.log(\"My script is initialized\");\n}\nrunMeFirst();\nconsole.log(\"Script loaded\");\n```\n\nand the output is:\n\n```\nMy script is initialized\nScript loaded\n```"
    },
    {
      "id": 352,
      "question": "How do you implement zero timeout in modern browsers",
      "answer": "You can't use setTimeout(fn, 0) to execute the code immediately due to minimum delay of greater than 0ms. But you can use window.postMessage() to achieve this behavior."
    },
    {
      "id": 353,
      "question": "What are tasks in event loop",
      "answer": "A task is any javascript code/program which is scheduled to be run by the standard mechanisms such as initially starting to run a program, run an event callback, or an interval or timeout being fired. All these tasks are scheduled on a task queue. Below are the list of use cases to add tasks to the task queue:\n\n1. When a new javascript program is executed directly from console or running by the `<script>` element, the task will be added to the task queue.\n2. When an event fires, the event callback added to task queue\n3. When a setTimeout or setInterval is reached, the corresponding callback added to task queue"
    },
    {
      "id": 354,
      "question": "What is microtask",
      "answer": "A microtask is a type of JavaScript callback that is scheduled to run immediately after the currently executing script and before the next event loop tick. Microtasks are executed after the current task completes and before any new tasks (macrotasks) are run. This ensures a fast and predictable update cycle.\n\nCommon sources of microtasks stored in the microtask queue include:\n\n**Promises:** When a Promise is resolved or rejected, its .then(), .catch(), and .finally() callbacks are placed in the microtask queue.\n\n```javascript\nPromise.resolve().then(() => {\n  console.log('Microtask from a Promise');\n});\n```\n\n**queueMicrotask():** A method that explicitly schedules a function to be run in the microtask queue.\n\n```javascript\nqueueMicrotask(() => {\n  console.log('Microtask from queueMicrotask');\n});\n```\n\n**MutationObserver callbacks:** Observers changes in the DOM and triggers a callback as a microtask.\n\n```javascript\nconst observer = new MutationObserver(() => {\n  console.log('Microtask from MutationObserver');\n})\nobserver.observe(document.body, {childList: true});\n```\n\n**await:** Await internally uses Promises, so the code after await is scheduled as a microtask.\n\n```javascript\nasync function asyncFunction() {\n  await null;\n  console.log('Microtask from Await'); // Schedule this code as microtask\n}\n```\n\nNote: All of these microtasks are processed in the same turn of the event loop."
    },
    {
      "id": 355,
      "question": "What are different event loops",
      "answer": "In JavaScript, there are multiple event loops that can be used depending on the context of your application. The most common event loops are:\n\n**The Browser Event Loop:** The Browser Event Loop is used in client-side JavaScript applications and is responsible for handling events that occur within the browser environment, such as user interactions (clicks, keypresses, etc.), HTTP requests, and other asynchronous actions.\n\n**The Node.js Event Loop:** The Node.js Event Loop is used in server-side JavaScript applications and is responsible for handling events that occur within the Node.js runtime environment, such as file I/O, network I/O, and other asynchronous actions."
    },
    {
      "id": 356,
      "question": "What is the purpose of queueMicrotask",
      "answer": "The queueMicrotask function is used to schedule a microtask, which is a function that will be executed asynchronously in the microtask queue. The purpose of queueMicrotask is to ensure that a function is executed after the current task has finished, but before the browser performs any rendering or handles user events.\n\nExample:\n\n```javascript\nconsole.log(\"Start\"); //1\n\nqueueMicrotask(() => {\n  console.log(\"Inside microtask\"); // 3\n});\n\nconsole.log(\"End\"); //2\n```\n\nBy using queueMicrotask, you can ensure that certain tasks or callbacks are executed at the earliest opportunity during the JavaScript event loop, making it useful for performing work that needs to be done asynchronously but with higher priority than regular setTimeout or setInterval callbacks."
    },
    {
      "id": 357,
      "question": "How do you use javascript libraries in typescript file",
      "answer": "It is known that not all JavaScript libraries or frameworks have TypeScript declaration files. But if you still want to use libraries or frameworks in your TypeScript files without getting compilation errors, the only solution is declare keyword along with a variable declaration. For example, let's imagine you have a library called customLibrary that doesn't have a TypeScript declaration and have a namespace called customLibrary in the global namespace. You can use this library in typescript code as below:\n\n```typescript\ndeclare var customLibrary;\n```\n\nIn the runtime, typescript will provide the type to the customLibrary variable as any type. The another alternative without using declare keyword is below:\n\n```typescript\nvar customLibrary: any;\n```"
    },
    {
      "id": 358,
      "question": "What are the differences between promises and observables",
      "answer": "Some of the major difference in a tabular form:\n\n| Promises | Observables |\n|----------|-------------|\n| Emits only a single value at a time | Emits multiple values over a period of time (stream of values ranging from 0 to multiple) |\n| Eager in nature; they are going to be called immediately | Lazy in nature; they require subscription to be invoked |\n| Promise is always asynchronous even though it resolved immediately | Observable can be either synchronous or asynchronous |\n| Doesn't provide any operators | Provides operators such as map, forEach, filter, reduce, retry, and retryWhen etc |\n| Cannot be canceled | Canceled by using unsubscribe() method |"
    },
    {
      "id": 359,
      "question": "What is heap",
      "answer": "Heap (Or memory heap) is the memory location where objects are stored when we define variables. i.e, This is the place where all the memory allocations and de-allocation take place. Both heap and call-stack are two containers of JS runtime. Whenever runtime comes across variables and function declarations in the code it stores them in the Heap."
    },
    {
      "id": 360,
      "question": "What is an event table",
      "answer": "Event Table is a data structure that stores and keeps track of all the events which will be executed asynchronously like after some time interval or after the resolution of some API requests. i.e Whenever you call a setTimeout function or invoke async operation, it is added to the Event Table. It doesn't not execute functions on it's own. The main purpose of the event table is to keep track of events and send them to the Event Queue."
    },
    {
      "id": 361,
      "question": "What is a microTask queue",
      "answer": "Microtask Queue is the new queue where all the tasks initiated by promise objects get processed before the callback queue. The microtasks queue are processed before the next rendering and painting jobs. But if these microtasks are running for a long time then it leads to visual degradation."
    },
    {
      "id": 362,
      "question": "What is the difference between shim and polyfill",
      "answer": "A **shim** is a library that brings a new API to an older environment, using only the means of that environment. It isn't necessarily restricted to a web application. For example, es5-shim.js is used to emulate ES5 features on older browsers (mainly pre IE9).\n\nWhereas **polyfill** is a piece of code (or plugin) that provides the technology that you, the developer, expect the browser to provide natively. In a simple sentence, a polyfill is a shim for a browser API."
    },
    {
      "id": 363,
      "question": "How do you detect primitive or non primitive value type",
      "answer": "In JavaScript, primitive types include boolean, string, number, BigInt, null, Symbol and undefined. Whereas non-primitive types include the Objects. But you can easily identify them with the below function:\n\n```javascript\nvar myPrimitive = 30;\nvar myNonPrimitive = {};\nfunction isPrimitive(val) {\n  return Object(val) !== val;\n}\n\nisPrimitive(myPrimitive);\nisPrimitive(myNonPrimitive);\n```\n\nIf the value is a primitive data type, the Object constructor creates a new wrapper object for the value. But If the value is a non-primitive data type (an object), the Object constructor will give the same object."
    },
    {
      "id": 364,
      "question": "What is babel",
      "answer": "Babel is a JavaScript transpiler to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments. Some of the main features are listed below:\n\n1. Transform syntax\n2. Polyfill features that are missing in your target environment (using @babel/polyfill)\n3. Source code transformations (or codemods)"
    },
    {
      "id": 365,
      "question": "Is Node.js completely single threaded",
      "answer": "Node is a single thread, but some of the functions included in the Node.js standard library (e.g, fs module functions) are not single threaded. i.e, Their logic runs outside of the Node.js single thread to improve the speed and performance of a program."
    },
    {
      "id": 366,
      "question": "What are the common use cases of observables",
      "answer": "Some of the most common use cases of observables are web sockets with push notifications, user input changes, repeating intervals, etc"
    },
    {
      "id": 367,
      "question": "What is RxJS",
      "answer": "RxJS (Reactive Extensions for JavaScript) is a library for implementing reactive programming using observables that makes it easier to compose asynchronous or callback-based code. It also provides utility functions for creating and working with observables."
    },
    {
      "id": 368,
      "question": "What is the difference between Function constructor and function declaration",
      "answer": "The functions which are created with Function constructor do not create closures to their creation contexts but they are always created in the global scope. i.e, the function can access its own local variables and global scope variables only. Whereas function declarations can access outer function variables (closures) too.\n\nLet's see this difference with an example:\n\n**Function Constructor:**\n\n```javascript\nvar a = 100;\nfunction createFunction() {\n  var a = 200;\n  return new Function(\"return a;\");\n}\nconsole.log(createFunction()()); // 100\n```\n\n**Function declaration:**\n\n```javascript\nvar a = 100;\nfunction createFunction() {\n  var a = 200;\n  return function func() {\n    return a;\n  };\n}\nconsole.log(createFunction()()); // 200\n```"
    },
    {
      "id": 369,
      "question": "What is a Short circuit condition",
      "answer": "Short circuit conditions are meant for condensed way of writing simple if statements. Let's demonstrate the scenario using an example. If you would like to login to a portal with an authentication condition, the expression would be as below:\n\n```javascript\nif (authenticate) {\n  loginToPorta();\n}\n```\n\nSince the javascript logical operators evaluated from left to right, the above expression can be simplified using && logical operator:\n\n```javascript\nauthenticate && loginToPorta();\n```"
    },
    {
      "id": 370,
      "question": "What is the easiest way to resize an array",
      "answer": "The length property of an array is useful to resize or empty an array quickly. Let's apply length property on number array to resize the number of elements from 5 to 2:\n\n```javascript\nvar array = [1, 2, 3, 4, 5];\nconsole.log(array.length); // 5\n\narray.length = 2;\nconsole.log(array.length); // 2\nconsole.log(array); // [1,2]\n```\n\nand the array can be emptied too:\n\n```javascript\nvar array = [1, 2, 3, 4, 5];\narray.length = 0;\nconsole.log(array.length); // 0\nconsole.log(array); // []\n```"
    },
    {
      "id": 371,
      "question": "What is an observable",
      "answer": "An Observable is basically a function that can return a stream of values either synchronously or asynchronously to an observer over time. The consumer can get the value by calling subscribe() method. Let's look at a simple example of an Observable:\n\n```javascript\nimport { Observable } from \"rxjs\";\n\nconst observable = new Observable((observer) => {\n  setTimeout(() => {\n    observer.next(\"Message from a Observable!\");\n  }, 3000);\n});\n\nobservable.subscribe((value) => console.log(value));\n```\n\nNote: Observables are not part of the JavaScript language yet but they are being proposed to be added to the language"
    },
    {
      "id": 372,
      "question": "What is the difference between function and class declarations",
      "answer": "The main difference between function declarations and class declarations is hoisting. The function declarations are hoisted but not class declarations.\n\n**Classes:**\n\n```javascript\nconst user = new User(); // ReferenceError\n\nclass User {}\n```\n\n**Constructor Function:**\n\n```javascript\nconst user = new User(); // No error\n\nfunction User() {}\n```"
    },
    {
      "id": 373,
      "question": "What is an async function",
      "answer": "An async function is a function declared with the async keyword which enables asynchronous, promise-based behavior to be written in a cleaner style by avoiding promise chains. These functions can contain zero or more await expressions.\n\nLet's take a below async function example:\n\n```javascript\nasync function logger() {\n  let data = await fetch(\"http://someapi.com/users\"); // pause until fetch returns\n  console.log(data);\n}\nlogger();\n```\n\nIt is basically syntax sugar over ES2015 promises and generators."
    },
    {
      "id": 374,
      "question": "How do you prevent promises swallowing errors",
      "answer": "While using asynchronous code, JavaScript's ES6 promises can make your life a lot easier without having callback pyramids and error handling on every second line. But Promises have some pitfalls and the biggest one is swallowing errors by default.\n\nLet's say you expect to print an error to the console for all the below cases:\n\n```javascript\nPromise.resolve(\"promised value\").then(function () {\n  throw new Error(\"error\");\n});\n\nPromise.reject(\"error value\").catch(function () {\n  throw new Error(\"error\");\n});\n\nnew Promise(function (resolve, reject) {\n  throw new Error(\"error\");\n});\n```\n\nBut there are many modern JavaScript environments that won't print any errors. You can fix this problem in different ways:\n\n**1. Add catch block at the end of each chain:** You can add catch block to the end of each of your promise chains\n\n```javascript\nPromise.resolve(\"promised value\")\n  .then(function () {\n    throw new Error(\"error\");\n  })\n  .catch(function (error) {\n    console.error(error.stack);\n  });\n```\n\nBut it is quite difficult to type for each promise chain and verbose too.\n\n**2. Add done method:** You can replace first solution's then and catch blocks with done method\n\n```javascript\nPromise.resolve(\"promised value\").done(function () {\n  throw new Error(\"error\");\n});\n```\n\n**3. Extend ES6 Promises by Bluebird:** Bluebird extends the ES6 Promises API to avoid the issue in the second solution. This library has a \"default\" onRejection handler which will print all errors from rejected Promises to stderr."
    },
    {
      "id": 375,
      "question": "What is deno",
      "answer": "Deno is a simple, modern and secure runtime for JavaScript and TypeScript that uses V8 JavaScript engine and the Rust programming language. It solves the inherent problems of Node.Js and has been officially released in May 2018. Unlike Node.JS, by default Deno executes the code in a sandbox, which means that runtime has no access to below areas:\n\n1. The file system\n2. The network\n3. Execution of other scripts\n4. The environment variables"
    },
    {
      "id": 376,
      "question": "How do you make an object iterable in javascript",
      "answer": "By default, plain objects are not iterable. But you can make the object iterable by defining a Symbol.iterator property on it.\n\nLet's demonstrate this with an example:\n\n```javascript\nconst collection = {\n  one: 1,\n  two: 2,\n  three: 3,\n  [Symbol.iterator]() {\n    const values = Object.keys(this);\n    let i = 0;\n    return {\n      next: () => {\n        return {\n          value: this[values[i++]],\n          done: i > values.length,\n        };\n      },\n    };\n  },\n};\n\nconst iterator = collection[Symbol.iterator]();\n\nconsole.log(iterator.next()); // ‚Üí {value: 1, done: false}\nconsole.log(iterator.next()); // ‚Üí {value: 2, done: false}\nconsole.log(iterator.next()); // ‚Üí {value: 3, done: false}\nconsole.log(iterator.next()); // ‚Üí {value: undefined, done: true}\n```\n\nThe above process can be simplified using a generator function:\n\n```javascript\nconst collection = {\n  one: 1,\n  two: 2,\n  three: 3,\n  [Symbol.iterator]: function* () {\n    for (let key in this) {\n      yield this[key];\n    }\n  },\n};\nconst iterator = collection[Symbol.iterator]();\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true}\n```"
    },
    {
      "id": 377,
      "question": "What is a Proper Tail Call",
      "answer": "First, we should know about tail call before talking about \"Proper Tail Call\". A tail call is a subroutine or function call performed as the final action of a calling function. Whereas Proper tail call (PTC) is a technique where the program or code will not create additional stack frames for a recursion when the function call is a tail call.\n\nFor example, the below classic or head recursion of factorial function relies on stack for each step. Each step need to be processed upto n * factorial(n - 1):\n\n```javascript\nfunction factorial(n) {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\nconsole.log(factorial(5)); //120\n```\n\nBut if you use Tail recursion functions, they keep passing all the necessary data it needs down the recursion without relying on the stack:\n\n```javascript\nfunction factorial(n, acc = 1) {\n  if (n === 0) {\n    return acc;\n  }\n  return factorial(n - 1, n * acc);\n}\nconsole.log(factorial(5)); //120\n```\n\nThe above pattern returns the same output as the first one. But the accumulator keeps track of total as an argument without using stack memory on recursive calls."
    },
    {
      "id": 378,
      "question": "How do you check an object is a promise or not",
      "answer": "If you don't know if a value is a promise or not, wrapping the value as Promise.resolve(value) which returns a promise:\n\n```javascript\nfunction isPromise(object) {\n  if (Promise && Promise.resolve) {\n    return Promise.resolve(object) == object;\n  } else {\n    throw \"Promise not supported in your environment\";\n  }\n}\n\nvar i = 1;\nvar promise = new Promise(function (resolve, reject) {\n  resolve();\n});\n\nconsole.log(isPromise(i)); // false\nconsole.log(isPromise(promise)); // true\n```\n\nAnother way is to check for .then() handler type:\n\n```javascript\nfunction isPromise(value) {\n  return Boolean(value && typeof value.then === \"function\");\n}\nvar i = 1;\nvar promise = new Promise(function (resolve, reject) {\n  resolve();\n});\n\nconsole.log(isPromise(i)); // false\nconsole.log(isPromise(promise)); // true\n```"
    },
    {
      "id": 379,
      "question": "How to detect if a function is called as constructor",
      "answer": "You can use new.target pseudo-property to detect whether a function was called as a constructor (using the new operator) or as a regular function call.\n\n- If a constructor or function invoked using the new operator, new.target returns a reference to the constructor or function.\n- For function calls, new.target is undefined.\n\n```javascript\nfunction Myfunc() {\n  if (new.target) {\n    console.log(\"called with new\");\n  } else {\n    console.log(\"not called with new\");\n  }\n}\n\nnew Myfunc(); // called with new\nMyfunc(); // not called with new\nMyfunc.call({}); // not called with new\n```"
    },
    {
      "id": 380,
      "question": "What are the differences between arguments object and rest parameter",
      "answer": "There are three main differences between arguments object and rest parameters:\n\n1. The arguments object is an array-like but not an array. Whereas the rest parameters are array instances.\n2. The arguments object does not support methods such as sort, map, forEach, or pop. Whereas these methods can be used in rest parameters.\n3. The rest parameters are only the ones that haven't been given a separate name, while the arguments object contains all arguments passed to the function"
    },
    {
      "id": 381,
      "question": "What are the differences between spread operator and rest parameter",
      "answer": "Rest parameter collects all remaining elements into an array. Whereas Spread operator allows iterables (arrays / objects / strings) to be expanded into single arguments/elements. i.e, Rest parameter is opposite to the spread operator."
    },
    {
      "id": 382,
      "question": "What are the different kinds of generators",
      "answer": "There are five kinds of generators:\n\n**1. Generator function declaration:**\n\n```javascript\nfunction* myGenFunc() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\nconst genObj = myGenFunc();\n```\n\n**2. Generator function expressions:**\n\n```javascript\nconst myGenFunc = function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\nconst genObj = myGenFunc();\n```\n\n**3. Generator method definitions in object literals:**\n\n```javascript\nconst myObj = {\n  *myGeneratorMethod() {\n    yield 1;\n    yield 2;\n    yield 3;\n  },\n};\nconst genObj = myObj.myGeneratorMethod();\n```\n\n**4. Generator method definitions in class:**\n\n```javascript\nclass MyClass {\n  *myGeneratorMethod() {\n    yield 1;\n    yield 2;\n    yield 3;\n  }\n}\nconst myObject = new MyClass();\nconst genObj = myObject.myGeneratorMethod();\n```\n\n**5. Generator as a computed property:**\n\n```javascript\nconst SomeObj = {\n  *[Symbol.iterator]() {\n    yield 1;\n    yield 2;\n    yield 3;\n  },\n};\n\nconsole.log(Array.from(SomeObj)); // [ 1, 2, 3 ]\n```"
    },
    {
      "id": 383,
      "question": "What are the built-in iterables",
      "answer": "Below are the list of built-in iterables in javascript:\n\n1. **Arrays and TypedArrays**\n2. **Strings:** Iterate over each character or Unicode code-points\n3. **Maps:** iterate over its key-value pairs\n4. **Sets:** iterates over their elements\n5. **arguments:** An array-like special variable in functions\n6. **DOM collection** such as NodeList"
    }
  ]
}